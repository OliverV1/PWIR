
V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b50  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009d28  08009d28  00019d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d80  08009d80  0002018c  2**0
                  CONTENTS
  4 .ARM          00000000  08009d80  08009d80  0002018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d80  08009d80  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d80  08009d80  00019d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d84  08009d84  00019d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08009d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001474  2000018c  08009f14  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001600  08009f14  00021600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a839  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033ff  00000000  00000000  0003a9f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001368  00000000  00000000  0003ddf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f0  00000000  00000000  0003f160  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000206b4  00000000  00000000  00040350  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011b36  00000000  00000000  00060a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c483e  00000000  00000000  0007253a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136d78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005264  00000000  00000000  00136df4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000018c 	.word	0x2000018c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009d10 	.word	0x08009d10

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000190 	.word	0x20000190
 8000214:	08009d10 	.word	0x08009d10

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <CDC_On_Receive>:
Received received = {.speed1 = 125, .speed2 = 125, .speed3 = 125, .throwerSpeed = 0, .delimiter = 0}; // (4)
volatile uint8_t isCommandReceived = 0; // (5)
volatile float pGain, iGain, dGain = 0;


void CDC_On_Receive(uint8_t* buffer, uint32_t* length) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]

  if (*length == sizeof(Received)) {
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b05      	cmp	r3, #5
 8000ad4:	d10c      	bne.n	8000af0 <CDC_On_Receive+0x2c>
	  memcpy(&received, buffer, sizeof(Received));
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <CDC_On_Receive+0x38>)
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	6810      	ldr	r0, [r2, #0]
 8000adc:	6018      	str	r0, [r3, #0]
 8000ade:	7912      	ldrb	r2, [r2, #4]
 8000ae0:	711a      	strb	r2, [r3, #4]

	 if (received.delimiter == 0xAA) { // (9)
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <CDC_On_Receive+0x38>)
 8000ae4:	791b      	ldrb	r3, [r3, #4]
 8000ae6:	2baa      	cmp	r3, #170	; 0xaa
 8000ae8:	d102      	bne.n	8000af0 <CDC_On_Receive+0x2c>
		  isCommandReceived = 1;
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <CDC_On_Receive+0x3c>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	20000000 	.word	0x20000000
 8000b00:	200001a8 	.word	0x200001a8

08000b04 <Set_Motor_Speed>:


void Set_Motor_Speed(volatile uint32_t *channel_a,
		volatile uint32_t *channel_b, int32_t motor_speed) {
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
	if (motor_speed > 0) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	dd15      	ble.n	8000b42 <Set_Motor_Speed+0x3e>
		// forward
		if (motor_speed <= MOTORS_MAX_SPEED) {
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b64      	cmp	r3, #100	; 0x64
 8000b1a:	dc0b      	bgt.n	8000b34 <Set_Motor_Speed+0x30>
			// 0 to 100 compact range
			*channel_a = motor_speed * MOTORS_CO + MOTORS_MIN_CCR;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000b2a:	3320      	adds	r3, #32
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	e002      	b.n	8000b3a <Set_Motor_Speed+0x36>
		} else {
			// 100 to 65535 full range
			*channel_a = motor_speed;
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	601a      	str	r2, [r3, #0]
		}
		*channel_b = 0;
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
	} else {
		// stop
		*channel_a = 0;
		*channel_b = 0;
	}
}
 8000b40:	e020      	b.n	8000b84 <Set_Motor_Speed+0x80>
	} else if (motor_speed < 0) {
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	da17      	bge.n	8000b78 <Set_Motor_Speed+0x74>
		if (motor_speed >= -MOTORS_MAX_SPEED) {
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000b4e:	db0a      	blt.n	8000b66 <Set_Motor_Speed+0x62>
			*channel_b = motor_speed * -MOTORS_CO + MOTORS_MIN_CCR;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <Set_Motor_Speed+0x8c>)
 8000b54:	fb02 f303 	mul.w	r3, r2, r3
 8000b58:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000b5c:	3320      	adds	r3, #32
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	e004      	b.n	8000b70 <Set_Motor_Speed+0x6c>
			*channel_b = motor_speed * -1;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	425b      	negs	r3, r3
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	601a      	str	r2, [r3, #0]
		*channel_a = 0;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
}
 8000b76:	e005      	b.n	8000b84 <Set_Motor_Speed+0x80>
		*channel_a = 0;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
		*channel_b = 0;
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	fffffe3e 	.word	0xfffffe3e

08000b94 <PID2>:


int PID2(uint8_t enc, uint8_t setpoint){
 8000b94:	b480      	push	{r7}
 8000b96:	b089      	sub	sp, #36	; 0x24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	460a      	mov	r2, r1
 8000b9e:	71fb      	strb	r3, [r7, #7]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	71bb      	strb	r3, [r7, #6]


	enc = 250 - enc;
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8000baa:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8000bae:	33fa      	adds	r3, #250	; 0xfa
 8000bb0:	71fb      	strb	r3, [r7, #7]

	float P = 0.4;
 8000bb2:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <PID2+0xc8>)
 8000bb4:	61bb      	str	r3, [r7, #24]
	float I = 0.00001;
 8000bb6:	4b2a      	ldr	r3, [pc, #168]	; (8000c60 <PID2+0xcc>)
 8000bb8:	617b      	str	r3, [r7, #20]
	float D = 0;
 8000bba:	f04f 0300 	mov.w	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]

	static long integral = 0;

	if(setpoint == 0){
 8000bc0:	79bb      	ldrb	r3, [r7, #6]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d104      	bne.n	8000bd0 <PID2+0x3c>
		integral = 0;
 8000bc6:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <PID2+0xd0>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
		return 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e03f      	b.n	8000c50 <PID2+0xbc>
	}


	//CDC_Transmit_FS(&enc, sizeof(enc));

	float error = setpoint - enc;
 8000bd0:	79ba      	ldrb	r2, [r7, #6]
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	ee07 3a90 	vmov	s15, r3
 8000bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bde:	edc7 7a03 	vstr	s15, [r7, #12]

	integral += error;
 8000be2:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <PID2+0xd0>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	ee07 3a90 	vmov	s15, r3
 8000bea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bee:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bfa:	ee17 2a90 	vmov	r2, s15
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <PID2+0xd0>)
 8000c00:	601a      	str	r2, [r3, #0]

	int out = 50 + P*error + I*integral;
 8000c02:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c06:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c0e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000c68 <PID2+0xd4>
 8000c12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <PID2+0xd0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	ee07 3a90 	vmov	s15, r3
 8000c1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c22:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c32:	ee17 3a90 	vmov	r3, s15
 8000c36:	61fb      	str	r3, [r7, #28]

	if(out < 0){
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	da01      	bge.n	8000c42 <PID2+0xae>
		out = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
	}


	if(out > 100) out = 100;
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	2b64      	cmp	r3, #100	; 0x64
 8000c46:	dd01      	ble.n	8000c4c <PID2+0xb8>
 8000c48:	2364      	movs	r3, #100	; 0x64
 8000c4a:	61fb      	str	r3, [r7, #28]

	//CDC_Transmit_FS(&out, sizeof(out));
	return (uint8_t)out;
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	b2db      	uxtb	r3, r3
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3724      	adds	r7, #36	; 0x24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	3ecccccd 	.word	0x3ecccccd
 8000c60:	3727c5ac 	.word	0x3727c5ac
 8000c64:	200001ac 	.word	0x200001ac
 8000c68:	42480000 	.word	0x42480000
 8000c6c:	00000000 	.word	0x00000000

08000c70 <main>:
  */



int main(void)
{
 8000c70:	b5b0      	push	{r4, r5, r7, lr}
 8000c72:	b08e      	sub	sp, #56	; 0x38
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c76:	f000 ff70 	bl	8001b5a <HAL_Init>

  /* USER CODE BEGIN Init */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000c7a:	4b9f      	ldr	r3, [pc, #636]	; (8000ef8 <main+0x288>)
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	4a9e      	ldr	r2, [pc, #632]	; (8000ef8 <main+0x288>)
 8000c80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c84:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 8000c86:	4b9d      	ldr	r3, [pc, #628]	; (8000efc <main+0x28c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000c8c:	4b9b      	ldr	r3, [pc, #620]	; (8000efc <main+0x28c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a9a      	ldr	r2, [pc, #616]	; (8000efc <main+0x28c>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	6013      	str	r3, [r2, #0]

    unsigned long esctimer = DWT->CYCCNT;
 8000c98:	4b98      	ldr	r3, [pc, #608]	; (8000efc <main+0x28c>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	637b      	str	r3, [r7, #52]	; 0x34

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9e:	f000 fa75 	bl	800118c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca2:	f000 fd31 	bl	8001708 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000ca6:	f000 fad9 	bl	800125c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000caa:	f000 fb95 	bl	80013d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cae:	f000 fc17 	bl	80014e0 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000cb2:	f000 fc99 	bl	80015e8 <MX_TIM8_Init>
  MX_TIM16_Init();
 8000cb6:	f000 fd01 	bl	80016bc <MX_TIM16_Init>
  MX_USB_Device_Init();
 8000cba:	f008 fb2b 	bl	8009314 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
 // HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	488f      	ldr	r0, [pc, #572]	; (8000f00 <main+0x290>)
 8000cc2:	f003 fe61 	bl	8004988 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000cc6:	2104      	movs	r1, #4
 8000cc8:	488d      	ldr	r0, [pc, #564]	; (8000f00 <main+0x290>)
 8000cca:	f003 fe5d 	bl	8004988 <HAL_TIM_PWM_Start>
  	TIM1->CCR1 = 0;
 8000cce:	4b8d      	ldr	r3, [pc, #564]	; (8000f04 <main+0x294>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	635a      	str	r2, [r3, #52]	; 0x34
  	TIM1->CCR2 = 0;
 8000cd4:	4b8b      	ldr	r3, [pc, #556]	; (8000f04 <main+0x294>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	639a      	str	r2, [r3, #56]	; 0x38


  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	488a      	ldr	r0, [pc, #552]	; (8000f08 <main+0x298>)
 8000cde:	f003 fe53 	bl	8004988 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000ce2:	2104      	movs	r1, #4
 8000ce4:	4888      	ldr	r0, [pc, #544]	; (8000f08 <main+0x298>)
 8000ce6:	f003 fe4f 	bl	8004988 <HAL_TIM_PWM_Start>
  	TIM3->CCR1 = 0;
 8000cea:	4b88      	ldr	r3, [pc, #544]	; (8000f0c <main+0x29c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	635a      	str	r2, [r3, #52]	; 0x34
  	TIM3->CCR2 = 0;
 8000cf0:	4b86      	ldr	r3, [pc, #536]	; (8000f0c <main+0x29c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	639a      	str	r2, [r3, #56]	; 0x38


  	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4885      	ldr	r0, [pc, #532]	; (8000f10 <main+0x2a0>)
 8000cfa:	f003 fe45 	bl	8004988 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000cfe:	2104      	movs	r1, #4
 8000d00:	4883      	ldr	r0, [pc, #524]	; (8000f10 <main+0x2a0>)
 8000d02:	f003 fe41 	bl	8004988 <HAL_TIM_PWM_Start>
  	TIM4->CCR1 = 0;
 8000d06:	4b83      	ldr	r3, [pc, #524]	; (8000f14 <main+0x2a4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	635a      	str	r2, [r3, #52]	; 0x34
  	TIM4->CCR2 = 0;
 8000d0c:	4b81      	ldr	r3, [pc, #516]	; (8000f14 <main+0x2a4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	639a      	str	r2, [r3, #56]	; 0x38

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int ENC2 = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
	int prev_ENC2 = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned long ENCA_S = DWT->CYCCNT;
 8000d1a:	4b78      	ldr	r3, [pc, #480]	; (8000efc <main+0x28c>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	623b      	str	r3, [r7, #32]
	unsigned long ENCA_D;
	uint8_t ENCA_P = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	77fb      	strb	r3, [r7, #31]

	unsigned long ENCA_S1 = DWT->CYCCNT;
 8000d24:	4b75      	ldr	r3, [pc, #468]	; (8000efc <main+0x28c>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	61bb      	str	r3, [r7, #24]
	unsigned long ENCA_D1;
	uint8_t ENCA_P3 = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	75fb      	strb	r3, [r7, #23]

	unsigned long ENCA_S3 = DWT->CYCCNT;
 8000d2e:	4b73      	ldr	r3, [pc, #460]	; (8000efc <main+0x28c>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	613b      	str	r3, [r7, #16]
	unsigned long ENCA_D3;
	uint8_t ENCA_P2 = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	73fb      	strb	r3, [r7, #15]
  while (1)
  {


	  //ESC
	  if((DWT->CYCCNT - esctimer)/96000 > 20){
 8000d38:	4b70      	ldr	r3, [pc, #448]	; (8000efc <main+0x28c>)
 8000d3a:	685a      	ldr	r2, [r3, #4]
 8000d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	4a75      	ldr	r2, [pc, #468]	; (8000f18 <main+0x2a8>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d938      	bls.n	8000db8 <main+0x148>
		  esctimer = DWT->CYCCNT;
 8000d46:	4b6d      	ldr	r3, [pc, #436]	; (8000efc <main+0x28c>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
		  HAL_GPIO_WritePin(ESCPWM_GPIO_Port, ESCPWM_Pin,1);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2120      	movs	r1, #32
 8000d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d54:	f001 fa1c 	bl	8002190 <HAL_GPIO_WritePin>
		  while((DWT->CYCCNT - esctimer) / 96 < (received.throwerSpeed*3.92+1000));
 8000d58:	bf00      	nop
 8000d5a:	4b68      	ldr	r3, [pc, #416]	; (8000efc <main+0x28c>)
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	4a6e      	ldr	r2, [pc, #440]	; (8000f1c <main+0x2ac>)
 8000d64:	fba2 2303 	umull	r2, r3, r2, r3
 8000d68:	099b      	lsrs	r3, r3, #6
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fb96 	bl	800049c <__aeabi_ui2d>
 8000d70:	4604      	mov	r4, r0
 8000d72:	460d      	mov	r5, r1
 8000d74:	4b6a      	ldr	r3, [pc, #424]	; (8000f20 <main+0x2b0>)
 8000d76:	78db      	ldrb	r3, [r3, #3]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fb9f 	bl	80004bc <__aeabi_i2d>
 8000d7e:	a35c      	add	r3, pc, #368	; (adr r3, 8000ef0 <main+0x280>)
 8000d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d84:	f7ff fc04 	bl	8000590 <__aeabi_dmul>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f04f 0200 	mov.w	r2, #0
 8000d94:	4b63      	ldr	r3, [pc, #396]	; (8000f24 <main+0x2b4>)
 8000d96:	f7ff fa45 	bl	8000224 <__adddf3>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	4620      	mov	r0, r4
 8000da0:	4629      	mov	r1, r5
 8000da2:	f7ff fe67 	bl	8000a74 <__aeabi_dcmplt>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1d6      	bne.n	8000d5a <main+0xea>
		  HAL_GPIO_WritePin(ESCPWM_GPIO_Port, ESCPWM_Pin,0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2120      	movs	r1, #32
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db4:	f001 f9ec 	bl	8002190 <HAL_GPIO_WritePin>





	  	  unsigned long while_timeout = DWT->CYCCNT;
 8000db8:	4b50      	ldr	r3, [pc, #320]	; (8000efc <main+0x28c>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	60bb      	str	r3, [r7, #8]
	  	  int timeout_flag = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
		  while(HAL_GPIO_ReadPin(ENC2_A_GPIO_Port, ENC2_A_Pin) == 1){  // ootab kuni läheb madalaks
 8000dc2:	e009      	b.n	8000dd8 <main+0x168>
			  if((DWT->CYCCNT - while_timeout)/2000 > 249){
 8000dc4:	4b4d      	ldr	r3, [pc, #308]	; (8000efc <main+0x28c>)
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	4a56      	ldr	r2, [pc, #344]	; (8000f28 <main+0x2b8>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d902      	bls.n	8000dd8 <main+0x168>
				  timeout_flag = 1;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
				  break;
 8000dd6:	e007      	b.n	8000de8 <main+0x178>
		  while(HAL_GPIO_ReadPin(ENC2_A_GPIO_Port, ENC2_A_Pin) == 1){  // ootab kuni läheb madalaks
 8000dd8:	2101      	movs	r1, #1
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dde:	f001 f9bf 	bl	8002160 <HAL_GPIO_ReadPin>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d0ed      	beq.n	8000dc4 <main+0x154>
			  }
		  }
		  while_timeout = DWT->CYCCNT;
 8000de8:	4b44      	ldr	r3, [pc, #272]	; (8000efc <main+0x28c>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	60bb      	str	r3, [r7, #8]
		  while(HAL_GPIO_ReadPin(ENC2_A_GPIO_Port, ENC2_A_Pin) == 0){ //ootab kuni läheb kõrgeks
 8000dee:	e009      	b.n	8000e04 <main+0x194>
			  if((DWT->CYCCNT - while_timeout)/2000 > 249){
 8000df0:	4b42      	ldr	r3, [pc, #264]	; (8000efc <main+0x28c>)
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	4a4b      	ldr	r2, [pc, #300]	; (8000f28 <main+0x2b8>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d902      	bls.n	8000e04 <main+0x194>
				  timeout_flag = 1;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
				  break;
 8000e02:	e007      	b.n	8000e14 <main+0x1a4>
		  while(HAL_GPIO_ReadPin(ENC2_A_GPIO_Port, ENC2_A_Pin) == 0){ //ootab kuni läheb kõrgeks
 8000e04:	2101      	movs	r1, #1
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0a:	f001 f9a9 	bl	8002160 <HAL_GPIO_ReadPin>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0ed      	beq.n	8000df0 <main+0x180>
			  }
		  }
		  while_timeout = DWT->CYCCNT;
 8000e14:	4b39      	ldr	r3, [pc, #228]	; (8000efc <main+0x28c>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	60bb      	str	r3, [r7, #8]
		  ENCA_S = DWT->CYCCNT;
 8000e1a:	4b38      	ldr	r3, [pc, #224]	; (8000efc <main+0x28c>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	623b      	str	r3, [r7, #32]
		  while(HAL_GPIO_ReadPin(ENC2_A_GPIO_Port, ENC2_A_Pin) == 1){ // ootab kuni läheb madalaks
 8000e20:	e009      	b.n	8000e36 <main+0x1c6>
			  if((DWT->CYCCNT - while_timeout)/2000 > 249){
 8000e22:	4b36      	ldr	r3, [pc, #216]	; (8000efc <main+0x28c>)
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	4a3f      	ldr	r2, [pc, #252]	; (8000f28 <main+0x2b8>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d902      	bls.n	8000e36 <main+0x1c6>
				  timeout_flag = 1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
				  break;
 8000e34:	e007      	b.n	8000e46 <main+0x1d6>
		  while(HAL_GPIO_ReadPin(ENC2_A_GPIO_Port, ENC2_A_Pin) == 1){ // ootab kuni läheb madalaks
 8000e36:	2101      	movs	r1, #1
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3c:	f001 f990 	bl	8002160 <HAL_GPIO_ReadPin>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d0ed      	beq.n	8000e22 <main+0x1b2>
			  }
		  }

		  ENCA_D = ((DWT->CYCCNT - ENCA_S) / 2000);
 8000e46:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <main+0x28c>)
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	6a3b      	ldr	r3, [r7, #32]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	4a37      	ldr	r2, [pc, #220]	; (8000f2c <main+0x2bc>)
 8000e50:	fba2 2303 	umull	r2, r3, r2, r3
 8000e54:	09db      	lsrs	r3, r3, #7
 8000e56:	633b      	str	r3, [r7, #48]	; 0x30
		  if(ENCA_D > 249 || timeout_flag == 1) ENCA_D = 249;
 8000e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e5a:	2bf9      	cmp	r3, #249	; 0xf9
 8000e5c:	d802      	bhi.n	8000e64 <main+0x1f4>
 8000e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d101      	bne.n	8000e68 <main+0x1f8>
 8000e64:	23f9      	movs	r3, #249	; 0xf9
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
		  ENCA_P = (uint8_t)ENCA_D;
 8000e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6a:	77fb      	strb	r3, [r7, #31]





		  while_timeout = DWT->CYCCNT;
 8000e6c:	4b23      	ldr	r3, [pc, #140]	; (8000efc <main+0x28c>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	60bb      	str	r3, [r7, #8]
		  timeout_flag = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
		  while(HAL_GPIO_ReadPin(ENC1A_GPIO_Port, ENC1A_Pin) == 1){  // ootab kuni läheb madalaks
 8000e76:	e009      	b.n	8000e8c <main+0x21c>
			  if((DWT->CYCCNT - while_timeout)/2000 > 249){
 8000e78:	4b20      	ldr	r3, [pc, #128]	; (8000efc <main+0x28c>)
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	4a29      	ldr	r2, [pc, #164]	; (8000f28 <main+0x2b8>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d902      	bls.n	8000e8c <main+0x21c>
				  timeout_flag = 1;
 8000e86:	2301      	movs	r3, #1
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
				  break;
 8000e8a:	e007      	b.n	8000e9c <main+0x22c>
		  while(HAL_GPIO_ReadPin(ENC1A_GPIO_Port, ENC1A_Pin) == 1){  // ootab kuni läheb madalaks
 8000e8c:	2104      	movs	r1, #4
 8000e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e92:	f001 f965 	bl	8002160 <HAL_GPIO_ReadPin>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d0ed      	beq.n	8000e78 <main+0x208>
			  }
		  }
		  while_timeout = DWT->CYCCNT;
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <main+0x28c>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	60bb      	str	r3, [r7, #8]
		  while(HAL_GPIO_ReadPin(ENC1A_GPIO_Port, ENC1A_Pin) == 0){ //ootab kuni läheb kõrgeks
 8000ea2:	e009      	b.n	8000eb8 <main+0x248>
			  if((DWT->CYCCNT - while_timeout)/2000 > 249){
 8000ea4:	4b15      	ldr	r3, [pc, #84]	; (8000efc <main+0x28c>)
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	4a1e      	ldr	r2, [pc, #120]	; (8000f28 <main+0x2b8>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d902      	bls.n	8000eb8 <main+0x248>
				  timeout_flag = 1;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
				  break;
 8000eb6:	e007      	b.n	8000ec8 <main+0x258>
		  while(HAL_GPIO_ReadPin(ENC1A_GPIO_Port, ENC1A_Pin) == 0){ //ootab kuni läheb kõrgeks
 8000eb8:	2104      	movs	r1, #4
 8000eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebe:	f001 f94f 	bl	8002160 <HAL_GPIO_ReadPin>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0ed      	beq.n	8000ea4 <main+0x234>
			  }
		  }
		  while_timeout = DWT->CYCCNT;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <main+0x28c>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	60bb      	str	r3, [r7, #8]
		  ENCA_S = DWT->CYCCNT;
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <main+0x28c>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	623b      	str	r3, [r7, #32]
		  while(HAL_GPIO_ReadPin(ENC1A_GPIO_Port, ENC1A_Pin) == 1){ // ootab kuni läheb madalaks
 8000ed4:	e02c      	b.n	8000f30 <main+0x2c0>
			  if((DWT->CYCCNT - while_timeout)/2000 > 249){
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <main+0x28c>)
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <main+0x2b8>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d925      	bls.n	8000f30 <main+0x2c0>
				  timeout_flag = 1;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
				  break;
 8000ee8:	e02a      	b.n	8000f40 <main+0x2d0>
 8000eea:	bf00      	nop
 8000eec:	f3af 8000 	nop.w
 8000ef0:	f5c28f5c 	.word	0xf5c28f5c
 8000ef4:	400f5c28 	.word	0x400f5c28
 8000ef8:	e000edf0 	.word	0xe000edf0
 8000efc:	e0001000 	.word	0xe0001000
 8000f00:	2000053c 	.word	0x2000053c
 8000f04:	40012c00 	.word	0x40012c00
 8000f08:	200004d0 	.word	0x200004d0
 8000f0c:	40000400 	.word	0x40000400
 8000f10:	20000468 	.word	0x20000468
 8000f14:	40000800 	.word	0x40000800
 8000f18:	001ec2ff 	.word	0x001ec2ff
 8000f1c:	aaaaaaab 	.word	0xaaaaaaab
 8000f20:	20000000 	.word	0x20000000
 8000f24:	408f4000 	.word	0x408f4000
 8000f28:	0007a11f 	.word	0x0007a11f
 8000f2c:	10624dd3 	.word	0x10624dd3
		  while(HAL_GPIO_ReadPin(ENC1A_GPIO_Port, ENC1A_Pin) == 1){ // ootab kuni läheb madalaks
 8000f30:	2104      	movs	r1, #4
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f36:	f001 f913 	bl	8002160 <HAL_GPIO_ReadPin>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d0ca      	beq.n	8000ed6 <main+0x266>
			  }
		  }

		  ENCA_D = ((DWT->CYCCNT - ENCA_S) / 2000);
 8000f40:	4b87      	ldr	r3, [pc, #540]	; (8001160 <main+0x4f0>)
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	6a3b      	ldr	r3, [r7, #32]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	4a86      	ldr	r2, [pc, #536]	; (8001164 <main+0x4f4>)
 8000f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4e:	09db      	lsrs	r3, r3, #7
 8000f50:	633b      	str	r3, [r7, #48]	; 0x30
		  if(ENCA_D > 249 || timeout_flag == 1) ENCA_D = 249;
 8000f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f54:	2bf9      	cmp	r3, #249	; 0xf9
 8000f56:	d802      	bhi.n	8000f5e <main+0x2ee>
 8000f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d101      	bne.n	8000f62 <main+0x2f2>
 8000f5e:	23f9      	movs	r3, #249	; 0xf9
 8000f60:	633b      	str	r3, [r7, #48]	; 0x30
		  ENCA_P3 = (uint8_t)ENCA_D;
 8000f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f64:	75fb      	strb	r3, [r7, #23]





		  while_timeout = DWT->CYCCNT;
 8000f66:	4b7e      	ldr	r3, [pc, #504]	; (8001160 <main+0x4f0>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	60bb      	str	r3, [r7, #8]
  	  	  timeout_flag = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  		  while(HAL_GPIO_ReadPin(ENC3A_GPIO_Port, ENC3A_Pin) == 1){  // ootab kuni läheb madalaks
 8000f70:	e009      	b.n	8000f86 <main+0x316>
  			  if((DWT->CYCCNT - while_timeout)/2000 > 249){
 8000f72:	4b7b      	ldr	r3, [pc, #492]	; (8001160 <main+0x4f0>)
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	4a7b      	ldr	r2, [pc, #492]	; (8001168 <main+0x4f8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d902      	bls.n	8000f86 <main+0x316>
  				  timeout_flag = 1;
 8000f80:	2301      	movs	r3, #1
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  				  break;
 8000f84:	e006      	b.n	8000f94 <main+0x324>
  		  while(HAL_GPIO_ReadPin(ENC3A_GPIO_Port, ENC3A_Pin) == 1){  // ootab kuni läheb madalaks
 8000f86:	2102      	movs	r1, #2
 8000f88:	4878      	ldr	r0, [pc, #480]	; (800116c <main+0x4fc>)
 8000f8a:	f001 f8e9 	bl	8002160 <HAL_GPIO_ReadPin>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d0ee      	beq.n	8000f72 <main+0x302>
  			  }
  		  }
  		  while_timeout = DWT->CYCCNT;
 8000f94:	4b72      	ldr	r3, [pc, #456]	; (8001160 <main+0x4f0>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	60bb      	str	r3, [r7, #8]
  		  while(HAL_GPIO_ReadPin(ENC3A_GPIO_Port, ENC3A_Pin) == 0){ //ootab kuni läheb kõrgeks
 8000f9a:	e009      	b.n	8000fb0 <main+0x340>
  			  if((DWT->CYCCNT - while_timeout)/2000 > 249){
 8000f9c:	4b70      	ldr	r3, [pc, #448]	; (8001160 <main+0x4f0>)
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	4a70      	ldr	r2, [pc, #448]	; (8001168 <main+0x4f8>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d902      	bls.n	8000fb0 <main+0x340>
  				  timeout_flag = 1;
 8000faa:	2301      	movs	r3, #1
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  				  break;
 8000fae:	e006      	b.n	8000fbe <main+0x34e>
  		  while(HAL_GPIO_ReadPin(ENC3A_GPIO_Port, ENC3A_Pin) == 0){ //ootab kuni läheb kõrgeks
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	486e      	ldr	r0, [pc, #440]	; (800116c <main+0x4fc>)
 8000fb4:	f001 f8d4 	bl	8002160 <HAL_GPIO_ReadPin>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0ee      	beq.n	8000f9c <main+0x32c>
  			  }
  		  }
  		  while_timeout = DWT->CYCCNT;
 8000fbe:	4b68      	ldr	r3, [pc, #416]	; (8001160 <main+0x4f0>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	60bb      	str	r3, [r7, #8]
  		  ENCA_S = DWT->CYCCNT;
 8000fc4:	4b66      	ldr	r3, [pc, #408]	; (8001160 <main+0x4f0>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	623b      	str	r3, [r7, #32]
  		  while(HAL_GPIO_ReadPin(ENC3A_GPIO_Port, ENC3A_Pin) == 1){ // ootab kuni läheb madalaks
 8000fca:	e009      	b.n	8000fe0 <main+0x370>
  			  if((DWT->CYCCNT - while_timeout)/2000 > 249){
 8000fcc:	4b64      	ldr	r3, [pc, #400]	; (8001160 <main+0x4f0>)
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	4a64      	ldr	r2, [pc, #400]	; (8001168 <main+0x4f8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d902      	bls.n	8000fe0 <main+0x370>
  				  timeout_flag = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  				  break;
 8000fde:	e006      	b.n	8000fee <main+0x37e>
  		  while(HAL_GPIO_ReadPin(ENC3A_GPIO_Port, ENC3A_Pin) == 1){ // ootab kuni läheb madalaks
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	4862      	ldr	r0, [pc, #392]	; (800116c <main+0x4fc>)
 8000fe4:	f001 f8bc 	bl	8002160 <HAL_GPIO_ReadPin>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d0ee      	beq.n	8000fcc <main+0x35c>
  			  }
  		  }

		  ENCA_D = ((DWT->CYCCNT - ENCA_S) / 2000);
 8000fee:	4b5c      	ldr	r3, [pc, #368]	; (8001160 <main+0x4f0>)
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	6a3b      	ldr	r3, [r7, #32]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	4a5b      	ldr	r2, [pc, #364]	; (8001164 <main+0x4f4>)
 8000ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffc:	09db      	lsrs	r3, r3, #7
 8000ffe:	633b      	str	r3, [r7, #48]	; 0x30
		  if(ENCA_D > 249 || timeout_flag == 1) ENCA_D = 249;
 8001000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001002:	2bf9      	cmp	r3, #249	; 0xf9
 8001004:	d802      	bhi.n	800100c <main+0x39c>
 8001006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001008:	2b01      	cmp	r3, #1
 800100a:	d101      	bne.n	8001010 <main+0x3a0>
 800100c:	23f9      	movs	r3, #249	; 0xf9
 800100e:	633b      	str	r3, [r7, #48]	; 0x30
		  ENCA_P2 = (uint8_t)ENCA_D;
 8001010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001012:	73fb      	strb	r3, [r7, #15]





		if(received.speed1 > 125){
 8001014:	4b56      	ldr	r3, [pc, #344]	; (8001170 <main+0x500>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b7d      	cmp	r3, #125	; 0x7d
 800101a:	d913      	bls.n	8001044 <main+0x3d4>
			uint8_t pi1d = PID2(ENCA_P3, (received.speed1 - 125)*2);
 800101c:	4b54      	ldr	r3, [pc, #336]	; (8001170 <main+0x500>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	3303      	adds	r3, #3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	b2da      	uxtb	r2, r3
 8001028:	7dfb      	ldrb	r3, [r7, #23]
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fdb1 	bl	8000b94 <PID2>
 8001032:	4603      	mov	r3, r0
 8001034:	71bb      	strb	r3, [r7, #6]
			Set_Motor_Speed(&(TIM4->CCR1), &(TIM4->CCR2), pi1d);
 8001036:	79bb      	ldrb	r3, [r7, #6]
 8001038:	461a      	mov	r2, r3
 800103a:	494e      	ldr	r1, [pc, #312]	; (8001174 <main+0x504>)
 800103c:	484e      	ldr	r0, [pc, #312]	; (8001178 <main+0x508>)
 800103e:	f7ff fd61 	bl	8000b04 <Set_Motor_Speed>
 8001042:	e01e      	b.n	8001082 <main+0x412>
		}
		else if(received.speed1 < 125){
 8001044:	4b4a      	ldr	r3, [pc, #296]	; (8001170 <main+0x500>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b7c      	cmp	r3, #124	; 0x7c
 800104a:	d815      	bhi.n	8001078 <main+0x408>
			uint8_t pi1d = PID2(ENCA_P3, 250 - (received.speed1*2));
 800104c:	4b48      	ldr	r3, [pc, #288]	; (8001170 <main+0x500>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8001054:	b2db      	uxtb	r3, r3
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	b2da      	uxtb	r2, r3
 800105a:	7dfb      	ldrb	r3, [r7, #23]
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fd98 	bl	8000b94 <PID2>
 8001064:	4603      	mov	r3, r0
 8001066:	71fb      	strb	r3, [r7, #7]
			Set_Motor_Speed(&(TIM4->CCR1), &(TIM4->CCR2), pi1d*-1);
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	425b      	negs	r3, r3
 800106c:	461a      	mov	r2, r3
 800106e:	4941      	ldr	r1, [pc, #260]	; (8001174 <main+0x504>)
 8001070:	4841      	ldr	r0, [pc, #260]	; (8001178 <main+0x508>)
 8001072:	f7ff fd47 	bl	8000b04 <Set_Motor_Speed>
 8001076:	e004      	b.n	8001082 <main+0x412>
		}
		else{
			Set_Motor_Speed(&(TIM4->CCR1), &(TIM4->CCR2), 0);
 8001078:	2200      	movs	r2, #0
 800107a:	493e      	ldr	r1, [pc, #248]	; (8001174 <main+0x504>)
 800107c:	483e      	ldr	r0, [pc, #248]	; (8001178 <main+0x508>)
 800107e:	f7ff fd41 	bl	8000b04 <Set_Motor_Speed>
		}



		if(received.speed2 > 125){
 8001082:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <main+0x500>)
 8001084:	785b      	ldrb	r3, [r3, #1]
 8001086:	2b7d      	cmp	r3, #125	; 0x7d
 8001088:	d913      	bls.n	80010b2 <main+0x442>
			uint8_t pi2d = PID2(ENCA_P, (received.speed2 - 125)*2);
 800108a:	4b39      	ldr	r3, [pc, #228]	; (8001170 <main+0x500>)
 800108c:	785b      	ldrb	r3, [r3, #1]
 800108e:	3303      	adds	r3, #3
 8001090:	b2db      	uxtb	r3, r3
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	b2da      	uxtb	r2, r3
 8001096:	7ffb      	ldrb	r3, [r7, #31]
 8001098:	4611      	mov	r1, r2
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fd7a 	bl	8000b94 <PID2>
 80010a0:	4603      	mov	r3, r0
 80010a2:	713b      	strb	r3, [r7, #4]
			Set_Motor_Speed(&(TIM1->CCR1), &(TIM1->CCR2), pi2d);
 80010a4:	793b      	ldrb	r3, [r7, #4]
 80010a6:	461a      	mov	r2, r3
 80010a8:	4934      	ldr	r1, [pc, #208]	; (800117c <main+0x50c>)
 80010aa:	4835      	ldr	r0, [pc, #212]	; (8001180 <main+0x510>)
 80010ac:	f7ff fd2a 	bl	8000b04 <Set_Motor_Speed>
 80010b0:	e01e      	b.n	80010f0 <main+0x480>
		}
		else if(received.speed2 < 125){
 80010b2:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <main+0x500>)
 80010b4:	785b      	ldrb	r3, [r3, #1]
 80010b6:	2b7c      	cmp	r3, #124	; 0x7c
 80010b8:	d815      	bhi.n	80010e6 <main+0x476>
			uint8_t pi2d = PID2(ENCA_P, 250 - (received.speed2*2));
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <main+0x500>)
 80010bc:	785b      	ldrb	r3, [r3, #1]
 80010be:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	7ffb      	ldrb	r3, [r7, #31]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fd61 	bl	8000b94 <PID2>
 80010d2:	4603      	mov	r3, r0
 80010d4:	717b      	strb	r3, [r7, #5]
			Set_Motor_Speed(&(TIM1->CCR1), &(TIM1->CCR2), pi2d*-1);
 80010d6:	797b      	ldrb	r3, [r7, #5]
 80010d8:	425b      	negs	r3, r3
 80010da:	461a      	mov	r2, r3
 80010dc:	4927      	ldr	r1, [pc, #156]	; (800117c <main+0x50c>)
 80010de:	4828      	ldr	r0, [pc, #160]	; (8001180 <main+0x510>)
 80010e0:	f7ff fd10 	bl	8000b04 <Set_Motor_Speed>
 80010e4:	e004      	b.n	80010f0 <main+0x480>
		}
		else{
			Set_Motor_Speed(&(TIM1->CCR1), &(TIM1->CCR2), 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	4924      	ldr	r1, [pc, #144]	; (800117c <main+0x50c>)
 80010ea:	4825      	ldr	r0, [pc, #148]	; (8001180 <main+0x510>)
 80010ec:	f7ff fd0a 	bl	8000b04 <Set_Motor_Speed>





		if(received.speed3 > 125){
 80010f0:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <main+0x500>)
 80010f2:	789b      	ldrb	r3, [r3, #2]
 80010f4:	2b7d      	cmp	r3, #125	; 0x7d
 80010f6:	d913      	bls.n	8001120 <main+0x4b0>
			uint8_t pi3d = PID2(ENCA_P2, (received.speed3 - 125)*2);
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <main+0x500>)
 80010fa:	789b      	ldrb	r3, [r3, #2]
 80010fc:	3303      	adds	r3, #3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	b2da      	uxtb	r2, r3
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fd43 	bl	8000b94 <PID2>
 800110e:	4603      	mov	r3, r0
 8001110:	70bb      	strb	r3, [r7, #2]
			Set_Motor_Speed(&(TIM3->CCR1), &(TIM3->CCR2), pi3d);
 8001112:	78bb      	ldrb	r3, [r7, #2]
 8001114:	461a      	mov	r2, r3
 8001116:	491b      	ldr	r1, [pc, #108]	; (8001184 <main+0x514>)
 8001118:	481b      	ldr	r0, [pc, #108]	; (8001188 <main+0x518>)
 800111a:	f7ff fcf3 	bl	8000b04 <Set_Motor_Speed>
 800111e:	e60b      	b.n	8000d38 <main+0xc8>
		}
		else if(received.speed3 < 125){
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <main+0x500>)
 8001122:	789b      	ldrb	r3, [r3, #2]
 8001124:	2b7c      	cmp	r3, #124	; 0x7c
 8001126:	d815      	bhi.n	8001154 <main+0x4e4>
			uint8_t pi3d = PID2(ENCA_P2, 250 - (received.speed3*2));
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <main+0x500>)
 800112a:	789b      	ldrb	r3, [r3, #2]
 800112c:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8001130:	b2db      	uxtb	r3, r3
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	b2da      	uxtb	r2, r3
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fd2a 	bl	8000b94 <PID2>
 8001140:	4603      	mov	r3, r0
 8001142:	70fb      	strb	r3, [r7, #3]
			Set_Motor_Speed(&(TIM3->CCR1), &(TIM3->CCR2), pi3d*-1);
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	425b      	negs	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	490e      	ldr	r1, [pc, #56]	; (8001184 <main+0x514>)
 800114c:	480e      	ldr	r0, [pc, #56]	; (8001188 <main+0x518>)
 800114e:	f7ff fcd9 	bl	8000b04 <Set_Motor_Speed>
 8001152:	e5f1      	b.n	8000d38 <main+0xc8>
		}
		else{
			Set_Motor_Speed(&(TIM3->CCR1), &(TIM3->CCR2), 0);
 8001154:	2200      	movs	r2, #0
 8001156:	490b      	ldr	r1, [pc, #44]	; (8001184 <main+0x514>)
 8001158:	480b      	ldr	r0, [pc, #44]	; (8001188 <main+0x518>)
 800115a:	f7ff fcd3 	bl	8000b04 <Set_Motor_Speed>
  {
 800115e:	e5eb      	b.n	8000d38 <main+0xc8>
 8001160:	e0001000 	.word	0xe0001000
 8001164:	10624dd3 	.word	0x10624dd3
 8001168:	0007a11f 	.word	0x0007a11f
 800116c:	48001400 	.word	0x48001400
 8001170:	20000000 	.word	0x20000000
 8001174:	40000838 	.word	0x40000838
 8001178:	40000834 	.word	0x40000834
 800117c:	40012c38 	.word	0x40012c38
 8001180:	40012c34 	.word	0x40012c34
 8001184:	40000438 	.word	0x40000438
 8001188:	40000434 	.word	0x40000434

0800118c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b0a4      	sub	sp, #144	; 0x90
 8001190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001192:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001196:	2238      	movs	r2, #56	; 0x38
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f008 fdb0 	bl	8009d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b0:	463b      	mov	r3, r7
 80011b2:	2244      	movs	r2, #68	; 0x44
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f008 fda2 	bl	8009d00 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011c0:	f002 fb8a 	bl	80038d8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c4:	2302      	movs	r3, #2
 80011c6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011cc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ce:	2340      	movs	r3, #64	; 0x40
 80011d0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d2:	2302      	movs	r3, #2
 80011d4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d6:	2302      	movs	r3, #2
 80011d8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80011da:	2301      	movs	r3, #1
 80011dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80011de:	230c      	movs	r3, #12
 80011e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80011ea:	2304      	movs	r3, #4
 80011ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011f0:	2302      	movs	r3, #2
 80011f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 fc20 	bl	8003a40 <HAL_RCC_OscConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001206:	f000 fb05 	bl	8001814 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120a:	230f      	movs	r3, #15
 800120c:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120e:	2303      	movs	r3, #3
 8001210:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800121e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001222:	2102      	movs	r1, #2
 8001224:	4618      	mov	r0, r3
 8001226:	f002 ff23 	bl	8004070 <HAL_RCC_ClockConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001230:	f000 faf0 	bl	8001814 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001234:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001238:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800123a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001240:	463b      	mov	r3, r7
 8001242:	4618      	mov	r0, r3
 8001244:	f003 f8f8 	bl	8004438 <HAL_RCCEx_PeriphCLKConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800124e:	f000 fae1 	bl	8001814 <Error_Handler>
  }
}
 8001252:	bf00      	nop
 8001254:	3790      	adds	r7, #144	; 0x90
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b09c      	sub	sp, #112	; 0x70
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001262:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800127c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
 800128c:	615a      	str	r2, [r3, #20]
 800128e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	2234      	movs	r2, #52	; 0x34
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f008 fd32 	bl	8009d00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800129c:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <MX_TIM1_Init+0x174>)
 800129e:	4a4d      	ldr	r2, [pc, #308]	; (80013d4 <MX_TIM1_Init+0x178>)
 80012a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012a2:	4b4b      	ldr	r3, [pc, #300]	; (80013d0 <MX_TIM1_Init+0x174>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a8:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <MX_TIM1_Init+0x174>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012ae:	4b48      	ldr	r3, [pc, #288]	; (80013d0 <MX_TIM1_Init+0x174>)
 80012b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b6:	4b46      	ldr	r3, [pc, #280]	; (80013d0 <MX_TIM1_Init+0x174>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012bc:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <MX_TIM1_Init+0x174>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c2:	4b43      	ldr	r3, [pc, #268]	; (80013d0 <MX_TIM1_Init+0x174>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012c8:	4841      	ldr	r0, [pc, #260]	; (80013d0 <MX_TIM1_Init+0x174>)
 80012ca:	f003 faa5 	bl	8004818 <HAL_TIM_Base_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012d4:	f000 fa9e 	bl	8001814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012dc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012e2:	4619      	mov	r1, r3
 80012e4:	483a      	ldr	r0, [pc, #232]	; (80013d0 <MX_TIM1_Init+0x174>)
 80012e6:	f003 fd5f 	bl	8004da8 <HAL_TIM_ConfigClockSource>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80012f0:	f000 fa90 	bl	8001814 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012f4:	4836      	ldr	r0, [pc, #216]	; (80013d0 <MX_TIM1_Init+0x174>)
 80012f6:	f003 fae6 	bl	80048c6 <HAL_TIM_PWM_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001300:	f000 fa88 	bl	8001814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001304:	2300      	movs	r3, #0
 8001306:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001310:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001314:	4619      	mov	r1, r3
 8001316:	482e      	ldr	r0, [pc, #184]	; (80013d0 <MX_TIM1_Init+0x174>)
 8001318:	f004 fa60 	bl	80057dc <HAL_TIMEx_MasterConfigSynchronization>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001322:	f000 fa77 	bl	8001814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001326:	2360      	movs	r3, #96	; 0x60
 8001328:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800132e:	2300      	movs	r3, #0
 8001330:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001332:	2300      	movs	r3, #0
 8001334:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001342:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001346:	2200      	movs	r2, #0
 8001348:	4619      	mov	r1, r3
 800134a:	4821      	ldr	r0, [pc, #132]	; (80013d0 <MX_TIM1_Init+0x174>)
 800134c:	f003 fc1c 	bl	8004b88 <HAL_TIM_PWM_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001356:	f000 fa5d 	bl	8001814 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800135e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001362:	2204      	movs	r2, #4
 8001364:	4619      	mov	r1, r3
 8001366:	481a      	ldr	r0, [pc, #104]	; (80013d0 <MX_TIM1_Init+0x174>)
 8001368:	f003 fc0e 	bl	8004b88 <HAL_TIM_PWM_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 8001372:	f000 fa4f 	bl	8001814 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800138a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800139c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80013a6:	2300      	movs	r3, #0
 80013a8:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	4619      	mov	r1, r3
 80013b2:	4807      	ldr	r0, [pc, #28]	; (80013d0 <MX_TIM1_Init+0x174>)
 80013b4:	f004 fa94 	bl	80058e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0x166>
  {
    Error_Handler();
 80013be:	f000 fa29 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013c2:	4803      	ldr	r0, [pc, #12]	; (80013d0 <MX_TIM1_Init+0x174>)
 80013c4:	f000 fac2 	bl	800194c <HAL_TIM_MspPostInit>

}
 80013c8:	bf00      	nop
 80013ca:	3770      	adds	r7, #112	; 0x70
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000053c 	.word	0x2000053c
 80013d4:	40012c00 	.word	0x40012c00

080013d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08e      	sub	sp, #56	; 0x38
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f8:	463b      	mov	r3, r7
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]
 8001406:	615a      	str	r2, [r3, #20]
 8001408:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800140a:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <MX_TIM3_Init+0x100>)
 800140c:	4a33      	ldr	r2, [pc, #204]	; (80014dc <MX_TIM3_Init+0x104>)
 800140e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001410:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <MX_TIM3_Init+0x100>)
 8001412:	2200      	movs	r2, #0
 8001414:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001416:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <MX_TIM3_Init+0x100>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800141c:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <MX_TIM3_Init+0x100>)
 800141e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001422:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001424:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <MX_TIM3_Init+0x100>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142a:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <MX_TIM3_Init+0x100>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001430:	4829      	ldr	r0, [pc, #164]	; (80014d8 <MX_TIM3_Init+0x100>)
 8001432:	f003 f9f1 	bl	8004818 <HAL_TIM_Base_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800143c:	f000 f9ea 	bl	8001814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144a:	4619      	mov	r1, r3
 800144c:	4822      	ldr	r0, [pc, #136]	; (80014d8 <MX_TIM3_Init+0x100>)
 800144e:	f003 fcab 	bl	8004da8 <HAL_TIM_ConfigClockSource>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001458:	f000 f9dc 	bl	8001814 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800145c:	481e      	ldr	r0, [pc, #120]	; (80014d8 <MX_TIM3_Init+0x100>)
 800145e:	f003 fa32 	bl	80048c6 <HAL_TIM_PWM_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001468:	f000 f9d4 	bl	8001814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4619      	mov	r1, r3
 800147a:	4817      	ldr	r0, [pc, #92]	; (80014d8 <MX_TIM3_Init+0x100>)
 800147c:	f004 f9ae 	bl	80057dc <HAL_TIMEx_MasterConfigSynchronization>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001486:	f000 f9c5 	bl	8001814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800148a:	2360      	movs	r3, #96	; 0x60
 800148c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800149a:	463b      	mov	r3, r7
 800149c:	2200      	movs	r2, #0
 800149e:	4619      	mov	r1, r3
 80014a0:	480d      	ldr	r0, [pc, #52]	; (80014d8 <MX_TIM3_Init+0x100>)
 80014a2:	f003 fb71 	bl	8004b88 <HAL_TIM_PWM_ConfigChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80014ac:	f000 f9b2 	bl	8001814 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014b4:	463b      	mov	r3, r7
 80014b6:	2204      	movs	r2, #4
 80014b8:	4619      	mov	r1, r3
 80014ba:	4807      	ldr	r0, [pc, #28]	; (80014d8 <MX_TIM3_Init+0x100>)
 80014bc:	f003 fb64 	bl	8004b88 <HAL_TIM_PWM_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 80014c6:	f000 f9a5 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014ca:	4803      	ldr	r0, [pc, #12]	; (80014d8 <MX_TIM3_Init+0x100>)
 80014cc:	f000 fa3e 	bl	800194c <HAL_TIM_MspPostInit>

}
 80014d0:	bf00      	nop
 80014d2:	3738      	adds	r7, #56	; 0x38
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200004d0 	.word	0x200004d0
 80014dc:	40000400 	.word	0x40000400

080014e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08e      	sub	sp, #56	; 0x38
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001500:	463b      	mov	r3, r7
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]
 800150e:	615a      	str	r2, [r3, #20]
 8001510:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001512:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <MX_TIM4_Init+0x100>)
 8001514:	4a33      	ldr	r2, [pc, #204]	; (80015e4 <MX_TIM4_Init+0x104>)
 8001516:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001518:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <MX_TIM4_Init+0x100>)
 800151a:	2200      	movs	r2, #0
 800151c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151e:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <MX_TIM4_Init+0x100>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001524:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <MX_TIM4_Init+0x100>)
 8001526:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800152a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152c:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <MX_TIM4_Init+0x100>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001532:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <MX_TIM4_Init+0x100>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001538:	4829      	ldr	r0, [pc, #164]	; (80015e0 <MX_TIM4_Init+0x100>)
 800153a:	f003 f96d 	bl	8004818 <HAL_TIM_Base_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001544:	f000 f966 	bl	8001814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800154e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001552:	4619      	mov	r1, r3
 8001554:	4822      	ldr	r0, [pc, #136]	; (80015e0 <MX_TIM4_Init+0x100>)
 8001556:	f003 fc27 	bl	8004da8 <HAL_TIM_ConfigClockSource>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001560:	f000 f958 	bl	8001814 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001564:	481e      	ldr	r0, [pc, #120]	; (80015e0 <MX_TIM4_Init+0x100>)
 8001566:	f003 f9ae 	bl	80048c6 <HAL_TIM_PWM_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001570:	f000 f950 	bl	8001814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	4817      	ldr	r0, [pc, #92]	; (80015e0 <MX_TIM4_Init+0x100>)
 8001584:	f004 f92a 	bl	80057dc <HAL_TIMEx_MasterConfigSynchronization>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800158e:	f000 f941 	bl	8001814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001592:	2360      	movs	r3, #96	; 0x60
 8001594:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a2:	463b      	mov	r3, r7
 80015a4:	2200      	movs	r2, #0
 80015a6:	4619      	mov	r1, r3
 80015a8:	480d      	ldr	r0, [pc, #52]	; (80015e0 <MX_TIM4_Init+0x100>)
 80015aa:	f003 faed 	bl	8004b88 <HAL_TIM_PWM_ConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80015b4:	f000 f92e 	bl	8001814 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015bc:	463b      	mov	r3, r7
 80015be:	2204      	movs	r2, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	4807      	ldr	r0, [pc, #28]	; (80015e0 <MX_TIM4_Init+0x100>)
 80015c4:	f003 fae0 	bl	8004b88 <HAL_TIM_PWM_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 80015ce:	f000 f921 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015d2:	4803      	ldr	r0, [pc, #12]	; (80015e0 <MX_TIM4_Init+0x100>)
 80015d4:	f000 f9ba 	bl	800194c <HAL_TIM_MspPostInit>

}
 80015d8:	bf00      	nop
 80015da:	3738      	adds	r7, #56	; 0x38
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000468 	.word	0x20000468
 80015e4:	40000800 	.word	0x40000800

080015e8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b094      	sub	sp, #80	; 0x50
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001608:	463b      	mov	r3, r7
 800160a:	2234      	movs	r2, #52	; 0x34
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f008 fb76 	bl	8009d00 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001614:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <MX_TIM8_Init+0xcc>)
 8001616:	4a28      	ldr	r2, [pc, #160]	; (80016b8 <MX_TIM8_Init+0xd0>)
 8001618:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800161a:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <MX_TIM8_Init+0xcc>)
 800161c:	2200      	movs	r2, #0
 800161e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001620:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <MX_TIM8_Init+0xcc>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001626:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <MX_TIM8_Init+0xcc>)
 8001628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800162c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <MX_TIM8_Init+0xcc>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001634:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <MX_TIM8_Init+0xcc>)
 8001636:	2200      	movs	r2, #0
 8001638:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163a:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <MX_TIM8_Init+0xcc>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001640:	481c      	ldr	r0, [pc, #112]	; (80016b4 <MX_TIM8_Init+0xcc>)
 8001642:	f003 f8e9 	bl	8004818 <HAL_TIM_Base_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 800164c:	f000 f8e2 	bl	8001814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001654:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001656:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800165a:	4619      	mov	r1, r3
 800165c:	4815      	ldr	r0, [pc, #84]	; (80016b4 <MX_TIM8_Init+0xcc>)
 800165e:	f003 fba3 	bl	8004da8 <HAL_TIM_ConfigClockSource>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001668:	f000 f8d4 	bl	8001814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166c:	2300      	movs	r3, #0
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001670:	2300      	movs	r3, #0
 8001672:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001678:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800167c:	4619      	mov	r1, r3
 800167e:	480d      	ldr	r0, [pc, #52]	; (80016b4 <MX_TIM8_Init+0xcc>)
 8001680:	f004 f8ac 	bl	80057dc <HAL_TIMEx_MasterConfigSynchronization>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800168a:	f000 f8c3 	bl	8001814 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001692:	2300      	movs	r3, #0
 8001694:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001696:	463b      	mov	r3, r7
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	; (80016b4 <MX_TIM8_Init+0xcc>)
 800169c:	f004 f920 	bl	80058e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80016a6:	f000 f8b5 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	3750      	adds	r7, #80	; 0x50
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000041c 	.word	0x2000041c
 80016b8:	40013400 	.word	0x40013400

080016bc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_TIM16_Init+0x44>)
 80016c2:	4a10      	ldr	r2, [pc, #64]	; (8001704 <MX_TIM16_Init+0x48>)
 80016c4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_TIM16_Init+0x44>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_TIM16_Init+0x44>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <MX_TIM16_Init+0x44>)
 80016d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016d8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_TIM16_Init+0x44>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <MX_TIM16_Init+0x44>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_TIM16_Init+0x44>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_TIM16_Init+0x44>)
 80016ee:	f003 f893 	bl	8004818 <HAL_TIM_Base_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80016f8:	f000 f88c 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	2000061c 	.word	0x2000061c
 8001704:	40014400 	.word	0x40014400

08001708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800171e:	4b3a      	ldr	r3, [pc, #232]	; (8001808 <MX_GPIO_Init+0x100>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	4a39      	ldr	r2, [pc, #228]	; (8001808 <MX_GPIO_Init+0x100>)
 8001724:	f043 0320 	orr.w	r3, r3, #32
 8001728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172a:	4b37      	ldr	r3, [pc, #220]	; (8001808 <MX_GPIO_Init+0x100>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	f003 0320 	and.w	r3, r3, #32
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b34      	ldr	r3, [pc, #208]	; (8001808 <MX_GPIO_Init+0x100>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	4a33      	ldr	r2, [pc, #204]	; (8001808 <MX_GPIO_Init+0x100>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001742:	4b31      	ldr	r3, [pc, #196]	; (8001808 <MX_GPIO_Init+0x100>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	4b2e      	ldr	r3, [pc, #184]	; (8001808 <MX_GPIO_Init+0x100>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	4a2d      	ldr	r2, [pc, #180]	; (8001808 <MX_GPIO_Init+0x100>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175a:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <MX_GPIO_Init+0x100>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESCPWM_GPIO_Port, ESCPWM_Pin, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	2120      	movs	r1, #32
 800176a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176e:	f000 fd0f 	bl	8002190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENC3A_Pin */
  GPIO_InitStruct.Pin = ENC3A_Pin;
 8001772:	2302      	movs	r3, #2
 8001774:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC3A_GPIO_Port, &GPIO_InitStruct);
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	4619      	mov	r1, r3
 8001784:	4821      	ldr	r0, [pc, #132]	; (800180c <MX_GPIO_Init+0x104>)
 8001786:	f000 fb69 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2_A_Pin ENC1A_Pin */
  GPIO_InitStruct.Pin = ENC2_A_Pin|ENC1A_Pin;
 800178a:	2305      	movs	r3, #5
 800178c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	4619      	mov	r1, r3
 800179c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a0:	f000 fb5c 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1B_Pin ENC3B_Pin PA15 */
  GPIO_InitStruct.Pin = ENC1B_Pin|ENC3B_Pin|GPIO_PIN_15;
 80017a4:	f248 0318 	movw	r3, #32792	; 0x8018
 80017a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017aa:	4b19      	ldr	r3, [pc, #100]	; (8001810 <MX_GPIO_Init+0x108>)
 80017ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	4619      	mov	r1, r3
 80017b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017bc:	f000 fb4e 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ESCPWM_Pin */
  GPIO_InitStruct.Pin = ESCPWM_Pin;
 80017c0:	2320      	movs	r3, #32
 80017c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c4:	2301      	movs	r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ESCPWM_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	4619      	mov	r1, r3
 80017d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017da:	f000 fb3f 	bl	8001e5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	2009      	movs	r0, #9
 80017e4:	f000 fb05 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80017e8:	2009      	movs	r0, #9
 80017ea:	f000 fb1c 	bl	8001e26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2100      	movs	r1, #0
 80017f2:	200a      	movs	r0, #10
 80017f4:	f000 fafd 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80017f8:	200a      	movs	r0, #10
 80017fa:	f000 fb14 	bl	8001e26 <HAL_NVIC_EnableIRQ>

}
 80017fe:	bf00      	nop
 8001800:	3720      	adds	r7, #32
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000
 800180c:	48001400 	.word	0x48001400
 8001810:	10110000 	.word	0x10110000

08001814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <HAL_MspInit+0x44>)
 800182c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182e:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <HAL_MspInit+0x44>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6613      	str	r3, [r2, #96]	; 0x60
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_MspInit+0x44>)
 8001838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_MspInit+0x44>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	4a08      	ldr	r2, [pc, #32]	; (8001868 <HAL_MspInit+0x44>)
 8001848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184c:	6593      	str	r3, [r2, #88]	; 0x58
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_MspInit+0x44>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800185a:	f002 f8e1 	bl	8003a20 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000

0800186c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a2e      	ldr	r2, [pc, #184]	; (8001934 <HAL_TIM_Base_MspInit+0xc8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d10c      	bne.n	8001898 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800187e:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <HAL_TIM_Base_MspInit+0xcc>)
 8001880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001882:	4a2d      	ldr	r2, [pc, #180]	; (8001938 <HAL_TIM_Base_MspInit+0xcc>)
 8001884:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001888:	6613      	str	r3, [r2, #96]	; 0x60
 800188a:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <HAL_TIM_Base_MspInit+0xcc>)
 800188c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001892:	61fb      	str	r3, [r7, #28]
 8001894:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001896:	e046      	b.n	8001926 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a27      	ldr	r2, [pc, #156]	; (800193c <HAL_TIM_Base_MspInit+0xd0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d10c      	bne.n	80018bc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018a2:	4b25      	ldr	r3, [pc, #148]	; (8001938 <HAL_TIM_Base_MspInit+0xcc>)
 80018a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a6:	4a24      	ldr	r2, [pc, #144]	; (8001938 <HAL_TIM_Base_MspInit+0xcc>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6593      	str	r3, [r2, #88]	; 0x58
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <HAL_TIM_Base_MspInit+0xcc>)
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	69bb      	ldr	r3, [r7, #24]
}
 80018ba:	e034      	b.n	8001926 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM4)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a1f      	ldr	r2, [pc, #124]	; (8001940 <HAL_TIM_Base_MspInit+0xd4>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d10c      	bne.n	80018e0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018c6:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <HAL_TIM_Base_MspInit+0xcc>)
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	4a1b      	ldr	r2, [pc, #108]	; (8001938 <HAL_TIM_Base_MspInit+0xcc>)
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6593      	str	r3, [r2, #88]	; 0x58
 80018d2:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_TIM_Base_MspInit+0xcc>)
 80018d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697b      	ldr	r3, [r7, #20]
}
 80018de:	e022      	b.n	8001926 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a17      	ldr	r2, [pc, #92]	; (8001944 <HAL_TIM_Base_MspInit+0xd8>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d10c      	bne.n	8001904 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <HAL_TIM_Base_MspInit+0xcc>)
 80018ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ee:	4a12      	ldr	r2, [pc, #72]	; (8001938 <HAL_TIM_Base_MspInit+0xcc>)
 80018f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018f4:	6613      	str	r3, [r2, #96]	; 0x60
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_TIM_Base_MspInit+0xcc>)
 80018f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
}
 8001902:	e010      	b.n	8001926 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM16)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0f      	ldr	r2, [pc, #60]	; (8001948 <HAL_TIM_Base_MspInit+0xdc>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d10b      	bne.n	8001926 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <HAL_TIM_Base_MspInit+0xcc>)
 8001910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001912:	4a09      	ldr	r2, [pc, #36]	; (8001938 <HAL_TIM_Base_MspInit+0xcc>)
 8001914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001918:	6613      	str	r3, [r2, #96]	; 0x60
 800191a:	4b07      	ldr	r3, [pc, #28]	; (8001938 <HAL_TIM_Base_MspInit+0xcc>)
 800191c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
}
 8001926:	bf00      	nop
 8001928:	3724      	adds	r7, #36	; 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40012c00 	.word	0x40012c00
 8001938:	40021000 	.word	0x40021000
 800193c:	40000400 	.word	0x40000400
 8001940:	40000800 	.word	0x40000800
 8001944:	40013400 	.word	0x40013400
 8001948:	40014400 	.word	0x40014400

0800194c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a34      	ldr	r2, [pc, #208]	; (8001a3c <HAL_TIM_MspPostInit+0xf0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d11e      	bne.n	80019ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196e:	4b34      	ldr	r3, [pc, #208]	; (8001a40 <HAL_TIM_MspPostInit+0xf4>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a33      	ldr	r2, [pc, #204]	; (8001a40 <HAL_TIM_MspPostInit+0xf4>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b31      	ldr	r3, [pc, #196]	; (8001a40 <HAL_TIM_MspPostInit+0xf4>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M2_PWM1_Pin|M2_PWM2_Pin;
 8001986:	f44f 7340 	mov.w	r3, #768	; 0x300
 800198a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	2300      	movs	r3, #0
 8001996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001998:	2306      	movs	r3, #6
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4619      	mov	r1, r3
 80019a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a6:	f000 fa59 	bl	8001e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80019aa:	e043      	b.n	8001a34 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM3)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a24      	ldr	r2, [pc, #144]	; (8001a44 <HAL_TIM_MspPostInit+0xf8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d11d      	bne.n	80019f2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <HAL_TIM_MspPostInit+0xf4>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	4a21      	ldr	r2, [pc, #132]	; (8001a40 <HAL_TIM_MspPostInit+0xf4>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c2:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <HAL_TIM_MspPostInit+0xf4>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_PWM1_Pin|M1_PWM2_Pin;
 80019ce:	23c0      	movs	r3, #192	; 0xc0
 80019d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019de:	2302      	movs	r3, #2
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ec:	f000 fa36 	bl	8001e5c <HAL_GPIO_Init>
}
 80019f0:	e020      	b.n	8001a34 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM4)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <HAL_TIM_MspPostInit+0xfc>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d11b      	bne.n	8001a34 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fc:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <HAL_TIM_MspPostInit+0xf4>)
 80019fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a00:	4a0f      	ldr	r2, [pc, #60]	; (8001a40 <HAL_TIM_MspPostInit+0xf4>)
 8001a02:	f043 0302 	orr.w	r3, r3, #2
 8001a06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a08:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <HAL_TIM_MspPostInit+0xf4>)
 8001a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M3_PWM1_Pin|M3_PWM2_Pin;
 8001a14:	23c0      	movs	r3, #192	; 0xc0
 8001a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a24:	2302      	movs	r3, #2
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4807      	ldr	r0, [pc, #28]	; (8001a4c <HAL_TIM_MspPostInit+0x100>)
 8001a30:	f000 fa14 	bl	8001e5c <HAL_GPIO_Init>
}
 8001a34:	bf00      	nop
 8001a36:	3728      	adds	r7, #40	; 0x28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40012c00 	.word	0x40012c00
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40000400 	.word	0x40000400
 8001a48:	40000800 	.word	0x40000800
 8001a4c:	48000400 	.word	0x48000400

08001a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <HardFault_Handler+0x4>

08001a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <MemManage_Handler+0x4>

08001a6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <BusFault_Handler+0x4>

08001a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <UsageFault_Handler+0x4>

08001a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa4:	f000 f8ac 	bl	8001c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001ab0:	2008      	movs	r0, #8
 8001ab2:	f000 fb85 	bl	80021c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001abe:	2010      	movs	r0, #16
 8001ac0:	f000 fb7e 	bl	80021c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001acc:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <USB_LP_IRQHandler+0x10>)
 8001ace:	f000 fca1 	bl	8002414 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	2000130c 	.word	0x2000130c

08001adc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <SystemInit+0x28>)
 8001ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae6:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <SystemInit+0x28>)
 8001ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <SystemInit+0x28>)
 8001af2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001af6:	609a      	str	r2, [r3, #8]
#endif
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b08:	480d      	ldr	r0, [pc, #52]	; (8001b40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b0a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b0c:	480d      	ldr	r0, [pc, #52]	; (8001b44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b0e:	490e      	ldr	r1, [pc, #56]	; (8001b48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b10:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <LoopForever+0xe>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b14:	e002      	b.n	8001b1c <LoopCopyDataInit>

08001b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1a:	3304      	adds	r3, #4

08001b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b20:	d3f9      	bcc.n	8001b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b22:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b24:	4c0b      	ldr	r4, [pc, #44]	; (8001b54 <LoopForever+0x16>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b28:	e001      	b.n	8001b2e <LoopFillZerobss>

08001b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b2c:	3204      	adds	r2, #4

08001b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b30:	d3fb      	bcc.n	8001b2a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b32:	f7ff ffd3 	bl	8001adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b36:	f008 f8bf 	bl	8009cb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b3a:	f7ff f899 	bl	8000c70 <main>

08001b3e <LoopForever>:

LoopForever:
    b LoopForever
 8001b3e:	e7fe      	b.n	8001b3e <LoopForever>
  ldr   r0, =_estack
 8001b40:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b48:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8001b4c:	08009d88 	.word	0x08009d88
  ldr r2, =_sbss
 8001b50:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8001b54:	20001600 	.word	0x20001600

08001b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC1_2_IRQHandler>

08001b5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b64:	2003      	movs	r0, #3
 8001b66:	f000 f939 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f000 f80e 	bl	8001b8c <HAL_InitTick>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	71fb      	strb	r3, [r7, #7]
 8001b7a:	e001      	b.n	8001b80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b7c:	f7ff fe52 	bl	8001824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b80:	79fb      	ldrb	r3, [r7, #7]

}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b98:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <HAL_InitTick+0x68>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d022      	beq.n	8001be6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ba0:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <HAL_InitTick+0x6c>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <HAL_InitTick+0x68>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 f944 	bl	8001e42 <HAL_SYSTICK_Config>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10f      	bne.n	8001be0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b0f      	cmp	r3, #15
 8001bc4:	d809      	bhi.n	8001bda <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	f04f 30ff 	mov.w	r0, #4294967295
 8001bce:	f000 f910 	bl	8001df2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_InitTick+0x70>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e007      	b.n	8001bea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e004      	b.n	8001bea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	e001      	b.n	8001bea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000010 	.word	0x20000010
 8001bf8:	20000008 	.word	0x20000008
 8001bfc:	2000000c 	.word	0x2000000c

08001c00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_IncTick+0x1c>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_IncTick+0x20>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a03      	ldr	r2, [pc, #12]	; (8001c1c <HAL_IncTick+0x1c>)
 8001c10:	6013      	str	r3, [r2, #0]
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	20000668 	.word	0x20000668
 8001c20:	20000010 	.word	0x20000010

08001c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <HAL_GetTick+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000668 	.word	0x20000668

08001c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <__NVIC_GetPriorityGrouping+0x18>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	f003 0307 	and.w	r3, r3, #7
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db0b      	blt.n	8001cca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	4907      	ldr	r1, [pc, #28]	; (8001cd8 <__NVIC_EnableIRQ+0x38>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	db0a      	blt.n	8001d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	490c      	ldr	r1, [pc, #48]	; (8001d28 <__NVIC_SetPriority+0x4c>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d04:	e00a      	b.n	8001d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4908      	ldr	r1, [pc, #32]	; (8001d2c <__NVIC_SetPriority+0x50>)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3b04      	subs	r3, #4
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	761a      	strb	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f1c3 0307 	rsb	r3, r3, #7
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	bf28      	it	cs
 8001d4e:	2304      	movcs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d902      	bls.n	8001d60 <NVIC_EncodePriority+0x30>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b03      	subs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <NVIC_EncodePriority+0x32>
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	401a      	ands	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	4313      	orrs	r3, r2
         );
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f7ff ff8e 	bl	8001cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff29 	bl	8001c3c <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e00:	f7ff ff40 	bl	8001c84 <__NVIC_GetPriorityGrouping>
 8001e04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	6978      	ldr	r0, [r7, #20]
 8001e0c:	f7ff ff90 	bl	8001d30 <NVIC_EncodePriority>
 8001e10:	4602      	mov	r2, r0
 8001e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff5f 	bl	8001cdc <__NVIC_SetPriority>
}
 8001e1e:	bf00      	nop
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff33 	bl	8001ca0 <__NVIC_EnableIRQ>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ffa4 	bl	8001d98 <SysTick_Config>
 8001e50:	4603      	mov	r3, r0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e6a:	e15a      	b.n	8002122 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	2101      	movs	r1, #1
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 814c 	beq.w	800211c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d00b      	beq.n	8001ea4 <HAL_GPIO_Init+0x48>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d007      	beq.n	8001ea4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e98:	2b11      	cmp	r3, #17
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b12      	cmp	r3, #18
 8001ea2:	d130      	bne.n	8001f06 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	2203      	movs	r2, #3
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eda:	2201      	movs	r2, #1
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	f003 0201 	and.w	r2, r3, #1
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	2203      	movs	r2, #3
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0xea>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b12      	cmp	r3, #18
 8001f44:	d123      	bne.n	8001f8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	08da      	lsrs	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3208      	adds	r2, #8
 8001f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	08da      	lsrs	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3208      	adds	r2, #8
 8001f88:	6939      	ldr	r1, [r7, #16]
 8001f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0203 	and.w	r2, r3, #3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 80a6 	beq.w	800211c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd0:	4b5b      	ldr	r3, [pc, #364]	; (8002140 <HAL_GPIO_Init+0x2e4>)
 8001fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd4:	4a5a      	ldr	r2, [pc, #360]	; (8002140 <HAL_GPIO_Init+0x2e4>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6613      	str	r3, [r2, #96]	; 0x60
 8001fdc:	4b58      	ldr	r3, [pc, #352]	; (8002140 <HAL_GPIO_Init+0x2e4>)
 8001fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fe8:	4a56      	ldr	r2, [pc, #344]	; (8002144 <HAL_GPIO_Init+0x2e8>)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	089b      	lsrs	r3, r3, #2
 8001fee:	3302      	adds	r3, #2
 8001ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	220f      	movs	r2, #15
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002012:	d01f      	beq.n	8002054 <HAL_GPIO_Init+0x1f8>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a4c      	ldr	r2, [pc, #304]	; (8002148 <HAL_GPIO_Init+0x2ec>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d019      	beq.n	8002050 <HAL_GPIO_Init+0x1f4>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a4b      	ldr	r2, [pc, #300]	; (800214c <HAL_GPIO_Init+0x2f0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d013      	beq.n	800204c <HAL_GPIO_Init+0x1f0>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a4a      	ldr	r2, [pc, #296]	; (8002150 <HAL_GPIO_Init+0x2f4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d00d      	beq.n	8002048 <HAL_GPIO_Init+0x1ec>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a49      	ldr	r2, [pc, #292]	; (8002154 <HAL_GPIO_Init+0x2f8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d007      	beq.n	8002044 <HAL_GPIO_Init+0x1e8>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a48      	ldr	r2, [pc, #288]	; (8002158 <HAL_GPIO_Init+0x2fc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d101      	bne.n	8002040 <HAL_GPIO_Init+0x1e4>
 800203c:	2305      	movs	r3, #5
 800203e:	e00a      	b.n	8002056 <HAL_GPIO_Init+0x1fa>
 8002040:	2306      	movs	r3, #6
 8002042:	e008      	b.n	8002056 <HAL_GPIO_Init+0x1fa>
 8002044:	2304      	movs	r3, #4
 8002046:	e006      	b.n	8002056 <HAL_GPIO_Init+0x1fa>
 8002048:	2303      	movs	r3, #3
 800204a:	e004      	b.n	8002056 <HAL_GPIO_Init+0x1fa>
 800204c:	2302      	movs	r3, #2
 800204e:	e002      	b.n	8002056 <HAL_GPIO_Init+0x1fa>
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <HAL_GPIO_Init+0x1fa>
 8002054:	2300      	movs	r3, #0
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	f002 0203 	and.w	r2, r2, #3
 800205c:	0092      	lsls	r2, r2, #2
 800205e:	4093      	lsls	r3, r2
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4313      	orrs	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002066:	4937      	ldr	r1, [pc, #220]	; (8002144 <HAL_GPIO_Init+0x2e8>)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	089b      	lsrs	r3, r3, #2
 800206c:	3302      	adds	r3, #2
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002074:	4b39      	ldr	r3, [pc, #228]	; (800215c <HAL_GPIO_Init+0x300>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	43db      	mvns	r3, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002098:	4a30      	ldr	r2, [pc, #192]	; (800215c <HAL_GPIO_Init+0x300>)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800209e:	4b2f      	ldr	r3, [pc, #188]	; (800215c <HAL_GPIO_Init+0x300>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4313      	orrs	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020c2:	4a26      	ldr	r2, [pc, #152]	; (800215c <HAL_GPIO_Init+0x300>)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020c8:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_GPIO_Init+0x300>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020ec:	4a1b      	ldr	r2, [pc, #108]	; (800215c <HAL_GPIO_Init+0x300>)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020f2:	4b1a      	ldr	r3, [pc, #104]	; (800215c <HAL_GPIO_Init+0x300>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4013      	ands	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002116:	4a11      	ldr	r2, [pc, #68]	; (800215c <HAL_GPIO_Init+0x300>)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3301      	adds	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	fa22 f303 	lsr.w	r3, r2, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	f47f ae9d 	bne.w	8001e6c <HAL_GPIO_Init+0x10>
  }
}
 8002132:	bf00      	nop
 8002134:	371c      	adds	r7, #28
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	40010000 	.word	0x40010000
 8002148:	48000400 	.word	0x48000400
 800214c:	48000800 	.word	0x48000800
 8002150:	48000c00 	.word	0x48000c00
 8002154:	48001000 	.word	0x48001000
 8002158:	48001400 	.word	0x48001400
 800215c:	40010400 	.word	0x40010400

08002160 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	887b      	ldrh	r3, [r7, #2]
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	e001      	b.n	8002182 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800217e:	2300      	movs	r3, #0
 8002180:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002182:	7bfb      	ldrb	r3, [r7, #15]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
 800219c:	4613      	mov	r3, r2
 800219e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021a0:	787b      	ldrb	r3, [r7, #1]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021a6:	887a      	ldrh	r2, [r7, #2]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021ac:	e002      	b.n	80021b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ae:	887a      	ldrh	r2, [r7, #2]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021cc:	695a      	ldr	r2, [r3, #20]
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d006      	beq.n	80021e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021d6:	4a05      	ldr	r2, [pc, #20]	; (80021ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021dc:	88fb      	ldrh	r3, [r7, #6]
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f806 	bl	80021f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40010400 	.word	0x40010400

080021f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002206:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002208:	b08b      	sub	sp, #44	; 0x2c
 800220a:	af06      	add	r7, sp, #24
 800220c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0d7      	b.n	80023c8 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d106      	bne.n	8002232 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f007 fa53 	bl	80096d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2203      	movs	r2, #3
 8002236:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f003 fc05 	bl	8005a4e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002244:	2300      	movs	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]
 8002248:	e04c      	b.n	80022e4 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	3301      	adds	r3, #1
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	440b      	add	r3, r1
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	b298      	uxth	r0, r3
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	440b      	add	r3, r1
 8002286:	3336      	adds	r3, #54	; 0x36
 8002288:	4602      	mov	r2, r0
 800228a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	3303      	adds	r3, #3
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	440b      	add	r3, r1
 80022b0:	3338      	adds	r3, #56	; 0x38
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	440b      	add	r3, r1
 80022c4:	333c      	adds	r3, #60	; 0x3c
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	440b      	add	r3, r1
 80022d8:	3340      	adds	r3, #64	; 0x40
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	3301      	adds	r3, #1
 80022e2:	73fb      	strb	r3, [r7, #15]
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d3ad      	bcc.n	800224a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]
 80022f2:	e044      	b.n	800237e <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022f4:	7bfa      	ldrb	r2, [r7, #15]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	440b      	add	r3, r1
 8002302:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	440b      	add	r3, r1
 8002318:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002320:	7bfa      	ldrb	r2, [r7, #15]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	440b      	add	r3, r1
 800232e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	440b      	add	r3, r1
 8002344:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	440b      	add	r3, r1
 800235a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	440b      	add	r3, r1
 8002370:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	3301      	adds	r3, #1
 800237c:	73fb      	strb	r3, [r7, #15]
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	429a      	cmp	r2, r3
 8002386:	d3b5      	bcc.n	80022f4 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	603b      	str	r3, [r7, #0]
 800238e:	687e      	ldr	r6, [r7, #4]
 8002390:	466d      	mov	r5, sp
 8002392:	f106 0410 	add.w	r4, r6, #16
 8002396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800239a:	6823      	ldr	r3, [r4, #0]
 800239c:	602b      	str	r3, [r5, #0]
 800239e:	1d33      	adds	r3, r6, #4
 80023a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a2:	6838      	ldr	r0, [r7, #0]
 80023a4:	f003 fb6e 	bl	8005a84 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d102      	bne.n	80023c6 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f001 fa5e 	bl	8003882 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_PCD_Start+0x16>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e012      	b.n	800240c <HAL_PCD_Start+0x3c>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f003 fb14 	bl	8005a20 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f005 fb00 	bl	8007a02 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f005 fb05 	bl	8007a30 <USB_ReadInterrupts>
 8002426:	4603      	mov	r3, r0
 8002428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800242c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002430:	d102      	bne.n	8002438 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fb5b 	bl	8002aee <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f005 faf7 	bl	8007a30 <USB_ReadInterrupts>
 8002442:	4603      	mov	r3, r0
 8002444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244c:	d112      	bne.n	8002474 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002456:	b29a      	uxth	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002460:	b292      	uxth	r2, r2
 8002462:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f007 f9b1 	bl	80097ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800246c:	2100      	movs	r1, #0
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f91e 	bl	80026b0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f005 fad9 	bl	8007a30 <USB_ReadInterrupts>
 800247e:	4603      	mov	r3, r0
 8002480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002488:	d10b      	bne.n	80024a2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002492:	b29a      	uxth	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800249c:	b292      	uxth	r2, r2
 800249e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f005 fac2 	bl	8007a30 <USB_ReadInterrupts>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024b6:	d10b      	bne.n	80024d0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024ca:	b292      	uxth	r2, r2
 80024cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f005 faab 	bl	8007a30 <USB_ReadInterrupts>
 80024da:	4603      	mov	r3, r0
 80024dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e4:	d133      	bne.n	800254e <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0204 	bic.w	r2, r2, #4
 80024f8:	b292      	uxth	r2, r2
 80024fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002506:	b29a      	uxth	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0208 	bic.w	r2, r2, #8
 8002510:	b292      	uxth	r2, r2
 8002512:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800251c:	2b01      	cmp	r3, #1
 800251e:	d107      	bne.n	8002530 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002528:	2100      	movs	r1, #0
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f007 fb44 	bl	8009bb8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f007 f985 	bl	8009840 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800253e:	b29a      	uxth	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002548:	b292      	uxth	r2, r2
 800254a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f005 fa6c 	bl	8007a30 <USB_ReadInterrupts>
 8002558:	4603      	mov	r3, r0
 800255a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800255e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002562:	d126      	bne.n	80025b2 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800256c:	b29a      	uxth	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0208 	orr.w	r2, r2, #8
 8002576:	b292      	uxth	r2, r2
 8002578:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002584:	b29a      	uxth	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800258e:	b292      	uxth	r2, r2
 8002590:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800259c:	b29a      	uxth	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0204 	orr.w	r2, r2, #4
 80025a6:	b292      	uxth	r2, r2
 80025a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f007 f92d 	bl	800980c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f005 fa3a 	bl	8007a30 <USB_ReadInterrupts>
 80025bc:	4603      	mov	r3, r0
 80025be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c2:	2b80      	cmp	r3, #128	; 0x80
 80025c4:	d13f      	bne.n	8002646 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025d8:	b292      	uxth	r2, r2
 80025da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d12b      	bne.n	8002640 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0204 	orr.w	r2, r2, #4
 80025fa:	b292      	uxth	r2, r2
 80025fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002608:	b29a      	uxth	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0208 	orr.w	r2, r2, #8
 8002612:	b292      	uxth	r2, r2
 8002614:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002628:	b29b      	uxth	r3, r3
 800262a:	089b      	lsrs	r3, r3, #2
 800262c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002636:	2101      	movs	r1, #1
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f007 fabd 	bl	8009bb8 <HAL_PCDEx_LPM_Callback>
 800263e:	e002      	b.n	8002646 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f007 f8e3 	bl	800980c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f005 f9f0 	bl	8007a30 <USB_ReadInterrupts>
 8002650:	4603      	mov	r3, r0
 8002652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800265a:	d10e      	bne.n	800267a <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002664:	b29a      	uxth	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800266e:	b292      	uxth	r2, r2
 8002670:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f007 f89c 	bl	80097b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f005 f9d6 	bl	8007a30 <USB_ReadInterrupts>
 8002684:	4603      	mov	r3, r0
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800268e:	d10b      	bne.n	80026a8 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002698:	b29a      	uxth	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026a2:	b292      	uxth	r2, r2
 80026a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_PCD_SetAddress+0x1a>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e013      	b.n	80026f2 <HAL_PCD_SetAddress+0x42>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	4611      	mov	r1, r2
 80026e2:	4618      	mov	r0, r3
 80026e4:	f005 f979 	bl	80079da <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b084      	sub	sp, #16
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	4608      	mov	r0, r1
 8002704:	4611      	mov	r1, r2
 8002706:	461a      	mov	r2, r3
 8002708:	4603      	mov	r3, r0
 800270a:	70fb      	strb	r3, [r7, #3]
 800270c:	460b      	mov	r3, r1
 800270e:	803b      	strh	r3, [r7, #0]
 8002710:	4613      	mov	r3, r2
 8002712:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002718:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800271c:	2b00      	cmp	r3, #0
 800271e:	da0e      	bge.n	800273e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	4413      	add	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2201      	movs	r2, #1
 800273a:	705a      	strb	r2, [r3, #1]
 800273c:	e00e      	b.n	800275c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800273e:	78fb      	ldrb	r3, [r7, #3]
 8002740:	f003 0207 	and.w	r2, r3, #7
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	4413      	add	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	b2da      	uxtb	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002768:	883a      	ldrh	r2, [r7, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	78ba      	ldrb	r2, [r7, #2]
 8002772:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	785b      	ldrb	r3, [r3, #1]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002786:	78bb      	ldrb	r3, [r7, #2]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d102      	bne.n	8002792 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_PCD_EP_Open+0xa6>
 800279c:	2302      	movs	r3, #2
 800279e:	e00e      	b.n	80027be <HAL_PCD_EP_Open+0xc4>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68f9      	ldr	r1, [r7, #12]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f003 f98a 	bl	8005ac8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80027bc:	7afb      	ldrb	r3, [r7, #11]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	460b      	mov	r3, r1
 80027d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	da0e      	bge.n	80027f8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027da:	78fb      	ldrb	r3, [r7, #3]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	4413      	add	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2201      	movs	r2, #1
 80027f4:	705a      	strb	r2, [r3, #1]
 80027f6:	e00e      	b.n	8002816 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	f003 0207 	and.w	r2, r3, #7
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	b2da      	uxtb	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_PCD_EP_Close+0x6a>
 800282c:	2302      	movs	r3, #2
 800282e:	e00e      	b.n	800284e <HAL_PCD_EP_Close+0x88>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68f9      	ldr	r1, [r7, #12]
 800283e:	4618      	mov	r0, r3
 8002840:	f003 fcb0 	bl	80061a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af00      	add	r7, sp, #0
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	460b      	mov	r3, r1
 8002864:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002866:	7afb      	ldrb	r3, [r7, #11]
 8002868:	f003 0207 	and.w	r2, r3, #7
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4413      	add	r3, r2
 800287c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2200      	movs	r2, #0
 800288e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2200      	movs	r2, #0
 8002894:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002896:	7afb      	ldrb	r3, [r7, #11]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	b2da      	uxtb	r2, r3
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028a2:	7afb      	ldrb	r3, [r7, #11]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d106      	bne.n	80028ba <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6979      	ldr	r1, [r7, #20]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f003 fe63 	bl	800657e <USB_EPStartXfer>
 80028b8:	e005      	b.n	80028c6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6979      	ldr	r1, [r7, #20]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f003 fe5c 	bl	800657e <USB_EPStartXfer>
  }

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	f003 0207 	and.w	r2, r3, #7
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	440b      	add	r3, r1
 80028ee:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80028f2:	681b      	ldr	r3, [r3, #0]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	607a      	str	r2, [r7, #4]
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	460b      	mov	r3, r1
 800290e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002910:	7afb      	ldrb	r3, [r7, #11]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4413      	add	r3, r2
 8002924:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2200      	movs	r2, #0
 8002944:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2201      	movs	r2, #1
 800294a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800294c:	7afb      	ldrb	r3, [r7, #11]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	b2da      	uxtb	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002958:	7afb      	ldrb	r3, [r7, #11]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6979      	ldr	r1, [r7, #20]
 8002968:	4618      	mov	r0, r3
 800296a:	f003 fe08 	bl	800657e <USB_EPStartXfer>
 800296e:	e005      	b.n	800297c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6979      	ldr	r1, [r7, #20]
 8002976:	4618      	mov	r0, r3
 8002978:	f003 fe01 	bl	800657e <USB_EPStartXfer>
  }

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	460b      	mov	r3, r1
 8002990:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002992:	78fb      	ldrb	r3, [r7, #3]
 8002994:	f003 0207 	and.w	r2, r3, #7
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	429a      	cmp	r2, r3
 800299e:	d901      	bls.n	80029a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e04c      	b.n	8002a3e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	da0e      	bge.n	80029ca <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	4413      	add	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	705a      	strb	r2, [r3, #1]
 80029c8:	e00c      	b.n	80029e4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	4413      	add	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2201      	movs	r2, #1
 80029e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_PCD_EP_SetStall+0x7e>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e01c      	b.n	8002a3e <HAL_PCD_EP_SetStall+0xb8>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68f9      	ldr	r1, [r7, #12]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f004 fee2 	bl	80077dc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d108      	bne.n	8002a34 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4610      	mov	r0, r2
 8002a30:	f005 f80e 	bl	8007a50 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b084      	sub	sp, #16
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	f003 020f 	and.w	r2, r3, #15
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d901      	bls.n	8002a64 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e040      	b.n	8002ae6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	da0e      	bge.n	8002a8a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a6c:	78fb      	ldrb	r3, [r7, #3]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	4413      	add	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2201      	movs	r2, #1
 8002a86:	705a      	strb	r2, [r3, #1]
 8002a88:	e00e      	b.n	8002aa8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a8a:	78fb      	ldrb	r3, [r7, #3]
 8002a8c:	f003 0207 	and.w	r2, r3, #7
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_PCD_EP_ClrStall+0x82>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e00e      	b.n	8002ae6 <HAL_PCD_EP_ClrStall+0xa0>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68f9      	ldr	r1, [r7, #12]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f004 fed1 	bl	800787e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b08e      	sub	sp, #56	; 0x38
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002af6:	e2d1      	b.n	800309c <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b00:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002b02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002b0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f040 8152 	bne.w	8002dbc <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d150      	bne.n	8002bc4 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b32:	81fb      	strh	r3, [r7, #14]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	89fb      	ldrh	r3, [r7, #14]
 8002b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3328      	adds	r3, #40	; 0x28
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4413      	add	r3, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	4413      	add	r3, r2
 8002b66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	441a      	add	r2, r3
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002b82:	2100      	movs	r1, #0
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f006 fdfa 	bl	800977e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8282 	beq.w	800309c <PCD_EP_ISR_Handler+0x5ae>
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f040 827d 	bne.w	800309c <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	b292      	uxth	r2, r2
 8002bb6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002bc2:	e26b      	b.n	800309c <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002bd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d032      	beq.n	8002c44 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	f004 ff66 	bl	8007aea <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	823b      	strh	r3, [r7, #16]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	8a3a      	ldrh	r2, [r7, #16]
 8002c34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c38:	b292      	uxth	r2, r2
 8002c3a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f006 fd71 	bl	8009724 <HAL_PCD_SetupStageCallback>
 8002c42:	e22b      	b.n	800309c <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c44:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f280 8227 	bge.w	800309c <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	83bb      	strh	r3, [r7, #28]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	8bba      	ldrh	r2, [r7, #28]
 8002c64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c68:	b292      	uxth	r2, r2
 8002c6a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	4413      	add	r3, r2
 8002c86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d019      	beq.n	8002cd0 <PCD_EP_ISR_Handler+0x1e2>
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d015      	beq.n	8002cd0 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	6959      	ldr	r1, [r3, #20]
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	f004 ff18 	bl	8007aea <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	695a      	ldr	r2, [r3, #20]
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	441a      	add	r2, r3
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002cc8:	2100      	movs	r1, #0
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f006 fd3c 	bl	8009748 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d112      	bne.n	8002d1e <PCD_EP_ISR_Handler+0x230>
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	801a      	strh	r2, [r3, #0]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	801a      	strh	r2, [r3, #0]
 8002d1c:	e02f      	b.n	8002d7e <PCD_EP_ISR_Handler+0x290>
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	2b3e      	cmp	r3, #62	; 0x3e
 8002d24:	d813      	bhi.n	8002d4e <PCD_EP_ISR_Handler+0x260>
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	085b      	lsrs	r3, r3, #1
 8002d2c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <PCD_EP_ISR_Handler+0x252>
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	633b      	str	r3, [r7, #48]	; 0x30
 8002d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	029b      	lsls	r3, r3, #10
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	801a      	strh	r2, [r3, #0]
 8002d4c:	e017      	b.n	8002d7e <PCD_EP_ISR_Handler+0x290>
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	633b      	str	r3, [r7, #48]	; 0x30
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f003 031f 	and.w	r3, r3, #31
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d102      	bne.n	8002d68 <PCD_EP_ISR_Handler+0x27a>
 8002d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d64:	3b01      	subs	r3, #1
 8002d66:	633b      	str	r3, [r7, #48]	; 0x30
 8002d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	029b      	lsls	r3, r3, #10
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8e:	827b      	strh	r3, [r7, #18]
 8002d90:	8a7b      	ldrh	r3, [r7, #18]
 8002d92:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002d96:	827b      	strh	r3, [r7, #18]
 8002d98:	8a7b      	ldrh	r3, [r7, #18]
 8002d9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d9e:	827b      	strh	r3, [r7, #18]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	8a7b      	ldrh	r3, [r7, #18]
 8002da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	8013      	strh	r3, [r2, #0]
 8002dba:	e16f      	b.n	800309c <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002dce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f280 80e4 	bge.w	8002fa0 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002dee:	4013      	ands	r3, r2
 8002df0:	853b      	strh	r3, [r7, #40]	; 0x28
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e06:	b292      	uxth	r2, r2
 8002e08:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002e0a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	7b1b      	ldrb	r3, [r3, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d120      	bne.n	8002e6a <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	4413      	add	r3, r2
 8002e42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e4c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002e4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 8083 	beq.w	8002f5c <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	6959      	ldr	r1, [r3, #20]
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	88da      	ldrh	r2, [r3, #6]
 8002e62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e64:	f004 fe41 	bl	8007aea <USB_ReadPMA>
 8002e68:	e078      	b.n	8002f5c <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	78db      	ldrb	r3, [r3, #3]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d108      	bne.n	8002e84 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002e72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e74:	461a      	mov	r2, r3
 8002e76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f91d 	bl	80030b8 <HAL_PCD_EP_DB_Receive>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002e82:	e06b      	b.n	8002f5c <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	441a      	add	r2, r3
 8002eae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ebc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d01f      	beq.n	8002f1e <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f02:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002f04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d028      	beq.n	8002f5c <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	6959      	ldr	r1, [r3, #20]
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	891a      	ldrh	r2, [r3, #8]
 8002f16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f18:	f004 fde7 	bl	8007aea <USB_ReadPMA>
 8002f1c:	e01e      	b.n	8002f5c <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4413      	add	r3, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	4413      	add	r3, r2
 8002f38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f42:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002f44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d008      	beq.n	8002f5c <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	6959      	ldr	r1, [r3, #20]
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	895a      	ldrh	r2, [r3, #10]
 8002f56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f58:	f004 fdc7 	bl	8007aea <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	69da      	ldr	r2, [r3, #28]
 8002f60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f62:	441a      	add	r2, r3
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	695a      	ldr	r2, [r3, #20]
 8002f6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f6e:	441a      	add	r2, r3
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d004      	beq.n	8002f86 <PCD_EP_ISR_Handler+0x498>
 8002f7c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d206      	bcs.n	8002f94 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f006 fbdb 	bl	8009748 <HAL_PCD_DataOutStageCallback>
 8002f92:	e005      	b.n	8002fa0 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f003 faef 	bl	800657e <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002fa0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d078      	beq.n	800309c <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002faa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	4413      	add	r3, r2
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd8:	843b      	strh	r3, [r7, #32]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	441a      	add	r2, r3
 8002fe8:	8c3b      	ldrh	r3, [r7, #32]
 8002fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	78db      	ldrb	r3, [r3, #3]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d108      	bne.n	8003010 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8003002:	2b02      	cmp	r3, #2
 8003004:	d144      	bne.n	8003090 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003006:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d13f      	bne.n	8003090 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003018:	b29b      	uxth	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4413      	add	r3, r2
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	4413      	add	r3, r2
 800302a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003034:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	699a      	ldr	r2, [r3, #24]
 800303a:	8bfb      	ldrh	r3, [r7, #30]
 800303c:	429a      	cmp	r2, r3
 800303e:	d906      	bls.n	800304e <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	699a      	ldr	r2, [r3, #24]
 8003044:	8bfb      	ldrh	r3, [r7, #30]
 8003046:	1ad2      	subs	r2, r2, r3
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	619a      	str	r2, [r3, #24]
 800304c:	e002      	b.n	8003054 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	2200      	movs	r2, #0
 8003052:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d106      	bne.n	800306a <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	4619      	mov	r1, r3
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f006 fb8b 	bl	800977e <HAL_PCD_DataInStageCallback>
 8003068:	e018      	b.n	800309c <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	695a      	ldr	r2, [r3, #20]
 800306e:	8bfb      	ldrh	r3, [r7, #30]
 8003070:	441a      	add	r2, r3
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	69da      	ldr	r2, [r3, #28]
 800307a:	8bfb      	ldrh	r3, [r7, #30]
 800307c:	441a      	add	r2, r3
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003088:	4618      	mov	r0, r3
 800308a:	f003 fa78 	bl	800657e <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800308e:	e005      	b.n	800309c <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003090:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003092:	461a      	mov	r2, r3
 8003094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f917 	bl	80032ca <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	b21b      	sxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f6ff ad25 	blt.w	8002af8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3738      	adds	r7, #56	; 0x38
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	4613      	mov	r3, r2
 80030c4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d07c      	beq.n	80031ca <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d8:	b29b      	uxth	r3, r3
 80030da:	461a      	mov	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	4413      	add	r3, r2
 80030ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030f4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	699a      	ldr	r2, [r3, #24]
 80030fa:	8b7b      	ldrh	r3, [r7, #26]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d306      	bcc.n	800310e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	699a      	ldr	r2, [r3, #24]
 8003104:	8b7b      	ldrh	r3, [r7, #26]
 8003106:	1ad2      	subs	r2, r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	619a      	str	r2, [r3, #24]
 800310c:	e002      	b.n	8003114 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2200      	movs	r2, #0
 8003112:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d123      	bne.n	8003164 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	b29b      	uxth	r3, r3
 800312e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003136:	833b      	strh	r3, [r7, #24]
 8003138:	8b3b      	ldrh	r3, [r7, #24]
 800313a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800313e:	833b      	strh	r3, [r7, #24]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	441a      	add	r2, r3
 800314e:	8b3b      	ldrh	r3, [r7, #24]
 8003150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003158:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800315c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003160:	b29b      	uxth	r3, r3
 8003162:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d01f      	beq.n	80031ae <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	461a      	mov	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	b29b      	uxth	r3, r3
 8003180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003188:	82fb      	strh	r3, [r7, #22]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	441a      	add	r2, r3
 8003198:	8afb      	ldrh	r3, [r7, #22]
 800319a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800319e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80031ae:	8b7b      	ldrh	r3, [r7, #26]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 8085 	beq.w	80032c0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	6959      	ldr	r1, [r3, #20]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	891a      	ldrh	r2, [r3, #8]
 80031c2:	8b7b      	ldrh	r3, [r7, #26]
 80031c4:	f004 fc91 	bl	8007aea <USB_ReadPMA>
 80031c8:	e07a      	b.n	80032c0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4413      	add	r3, r2
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	6812      	ldr	r2, [r2, #0]
 80031e2:	4413      	add	r3, r2
 80031e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	699a      	ldr	r2, [r3, #24]
 80031f4:	8b7b      	ldrh	r3, [r7, #26]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d306      	bcc.n	8003208 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	699a      	ldr	r2, [r3, #24]
 80031fe:	8b7b      	ldrh	r3, [r7, #26]
 8003200:	1ad2      	subs	r2, r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	619a      	str	r2, [r3, #24]
 8003206:	e002      	b.n	800320e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2200      	movs	r2, #0
 800320c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d123      	bne.n	800325e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	b29b      	uxth	r3, r3
 8003228:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800322c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003230:	83fb      	strh	r3, [r7, #30]
 8003232:	8bfb      	ldrh	r3, [r7, #30]
 8003234:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003238:	83fb      	strh	r3, [r7, #30]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	441a      	add	r2, r3
 8003248:	8bfb      	ldrh	r3, [r7, #30]
 800324a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800324e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800325a:	b29b      	uxth	r3, r3
 800325c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003264:	2b00      	cmp	r3, #0
 8003266:	d11f      	bne.n	80032a8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	b29b      	uxth	r3, r3
 800327a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800327e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003282:	83bb      	strh	r3, [r7, #28]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	441a      	add	r2, r3
 8003292:	8bbb      	ldrh	r3, [r7, #28]
 8003294:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003298:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800329c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80032a8:	8b7b      	ldrh	r3, [r7, #26]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d008      	beq.n	80032c0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	6959      	ldr	r1, [r3, #20]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	895a      	ldrh	r2, [r3, #10]
 80032ba:	8b7b      	ldrh	r3, [r7, #26]
 80032bc:	f004 fc15 	bl	8007aea <USB_ReadPMA>
    }
  }

  return count;
 80032c0:	8b7b      	ldrh	r3, [r7, #26]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b092      	sub	sp, #72	; 0x48
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	4613      	mov	r3, r2
 80032d6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032d8:	88fb      	ldrh	r3, [r7, #6]
 80032da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8130 	beq.w	8003544 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4413      	add	r3, r2
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	4413      	add	r3, r2
 80032fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003308:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003310:	429a      	cmp	r2, r3
 8003312:	d906      	bls.n	8003322 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	699a      	ldr	r2, [r3, #24]
 8003318:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800331a:	1ad2      	subs	r2, r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	619a      	str	r2, [r3, #24]
 8003320:	e002      	b.n	8003328 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2200      	movs	r2, #0
 8003326:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d12c      	bne.n	800338a <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	4619      	mov	r1, r3
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f006 fa21 	bl	800977e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800333c:	88fb      	ldrh	r3, [r7, #6]
 800333e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 822d 	beq.w	80037a2 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	b29b      	uxth	r3, r3
 800335a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800335e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003362:	827b      	strh	r3, [r7, #18]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	441a      	add	r2, r3
 8003372:	8a7b      	ldrh	r3, [r7, #18]
 8003374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800337c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003384:	b29b      	uxth	r3, r3
 8003386:	8013      	strh	r3, [r2, #0]
 8003388:	e20b      	b.n	80037a2 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d01f      	beq.n	80033d4 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	461a      	mov	r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	441a      	add	r2, r3
 80033be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033da:	2b01      	cmp	r3, #1
 80033dc:	f040 81e1 	bne.w	80037a2 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	695a      	ldr	r2, [r3, #20]
 80033e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033e6:	441a      	add	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	69da      	ldr	r2, [r3, #28]
 80033f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033f2:	441a      	add	r2, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	6a1a      	ldr	r2, [r3, #32]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	429a      	cmp	r2, r3
 8003402:	d309      	bcc.n	8003418 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	6a1a      	ldr	r2, [r3, #32]
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003410:	1ad2      	subs	r2, r2, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	621a      	str	r2, [r3, #32]
 8003416:	e014      	b.n	8003442 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d106      	bne.n	800342e <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8003420:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003422:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800342c:	e009      	b.n	8003442 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2200      	movs	r2, #0
 8003440:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	785b      	ldrb	r3, [r3, #1]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d155      	bne.n	80034f6 <HAL_PCD_EP_DB_Transmit+0x22c>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003458:	b29b      	uxth	r3, r3
 800345a:	461a      	mov	r2, r3
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	4413      	add	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	00da      	lsls	r2, r3, #3
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	4413      	add	r3, r2
 800346c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003474:	2b00      	cmp	r3, #0
 8003476:	d112      	bne.n	800349e <HAL_PCD_EP_DB_Transmit+0x1d4>
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	b29b      	uxth	r3, r3
 800347e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003482:	b29a      	uxth	r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	801a      	strh	r2, [r3, #0]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	b29b      	uxth	r3, r3
 800348e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003496:	b29a      	uxth	r2, r3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	801a      	strh	r2, [r3, #0]
 800349c:	e047      	b.n	800352e <HAL_PCD_EP_DB_Transmit+0x264>
 800349e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a0:	2b3e      	cmp	r3, #62	; 0x3e
 80034a2:	d811      	bhi.n	80034c8 <HAL_PCD_EP_DB_Transmit+0x1fe>
 80034a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a6:	085b      	lsrs	r3, r3, #1
 80034a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_PCD_EP_DB_Transmit+0x1f0>
 80034b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b6:	3301      	adds	r3, #1
 80034b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034bc:	b29b      	uxth	r3, r3
 80034be:	029b      	lsls	r3, r3, #10
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	801a      	strh	r2, [r3, #0]
 80034c6:	e032      	b.n	800352e <HAL_PCD_EP_DB_Transmit+0x264>
 80034c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d0:	f003 031f 	and.w	r3, r3, #31
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d102      	bne.n	80034de <HAL_PCD_EP_DB_Transmit+0x214>
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	3b01      	subs	r3, #1
 80034dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	029b      	lsls	r3, r3, #10
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	801a      	strh	r2, [r3, #0]
 80034f4:	e01b      	b.n	800352e <HAL_PCD_EP_DB_Transmit+0x264>
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	785b      	ldrb	r3, [r3, #1]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d117      	bne.n	800352e <HAL_PCD_EP_DB_Transmit+0x264>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	623b      	str	r3, [r7, #32]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800350c:	b29b      	uxth	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	4413      	add	r3, r2
 8003514:	623b      	str	r3, [r7, #32]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	00da      	lsls	r2, r3, #3
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	4413      	add	r3, r2
 8003520:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003524:	61fb      	str	r3, [r7, #28]
 8003526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003528:	b29a      	uxth	r2, r3
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	6959      	ldr	r1, [r3, #20]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	891a      	ldrh	r2, [r3, #8]
 800353a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353c:	b29b      	uxth	r3, r3
 800353e:	f004 fa93 	bl	8007a68 <USB_WritePMA>
 8003542:	e12e      	b.n	80037a2 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800354c:	b29b      	uxth	r3, r3
 800354e:	461a      	mov	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4413      	add	r3, r2
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	4413      	add	r3, r2
 800355e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003568:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003570:	429a      	cmp	r2, r3
 8003572:	d306      	bcc.n	8003582 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	699a      	ldr	r2, [r3, #24]
 8003578:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800357a:	1ad2      	subs	r2, r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	619a      	str	r2, [r3, #24]
 8003580:	e002      	b.n	8003588 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2200      	movs	r2, #0
 8003586:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d12c      	bne.n	80035ea <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	4619      	mov	r1, r3
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f006 f8f1 	bl	800977e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f040 80fd 	bne.w	80037a2 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	461a      	mov	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	441a      	add	r2, r3
 80035d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80035d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	8013      	strh	r3, [r2, #0]
 80035e8:	e0db      	b.n	80037a2 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d11f      	bne.n	8003634 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	461a      	mov	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	b29b      	uxth	r3, r3
 8003606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800360a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	441a      	add	r2, r3
 800361e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800362c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003630:	b29b      	uxth	r3, r3
 8003632:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800363a:	2b01      	cmp	r3, #1
 800363c:	f040 80b1 	bne.w	80037a2 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003646:	441a      	add	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003652:	441a      	add	r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	6a1a      	ldr	r2, [r3, #32]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	429a      	cmp	r2, r3
 8003662:	d309      	bcc.n	8003678 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	6a1a      	ldr	r2, [r3, #32]
 800366e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003670:	1ad2      	subs	r2, r2, r3
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	621a      	str	r2, [r3, #32]
 8003676:	e014      	b.n	80036a2 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d106      	bne.n	800368e <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8003680:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003682:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800368c:	e009      	b.n	80036a2 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2200      	movs	r2, #0
 8003698:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	637b      	str	r3, [r7, #52]	; 0x34
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	785b      	ldrb	r3, [r3, #1]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d155      	bne.n	800375c <HAL_PCD_EP_DB_Transmit+0x492>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	647b      	str	r3, [r7, #68]	; 0x44
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036be:	b29b      	uxth	r3, r3
 80036c0:	461a      	mov	r2, r3
 80036c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c4:	4413      	add	r3, r2
 80036c6:	647b      	str	r3, [r7, #68]	; 0x44
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	00da      	lsls	r2, r3, #3
 80036ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d0:	4413      	add	r3, r2
 80036d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036d6:	643b      	str	r3, [r7, #64]	; 0x40
 80036d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d112      	bne.n	8003704 <HAL_PCD_EP_DB_Transmit+0x43a>
 80036de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ec:	801a      	strh	r2, [r3, #0]
 80036ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003700:	801a      	strh	r2, [r3, #0]
 8003702:	e044      	b.n	800378e <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003706:	2b3e      	cmp	r3, #62	; 0x3e
 8003708:	d811      	bhi.n	800372e <HAL_PCD_EP_DB_Transmit+0x464>
 800370a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370c:	085b      	lsrs	r3, r3, #1
 800370e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <HAL_PCD_EP_DB_Transmit+0x456>
 800371a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800371c:	3301      	adds	r3, #1
 800371e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003722:	b29b      	uxth	r3, r3
 8003724:	029b      	lsls	r3, r3, #10
 8003726:	b29a      	uxth	r2, r3
 8003728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800372a:	801a      	strh	r2, [r3, #0]
 800372c:	e02f      	b.n	800378e <HAL_PCD_EP_DB_Transmit+0x4c4>
 800372e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003730:	095b      	lsrs	r3, r3, #5
 8003732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	2b00      	cmp	r3, #0
 800373c:	d102      	bne.n	8003744 <HAL_PCD_EP_DB_Transmit+0x47a>
 800373e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003740:	3b01      	subs	r3, #1
 8003742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003746:	b29b      	uxth	r3, r3
 8003748:	029b      	lsls	r3, r3, #10
 800374a:	b29b      	uxth	r3, r3
 800374c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003754:	b29a      	uxth	r2, r3
 8003756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003758:	801a      	strh	r2, [r3, #0]
 800375a:	e018      	b.n	800378e <HAL_PCD_EP_DB_Transmit+0x4c4>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	785b      	ldrb	r3, [r3, #1]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d114      	bne.n	800378e <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800376c:	b29b      	uxth	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003772:	4413      	add	r3, r2
 8003774:	637b      	str	r3, [r7, #52]	; 0x34
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	00da      	lsls	r2, r3, #3
 800377c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377e:	4413      	add	r3, r2
 8003780:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003784:	633b      	str	r3, [r7, #48]	; 0x30
 8003786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003788:	b29a      	uxth	r2, r3
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	6959      	ldr	r1, [r3, #20]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	895a      	ldrh	r2, [r3, #10]
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379c:	b29b      	uxth	r3, r3
 800379e:	f004 f963 	bl	8007a68 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037bc:	823b      	strh	r3, [r7, #16]
 80037be:	8a3b      	ldrh	r3, [r7, #16]
 80037c0:	f083 0310 	eor.w	r3, r3, #16
 80037c4:	823b      	strh	r3, [r7, #16]
 80037c6:	8a3b      	ldrh	r3, [r7, #16]
 80037c8:	f083 0320 	eor.w	r3, r3, #32
 80037cc:	823b      	strh	r3, [r7, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	441a      	add	r2, r3
 80037dc:	8a3b      	ldrh	r3, [r7, #16]
 80037de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3748      	adds	r7, #72	; 0x48
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	607b      	str	r3, [r7, #4]
 8003806:	460b      	mov	r3, r1
 8003808:	817b      	strh	r3, [r7, #10]
 800380a:	4613      	mov	r3, r2
 800380c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800380e:	897b      	ldrh	r3, [r7, #10]
 8003810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00b      	beq.n	8003832 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800381a:	897b      	ldrh	r3, [r7, #10]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	4613      	mov	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4413      	add	r3, r2
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	e009      	b.n	8003846 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003832:	897a      	ldrh	r2, [r7, #10]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4413      	add	r3, r2
 8003844:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003846:	893b      	ldrh	r3, [r7, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d107      	bne.n	800385c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	2200      	movs	r2, #0
 8003850:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	b29a      	uxth	r2, r3
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	80da      	strh	r2, [r3, #6]
 800385a:	e00b      	b.n	8003874 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2201      	movs	r2, #1
 8003860:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	b29a      	uxth	r2, r3
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	0c1b      	lsrs	r3, r3, #16
 800386e:	b29a      	uxth	r2, r3
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003882:	b480      	push	{r7}
 8003884:	b085      	sub	sp, #20
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	f043 0301 	orr.w	r3, r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	f043 0302 	orr.w	r3, r3, #2
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
	...

080038d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d141      	bne.n	800396a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038e6:	4b4b      	ldr	r3, [pc, #300]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f2:	d131      	bne.n	8003958 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038f4:	4b47      	ldr	r3, [pc, #284]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038fa:	4a46      	ldr	r2, [pc, #280]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003900:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003904:	4b43      	ldr	r3, [pc, #268]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800390c:	4a41      	ldr	r2, [pc, #260]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800390e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003912:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003914:	4b40      	ldr	r3, [pc, #256]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2232      	movs	r2, #50	; 0x32
 800391a:	fb02 f303 	mul.w	r3, r2, r3
 800391e:	4a3f      	ldr	r2, [pc, #252]	; (8003a1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003920:	fba2 2303 	umull	r2, r3, r2, r3
 8003924:	0c9b      	lsrs	r3, r3, #18
 8003926:	3301      	adds	r3, #1
 8003928:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800392a:	e002      	b.n	8003932 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	3b01      	subs	r3, #1
 8003930:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003932:	4b38      	ldr	r3, [pc, #224]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800393a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393e:	d102      	bne.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f2      	bne.n	800392c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003946:	4b33      	ldr	r3, [pc, #204]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003952:	d158      	bne.n	8003a06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e057      	b.n	8003a08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003958:	4b2e      	ldr	r3, [pc, #184]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800395a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800395e:	4a2d      	ldr	r2, [pc, #180]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003964:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003968:	e04d      	b.n	8003a06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003970:	d141      	bne.n	80039f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003972:	4b28      	ldr	r3, [pc, #160]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800397a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800397e:	d131      	bne.n	80039e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003980:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003986:	4a23      	ldr	r2, [pc, #140]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800398c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003990:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003998:	4a1e      	ldr	r2, [pc, #120]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800399a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800399e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039a0:	4b1d      	ldr	r3, [pc, #116]	; (8003a18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2232      	movs	r2, #50	; 0x32
 80039a6:	fb02 f303 	mul.w	r3, r2, r3
 80039aa:	4a1c      	ldr	r2, [pc, #112]	; (8003a1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	0c9b      	lsrs	r3, r3, #18
 80039b2:	3301      	adds	r3, #1
 80039b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039b6:	e002      	b.n	80039be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039be:	4b15      	ldr	r3, [pc, #84]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ca:	d102      	bne.n	80039d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f2      	bne.n	80039b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039d2:	4b10      	ldr	r3, [pc, #64]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039de:	d112      	bne.n	8003a06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e011      	b.n	8003a08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039e4:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ea:	4a0a      	ldr	r2, [pc, #40]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80039f4:	e007      	b.n	8003a06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039f6:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039fe:	4a05      	ldr	r2, [pc, #20]	; (8003a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a04:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	40007000 	.word	0x40007000
 8003a18:	20000008 	.word	0x20000008
 8003a1c:	431bde83 	.word	0x431bde83

08003a20 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003a24:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4a04      	ldr	r2, [pc, #16]	; (8003a3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a2e:	6093      	str	r3, [r2, #8]
}
 8003a30:	bf00      	nop
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40007000 	.word	0x40007000

08003a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e308      	b.n	8004064 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d075      	beq.n	8003b4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a5e:	4ba3      	ldr	r3, [pc, #652]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
 8003a66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a68:	4ba0      	ldr	r3, [pc, #640]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	2b0c      	cmp	r3, #12
 8003a76:	d102      	bne.n	8003a7e <HAL_RCC_OscConfig+0x3e>
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d002      	beq.n	8003a84 <HAL_RCC_OscConfig+0x44>
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d10b      	bne.n	8003a9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a84:	4b99      	ldr	r3, [pc, #612]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d05b      	beq.n	8003b48 <HAL_RCC_OscConfig+0x108>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d157      	bne.n	8003b48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e2e3      	b.n	8004064 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa4:	d106      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x74>
 8003aa6:	4b91      	ldr	r3, [pc, #580]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a90      	ldr	r2, [pc, #576]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	e01d      	b.n	8003af0 <HAL_RCC_OscConfig+0xb0>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x98>
 8003abe:	4b8b      	ldr	r3, [pc, #556]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a8a      	ldr	r2, [pc, #552]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	4b88      	ldr	r3, [pc, #544]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a87      	ldr	r2, [pc, #540]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	e00b      	b.n	8003af0 <HAL_RCC_OscConfig+0xb0>
 8003ad8:	4b84      	ldr	r3, [pc, #528]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a83      	ldr	r2, [pc, #524]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	4b81      	ldr	r3, [pc, #516]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a80      	ldr	r2, [pc, #512]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d013      	beq.n	8003b20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af8:	f7fe f894 	bl	8001c24 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b00:	f7fe f890 	bl	8001c24 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	; 0x64
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e2a8      	b.n	8004064 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b12:	4b76      	ldr	r3, [pc, #472]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0xc0>
 8003b1e:	e014      	b.n	8003b4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7fe f880 	bl	8001c24 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b28:	f7fe f87c 	bl	8001c24 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b64      	cmp	r3, #100	; 0x64
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e294      	b.n	8004064 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b3a:	4b6c      	ldr	r3, [pc, #432]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0xe8>
 8003b46:	e000      	b.n	8003b4a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d075      	beq.n	8003c42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b56:	4b65      	ldr	r3, [pc, #404]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b60:	4b62      	ldr	r3, [pc, #392]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2b0c      	cmp	r3, #12
 8003b6e:	d102      	bne.n	8003b76 <HAL_RCC_OscConfig+0x136>
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d002      	beq.n	8003b7c <HAL_RCC_OscConfig+0x13c>
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d11f      	bne.n	8003bbc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b7c:	4b5b      	ldr	r3, [pc, #364]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_OscConfig+0x154>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e267      	b.n	8004064 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b94:	4b55      	ldr	r3, [pc, #340]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	061b      	lsls	r3, r3, #24
 8003ba2:	4952      	ldr	r1, [pc, #328]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ba8:	4b51      	ldr	r3, [pc, #324]	; (8003cf0 <HAL_RCC_OscConfig+0x2b0>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fd ffed 	bl	8001b8c <HAL_InitTick>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d043      	beq.n	8003c40 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e253      	b.n	8004064 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d023      	beq.n	8003c0c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bc4:	4b49      	ldr	r3, [pc, #292]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a48      	ldr	r2, [pc, #288]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fe f828 	bl	8001c24 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd8:	f7fe f824 	bl	8001c24 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e23c      	b.n	8004064 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bea:	4b40      	ldr	r3, [pc, #256]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf6:	4b3d      	ldr	r3, [pc, #244]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	061b      	lsls	r3, r3, #24
 8003c04:	4939      	ldr	r1, [pc, #228]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	604b      	str	r3, [r1, #4]
 8003c0a:	e01a      	b.n	8003c42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c0c:	4b37      	ldr	r3, [pc, #220]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a36      	ldr	r2, [pc, #216]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003c12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7fe f804 	bl	8001c24 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c20:	f7fe f800 	bl	8001c24 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e218      	b.n	8004064 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c32:	4b2e      	ldr	r3, [pc, #184]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0x1e0>
 8003c3e:	e000      	b.n	8003c42 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d03c      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d01c      	beq.n	8003c90 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c56:	4b25      	ldr	r3, [pc, #148]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c5c:	4a23      	ldr	r2, [pc, #140]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c66:	f7fd ffdd 	bl	8001c24 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c6e:	f7fd ffd9 	bl	8001c24 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e1f1      	b.n	8004064 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c80:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0ef      	beq.n	8003c6e <HAL_RCC_OscConfig+0x22e>
 8003c8e:	e01b      	b.n	8003cc8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c90:	4b16      	ldr	r3, [pc, #88]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c96:	4a15      	ldr	r2, [pc, #84]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003c98:	f023 0301 	bic.w	r3, r3, #1
 8003c9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca0:	f7fd ffc0 	bl	8001c24 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca8:	f7fd ffbc 	bl	8001c24 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e1d4      	b.n	8004064 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cba:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1ef      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 80ab 	beq.w	8003e2c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cda:	4b04      	ldr	r3, [pc, #16]	; (8003cec <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x2b4>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e005      	b.n	8003cf6 <HAL_RCC_OscConfig+0x2b6>
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	2000000c 	.word	0x2000000c
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00d      	beq.n	8003d16 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cfa:	4baf      	ldr	r3, [pc, #700]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfe:	4aae      	ldr	r2, [pc, #696]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d04:	6593      	str	r3, [r2, #88]	; 0x58
 8003d06:	4bac      	ldr	r3, [pc, #688]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d12:	2301      	movs	r3, #1
 8003d14:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d16:	4ba9      	ldr	r3, [pc, #676]	; (8003fbc <HAL_RCC_OscConfig+0x57c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d118      	bne.n	8003d54 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d22:	4ba6      	ldr	r3, [pc, #664]	; (8003fbc <HAL_RCC_OscConfig+0x57c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4aa5      	ldr	r2, [pc, #660]	; (8003fbc <HAL_RCC_OscConfig+0x57c>)
 8003d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2e:	f7fd ff79 	bl	8001c24 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d36:	f7fd ff75 	bl	8001c24 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e18d      	b.n	8004064 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d48:	4b9c      	ldr	r3, [pc, #624]	; (8003fbc <HAL_RCC_OscConfig+0x57c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d108      	bne.n	8003d6e <HAL_RCC_OscConfig+0x32e>
 8003d5c:	4b96      	ldr	r3, [pc, #600]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d62:	4a95      	ldr	r2, [pc, #596]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d6c:	e024      	b.n	8003db8 <HAL_RCC_OscConfig+0x378>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b05      	cmp	r3, #5
 8003d74:	d110      	bne.n	8003d98 <HAL_RCC_OscConfig+0x358>
 8003d76:	4b90      	ldr	r3, [pc, #576]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7c:	4a8e      	ldr	r2, [pc, #568]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003d7e:	f043 0304 	orr.w	r3, r3, #4
 8003d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d86:	4b8c      	ldr	r3, [pc, #560]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8c:	4a8a      	ldr	r2, [pc, #552]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d96:	e00f      	b.n	8003db8 <HAL_RCC_OscConfig+0x378>
 8003d98:	4b87      	ldr	r3, [pc, #540]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9e:	4a86      	ldr	r2, [pc, #536]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003da0:	f023 0301 	bic.w	r3, r3, #1
 8003da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003da8:	4b83      	ldr	r3, [pc, #524]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dae:	4a82      	ldr	r2, [pc, #520]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003db0:	f023 0304 	bic.w	r3, r3, #4
 8003db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d016      	beq.n	8003dee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc0:	f7fd ff30 	bl	8001c24 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc6:	e00a      	b.n	8003dde <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc8:	f7fd ff2c 	bl	8001c24 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e142      	b.n	8004064 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dde:	4b76      	ldr	r3, [pc, #472]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0ed      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x388>
 8003dec:	e015      	b.n	8003e1a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dee:	f7fd ff19 	bl	8001c24 <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003df4:	e00a      	b.n	8003e0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df6:	f7fd ff15 	bl	8001c24 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e12b      	b.n	8004064 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e0c:	4b6a      	ldr	r3, [pc, #424]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1ed      	bne.n	8003df6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e1a:	7ffb      	ldrb	r3, [r7, #31]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d105      	bne.n	8003e2c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e20:	4b65      	ldr	r3, [pc, #404]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	4a64      	ldr	r2, [pc, #400]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d03c      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01c      	beq.n	8003e7a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e40:	4b5d      	ldr	r3, [pc, #372]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003e42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e46:	4a5c      	ldr	r2, [pc, #368]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e50:	f7fd fee8 	bl	8001c24 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e58:	f7fd fee4 	bl	8001c24 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e0fc      	b.n	8004064 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e6a:	4b53      	ldr	r3, [pc, #332]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003e6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0ef      	beq.n	8003e58 <HAL_RCC_OscConfig+0x418>
 8003e78:	e01b      	b.n	8003eb2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e7a:	4b4f      	ldr	r3, [pc, #316]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003e7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e80:	4a4d      	ldr	r2, [pc, #308]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003e82:	f023 0301 	bic.w	r3, r3, #1
 8003e86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8a:	f7fd fecb 	bl	8001c24 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e92:	f7fd fec7 	bl	8001c24 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e0df      	b.n	8004064 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ea4:	4b44      	ldr	r3, [pc, #272]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1ef      	bne.n	8003e92 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80d3 	beq.w	8004062 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ebc:	4b3e      	ldr	r3, [pc, #248]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 030c 	and.w	r3, r3, #12
 8003ec4:	2b0c      	cmp	r3, #12
 8003ec6:	f000 808d 	beq.w	8003fe4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d15a      	bne.n	8003f88 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed2:	4b39      	ldr	r3, [pc, #228]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a38      	ldr	r2, [pc, #224]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003ed8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ede:	f7fd fea1 	bl	8001c24 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee6:	f7fd fe9d 	bl	8001c24 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e0b5      	b.n	8004064 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef8:	4b2f      	ldr	r3, [pc, #188]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1f0      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f04:	4b2c      	ldr	r3, [pc, #176]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	4b2d      	ldr	r3, [pc, #180]	; (8003fc0 <HAL_RCC_OscConfig+0x580>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6a11      	ldr	r1, [r2, #32]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f14:	3a01      	subs	r2, #1
 8003f16:	0112      	lsls	r2, r2, #4
 8003f18:	4311      	orrs	r1, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003f1e:	0212      	lsls	r2, r2, #8
 8003f20:	4311      	orrs	r1, r2
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f26:	0852      	lsrs	r2, r2, #1
 8003f28:	3a01      	subs	r2, #1
 8003f2a:	0552      	lsls	r2, r2, #21
 8003f2c:	4311      	orrs	r1, r2
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f32:	0852      	lsrs	r2, r2, #1
 8003f34:	3a01      	subs	r2, #1
 8003f36:	0652      	lsls	r2, r2, #25
 8003f38:	4311      	orrs	r1, r2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f3e:	06d2      	lsls	r2, r2, #27
 8003f40:	430a      	orrs	r2, r1
 8003f42:	491d      	ldr	r1, [pc, #116]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f48:	4b1b      	ldr	r3, [pc, #108]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a1a      	ldr	r2, [pc, #104]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f52:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f54:	4b18      	ldr	r3, [pc, #96]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4a17      	ldr	r2, [pc, #92]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7fd fe60 	bl	8001c24 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fd fe5c 	bl	8001c24 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e074      	b.n	8004064 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f7a:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0x528>
 8003f86:	e06c      	b.n	8004062 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a0a      	ldr	r2, [pc, #40]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003f8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f92:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f94:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4a07      	ldr	r2, [pc, #28]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003f9a:	f023 0303 	bic.w	r3, r3, #3
 8003f9e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003fa0:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <HAL_RCC_OscConfig+0x578>)
 8003fa6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb0:	f7fd fe38 	bl	8001c24 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb6:	e00e      	b.n	8003fd6 <HAL_RCC_OscConfig+0x596>
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	40007000 	.word	0x40007000
 8003fc0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc4:	f7fd fe2e 	bl	8001c24 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e046      	b.n	8004064 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fd6:	4b25      	ldr	r3, [pc, #148]	; (800406c <HAL_RCC_OscConfig+0x62c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f0      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x584>
 8003fe2:	e03e      	b.n	8004062 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e039      	b.n	8004064 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003ff0:	4b1e      	ldr	r3, [pc, #120]	; (800406c <HAL_RCC_OscConfig+0x62c>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f003 0203 	and.w	r2, r3, #3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	429a      	cmp	r2, r3
 8004002:	d12c      	bne.n	800405e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	3b01      	subs	r3, #1
 8004010:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004012:	429a      	cmp	r2, r3
 8004014:	d123      	bne.n	800405e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004022:	429a      	cmp	r2, r3
 8004024:	d11b      	bne.n	800405e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004032:	429a      	cmp	r2, r3
 8004034:	d113      	bne.n	800405e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	085b      	lsrs	r3, r3, #1
 8004042:	3b01      	subs	r3, #1
 8004044:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004046:	429a      	cmp	r2, r3
 8004048:	d109      	bne.n	800405e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004054:	085b      	lsrs	r3, r3, #1
 8004056:	3b01      	subs	r3, #1
 8004058:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800405a:	429a      	cmp	r2, r3
 800405c:	d001      	beq.n	8004062 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3720      	adds	r7, #32
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40021000 	.word	0x40021000

08004070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e11e      	b.n	80042c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004088:	4b91      	ldr	r3, [pc, #580]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d910      	bls.n	80040b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004096:	4b8e      	ldr	r3, [pc, #568]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 020f 	bic.w	r2, r3, #15
 800409e:	498c      	ldr	r1, [pc, #560]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a6:	4b8a      	ldr	r3, [pc, #552]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e106      	b.n	80042c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d073      	beq.n	80041ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d129      	bne.n	8004120 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040cc:	4b81      	ldr	r3, [pc, #516]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0f4      	b.n	80042c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80040dc:	f000 f966 	bl	80043ac <RCC_GetSysClockFreqFromPLLSource>
 80040e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	4a7c      	ldr	r2, [pc, #496]	; (80042d8 <HAL_RCC_ClockConfig+0x268>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d93f      	bls.n	800416a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80040ea:	4b7a      	ldr	r3, [pc, #488]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d009      	beq.n	800410a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d033      	beq.n	800416a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004106:	2b00      	cmp	r3, #0
 8004108:	d12f      	bne.n	800416a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800410a:	4b72      	ldr	r3, [pc, #456]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004112:	4a70      	ldr	r2, [pc, #448]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 8004114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004118:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800411a:	2380      	movs	r3, #128	; 0x80
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	e024      	b.n	800416a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d107      	bne.n	8004138 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004128:	4b6a      	ldr	r3, [pc, #424]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d109      	bne.n	8004148 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0c6      	b.n	80042c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004138:	4b66      	ldr	r3, [pc, #408]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0be      	b.n	80042c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004148:	f000 f8ce 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 800414c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4a61      	ldr	r2, [pc, #388]	; (80042d8 <HAL_RCC_ClockConfig+0x268>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d909      	bls.n	800416a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004156:	4b5f      	ldr	r3, [pc, #380]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800415e:	4a5d      	ldr	r2, [pc, #372]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 8004160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004164:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004166:	2380      	movs	r3, #128	; 0x80
 8004168:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800416a:	4b5a      	ldr	r3, [pc, #360]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f023 0203 	bic.w	r2, r3, #3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	4957      	ldr	r1, [pc, #348]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 8004178:	4313      	orrs	r3, r2
 800417a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800417c:	f7fd fd52 	bl	8001c24 <HAL_GetTick>
 8004180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004182:	e00a      	b.n	800419a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004184:	f7fd fd4e 	bl	8001c24 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e095      	b.n	80042c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419a:	4b4e      	ldr	r3, [pc, #312]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 020c 	and.w	r2, r3, #12
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d1eb      	bne.n	8004184 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d023      	beq.n	8004200 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041c4:	4b43      	ldr	r3, [pc, #268]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	4a42      	ldr	r2, [pc, #264]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 80041ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d007      	beq.n	80041ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80041dc:	4b3d      	ldr	r3, [pc, #244]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80041e4:	4a3b      	ldr	r2, [pc, #236]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 80041e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ec:	4b39      	ldr	r3, [pc, #228]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	4936      	ldr	r1, [pc, #216]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	608b      	str	r3, [r1, #8]
 80041fe:	e008      	b.n	8004212 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	2b80      	cmp	r3, #128	; 0x80
 8004204:	d105      	bne.n	8004212 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004206:	4b33      	ldr	r3, [pc, #204]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	4a32      	ldr	r2, [pc, #200]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 800420c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004210:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004212:	4b2f      	ldr	r3, [pc, #188]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d21d      	bcs.n	800425c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004220:	4b2b      	ldr	r3, [pc, #172]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f023 020f 	bic.w	r2, r3, #15
 8004228:	4929      	ldr	r1, [pc, #164]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	4313      	orrs	r3, r2
 800422e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004230:	f7fd fcf8 	bl	8001c24 <HAL_GetTick>
 8004234:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004236:	e00a      	b.n	800424e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004238:	f7fd fcf4 	bl	8001c24 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	f241 3288 	movw	r2, #5000	; 0x1388
 8004246:	4293      	cmp	r3, r2
 8004248:	d901      	bls.n	800424e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e03b      	b.n	80042c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800424e:	4b20      	ldr	r3, [pc, #128]	; (80042d0 <HAL_RCC_ClockConfig+0x260>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d1ed      	bne.n	8004238 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d008      	beq.n	800427a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004268:	4b1a      	ldr	r3, [pc, #104]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	4917      	ldr	r1, [pc, #92]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 8004276:	4313      	orrs	r3, r2
 8004278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d009      	beq.n	800429a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004286:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	490f      	ldr	r1, [pc, #60]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 8004296:	4313      	orrs	r3, r2
 8004298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800429a:	f000 f825 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 800429e:	4601      	mov	r1, r0
 80042a0:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <HAL_RCC_ClockConfig+0x264>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	4a0c      	ldr	r2, [pc, #48]	; (80042dc <HAL_RCC_ClockConfig+0x26c>)
 80042ac:	5cd3      	ldrb	r3, [r2, r3]
 80042ae:	f003 031f 	and.w	r3, r3, #31
 80042b2:	fa21 f303 	lsr.w	r3, r1, r3
 80042b6:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <HAL_RCC_ClockConfig+0x270>)
 80042b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80042ba:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <HAL_RCC_ClockConfig+0x274>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fd fc64 	bl	8001b8c <HAL_InitTick>
 80042c4:	4603      	mov	r3, r0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40022000 	.word	0x40022000
 80042d4:	40021000 	.word	0x40021000
 80042d8:	04c4b400 	.word	0x04c4b400
 80042dc:	08009d70 	.word	0x08009d70
 80042e0:	20000008 	.word	0x20000008
 80042e4:	2000000c 	.word	0x2000000c

080042e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80042ee:	4b2c      	ldr	r3, [pc, #176]	; (80043a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d102      	bne.n	8004300 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042fa:	4b2a      	ldr	r3, [pc, #168]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	e047      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004300:	4b27      	ldr	r3, [pc, #156]	; (80043a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 030c 	and.w	r3, r3, #12
 8004308:	2b08      	cmp	r3, #8
 800430a:	d102      	bne.n	8004312 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800430c:	4b26      	ldr	r3, [pc, #152]	; (80043a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	e03e      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004312:	4b23      	ldr	r3, [pc, #140]	; (80043a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
 800431a:	2b0c      	cmp	r3, #12
 800431c:	d136      	bne.n	800438c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800431e:	4b20      	ldr	r3, [pc, #128]	; (80043a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004328:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	091b      	lsrs	r3, r3, #4
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	3301      	adds	r3, #1
 8004334:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b03      	cmp	r3, #3
 800433a:	d10c      	bne.n	8004356 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800433c:	4a1a      	ldr	r2, [pc, #104]	; (80043a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	fbb2 f3f3 	udiv	r3, r2, r3
 8004344:	4a16      	ldr	r2, [pc, #88]	; (80043a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004346:	68d2      	ldr	r2, [r2, #12]
 8004348:	0a12      	lsrs	r2, r2, #8
 800434a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800434e:	fb02 f303 	mul.w	r3, r2, r3
 8004352:	617b      	str	r3, [r7, #20]
      break;
 8004354:	e00c      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004356:	4a13      	ldr	r2, [pc, #76]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	fbb2 f3f3 	udiv	r3, r2, r3
 800435e:	4a10      	ldr	r2, [pc, #64]	; (80043a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004360:	68d2      	ldr	r2, [r2, #12]
 8004362:	0a12      	lsrs	r2, r2, #8
 8004364:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004368:	fb02 f303 	mul.w	r3, r2, r3
 800436c:	617b      	str	r3, [r7, #20]
      break;
 800436e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	0e5b      	lsrs	r3, r3, #25
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	3301      	adds	r3, #1
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	fbb2 f3f3 	udiv	r3, r2, r3
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	e001      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004390:	693b      	ldr	r3, [r7, #16]
}
 8004392:	4618      	mov	r0, r3
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000
 80043a4:	00f42400 	.word	0x00f42400
 80043a8:	007a1200 	.word	0x007a1200

080043ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043b2:	4b1e      	ldr	r3, [pc, #120]	; (800442c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043bc:	4b1b      	ldr	r3, [pc, #108]	; (800442c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	091b      	lsrs	r3, r3, #4
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	3301      	adds	r3, #1
 80043c8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d10c      	bne.n	80043ea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043d0:	4a17      	ldr	r2, [pc, #92]	; (8004430 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d8:	4a14      	ldr	r2, [pc, #80]	; (800442c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043da:	68d2      	ldr	r2, [r2, #12]
 80043dc:	0a12      	lsrs	r2, r2, #8
 80043de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043e2:	fb02 f303 	mul.w	r3, r2, r3
 80043e6:	617b      	str	r3, [r7, #20]
    break;
 80043e8:	e00c      	b.n	8004404 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043ea:	4a12      	ldr	r2, [pc, #72]	; (8004434 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f2:	4a0e      	ldr	r2, [pc, #56]	; (800442c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043f4:	68d2      	ldr	r2, [r2, #12]
 80043f6:	0a12      	lsrs	r2, r2, #8
 80043f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043fc:	fb02 f303 	mul.w	r3, r2, r3
 8004400:	617b      	str	r3, [r7, #20]
    break;
 8004402:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004404:	4b09      	ldr	r3, [pc, #36]	; (800442c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	0e5b      	lsrs	r3, r3, #25
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	3301      	adds	r3, #1
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	fbb2 f3f3 	udiv	r3, r2, r3
 800441c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800441e:	687b      	ldr	r3, [r7, #4]
}
 8004420:	4618      	mov	r0, r3
 8004422:	371c      	adds	r7, #28
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	40021000 	.word	0x40021000
 8004430:	007a1200 	.word	0x007a1200
 8004434:	00f42400 	.word	0x00f42400

08004438 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004440:	2300      	movs	r3, #0
 8004442:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004444:	2300      	movs	r3, #0
 8004446:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 8098 	beq.w	8004586 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004456:	2300      	movs	r3, #0
 8004458:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800445a:	4b43      	ldr	r3, [pc, #268]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800445c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10d      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004466:	4b40      	ldr	r3, [pc, #256]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446a:	4a3f      	ldr	r2, [pc, #252]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800446c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004470:	6593      	str	r3, [r2, #88]	; 0x58
 8004472:	4b3d      	ldr	r3, [pc, #244]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800447e:	2301      	movs	r3, #1
 8004480:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004482:	4b3a      	ldr	r3, [pc, #232]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a39      	ldr	r2, [pc, #228]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800448e:	f7fd fbc9 	bl	8001c24 <HAL_GetTick>
 8004492:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004494:	e009      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004496:	f7fd fbc5 	bl	8001c24 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d902      	bls.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	74fb      	strb	r3, [r7, #19]
        break;
 80044a8:	e005      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044aa:	4b30      	ldr	r3, [pc, #192]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0ef      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80044b6:	7cfb      	ldrb	r3, [r7, #19]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d159      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044bc:	4b2a      	ldr	r3, [pc, #168]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d01e      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d019      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044d8:	4b23      	ldr	r3, [pc, #140]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044e4:	4b20      	ldr	r3, [pc, #128]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ea:	4a1f      	ldr	r2, [pc, #124]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044f4:	4b1c      	ldr	r3, [pc, #112]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fa:	4a1b      	ldr	r2, [pc, #108]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004504:	4a18      	ldr	r2, [pc, #96]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d016      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004516:	f7fd fb85 	bl	8001c24 <HAL_GetTick>
 800451a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800451c:	e00b      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451e:	f7fd fb81 	bl	8001c24 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	f241 3288 	movw	r2, #5000	; 0x1388
 800452c:	4293      	cmp	r3, r2
 800452e:	d902      	bls.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	74fb      	strb	r3, [r7, #19]
            break;
 8004534:	e006      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004536:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0ec      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004544:	7cfb      	ldrb	r3, [r7, #19]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10b      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800454a:	4b07      	ldr	r3, [pc, #28]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800454c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004550:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	4903      	ldr	r1, [pc, #12]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004560:	e008      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004562:	7cfb      	ldrb	r3, [r7, #19]
 8004564:	74bb      	strb	r3, [r7, #18]
 8004566:	e005      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004568:	40021000 	.word	0x40021000
 800456c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004570:	7cfb      	ldrb	r3, [r7, #19]
 8004572:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004574:	7c7b      	ldrb	r3, [r7, #17]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d105      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800457a:	4ba6      	ldr	r3, [pc, #664]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800457c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457e:	4aa5      	ldr	r2, [pc, #660]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004584:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004592:	4ba0      	ldr	r3, [pc, #640]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004598:	f023 0203 	bic.w	r2, r3, #3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	499c      	ldr	r1, [pc, #624]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00a      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045b4:	4b97      	ldr	r3, [pc, #604]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ba:	f023 020c 	bic.w	r2, r3, #12
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	4994      	ldr	r1, [pc, #592]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0304 	and.w	r3, r3, #4
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045d6:	4b8f      	ldr	r3, [pc, #572]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	498b      	ldr	r1, [pc, #556]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045f8:	4b86      	ldr	r3, [pc, #536]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	4983      	ldr	r1, [pc, #524]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0320 	and.w	r3, r3, #32
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800461a:	4b7e      	ldr	r3, [pc, #504]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004620:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	497a      	ldr	r1, [pc, #488]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800463c:	4b75      	ldr	r3, [pc, #468]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800463e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004642:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	4972      	ldr	r1, [pc, #456]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800465e:	4b6d      	ldr	r3, [pc, #436]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004664:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	4969      	ldr	r1, [pc, #420]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004680:	4b64      	ldr	r3, [pc, #400]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004686:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	4961      	ldr	r1, [pc, #388]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046a2:	4b5c      	ldr	r3, [pc, #368]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	4958      	ldr	r1, [pc, #352]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d015      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046c4:	4b53      	ldr	r3, [pc, #332]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d2:	4950      	ldr	r1, [pc, #320]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046e2:	d105      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046e4:	4b4b      	ldr	r3, [pc, #300]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4a4a      	ldr	r2, [pc, #296]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d015      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046fc:	4b45      	ldr	r3, [pc, #276]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004702:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470a:	4942      	ldr	r1, [pc, #264]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800471a:	d105      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800471c:	4b3d      	ldr	r3, [pc, #244]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4a3c      	ldr	r2, [pc, #240]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004726:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d015      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004734:	4b37      	ldr	r3, [pc, #220]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	4934      	ldr	r1, [pc, #208]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004752:	d105      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004754:	4b2f      	ldr	r3, [pc, #188]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	4a2e      	ldr	r2, [pc, #184]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800475a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800475e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d015      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800476c:	4b29      	ldr	r3, [pc, #164]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004772:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477a:	4926      	ldr	r1, [pc, #152]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800478a:	d105      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800478c:	4b21      	ldr	r3, [pc, #132]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	4a20      	ldr	r2, [pc, #128]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004796:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d015      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047a4:	4b1b      	ldr	r3, [pc, #108]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b2:	4918      	ldr	r1, [pc, #96]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047c2:	d105      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047c4:	4b13      	ldr	r3, [pc, #76]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	4a12      	ldr	r2, [pc, #72]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d015      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80047dc:	4b0d      	ldr	r3, [pc, #52]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ea:	490a      	ldr	r1, [pc, #40]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047fa:	d105      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047fc:	4b05      	ldr	r3, [pc, #20]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	4a04      	ldr	r2, [pc, #16]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004806:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004808:	7cbb      	ldrb	r3, [r7, #18]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40021000 	.word	0x40021000

08004818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e049      	b.n	80048be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d106      	bne.n	8004844 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7fd f814 	bl	800186c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3304      	adds	r3, #4
 8004854:	4619      	mov	r1, r3
 8004856:	4610      	mov	r0, r2
 8004858:	f000 fb78 	bl	8004f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e049      	b.n	800496c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d106      	bne.n	80048f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f841 	bl	8004974 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2202      	movs	r2, #2
 80048f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	3304      	adds	r3, #4
 8004902:	4619      	mov	r1, r3
 8004904:	4610      	mov	r0, r2
 8004906:	f000 fb21 	bl	8004f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d109      	bne.n	80049ac <HAL_TIM_PWM_Start+0x24>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	bf14      	ite	ne
 80049a4:	2301      	movne	r3, #1
 80049a6:	2300      	moveq	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	e03c      	b.n	8004a26 <HAL_TIM_PWM_Start+0x9e>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d109      	bne.n	80049c6 <HAL_TIM_PWM_Start+0x3e>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	bf14      	ite	ne
 80049be:	2301      	movne	r3, #1
 80049c0:	2300      	moveq	r3, #0
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	e02f      	b.n	8004a26 <HAL_TIM_PWM_Start+0x9e>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d109      	bne.n	80049e0 <HAL_TIM_PWM_Start+0x58>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	bf14      	ite	ne
 80049d8:	2301      	movne	r3, #1
 80049da:	2300      	moveq	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	e022      	b.n	8004a26 <HAL_TIM_PWM_Start+0x9e>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2b0c      	cmp	r3, #12
 80049e4:	d109      	bne.n	80049fa <HAL_TIM_PWM_Start+0x72>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	bf14      	ite	ne
 80049f2:	2301      	movne	r3, #1
 80049f4:	2300      	moveq	r3, #0
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	e015      	b.n	8004a26 <HAL_TIM_PWM_Start+0x9e>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b10      	cmp	r3, #16
 80049fe:	d109      	bne.n	8004a14 <HAL_TIM_PWM_Start+0x8c>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	bf14      	ite	ne
 8004a0c:	2301      	movne	r3, #1
 8004a0e:	2300      	moveq	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	e008      	b.n	8004a26 <HAL_TIM_PWM_Start+0x9e>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	bf14      	ite	ne
 8004a20:	2301      	movne	r3, #1
 8004a22:	2300      	moveq	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e097      	b.n	8004b5e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d104      	bne.n	8004a3e <HAL_TIM_PWM_Start+0xb6>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a3c:	e023      	b.n	8004a86 <HAL_TIM_PWM_Start+0xfe>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d104      	bne.n	8004a4e <HAL_TIM_PWM_Start+0xc6>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a4c:	e01b      	b.n	8004a86 <HAL_TIM_PWM_Start+0xfe>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d104      	bne.n	8004a5e <HAL_TIM_PWM_Start+0xd6>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a5c:	e013      	b.n	8004a86 <HAL_TIM_PWM_Start+0xfe>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b0c      	cmp	r3, #12
 8004a62:	d104      	bne.n	8004a6e <HAL_TIM_PWM_Start+0xe6>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a6c:	e00b      	b.n	8004a86 <HAL_TIM_PWM_Start+0xfe>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b10      	cmp	r3, #16
 8004a72:	d104      	bne.n	8004a7e <HAL_TIM_PWM_Start+0xf6>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a7c:	e003      	b.n	8004a86 <HAL_TIM_PWM_Start+0xfe>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2202      	movs	r2, #2
 8004a82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	6839      	ldr	r1, [r7, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fe7e 	bl	8005790 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a33      	ldr	r2, [pc, #204]	; (8004b68 <HAL_TIM_PWM_Start+0x1e0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d013      	beq.n	8004ac6 <HAL_TIM_PWM_Start+0x13e>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a32      	ldr	r2, [pc, #200]	; (8004b6c <HAL_TIM_PWM_Start+0x1e4>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d00e      	beq.n	8004ac6 <HAL_TIM_PWM_Start+0x13e>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a30      	ldr	r2, [pc, #192]	; (8004b70 <HAL_TIM_PWM_Start+0x1e8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d009      	beq.n	8004ac6 <HAL_TIM_PWM_Start+0x13e>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a2f      	ldr	r2, [pc, #188]	; (8004b74 <HAL_TIM_PWM_Start+0x1ec>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d004      	beq.n	8004ac6 <HAL_TIM_PWM_Start+0x13e>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a2d      	ldr	r2, [pc, #180]	; (8004b78 <HAL_TIM_PWM_Start+0x1f0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d101      	bne.n	8004aca <HAL_TIM_PWM_Start+0x142>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <HAL_TIM_PWM_Start+0x144>
 8004aca:	2300      	movs	r3, #0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d007      	beq.n	8004ae0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ade:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a20      	ldr	r2, [pc, #128]	; (8004b68 <HAL_TIM_PWM_Start+0x1e0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d018      	beq.n	8004b1c <HAL_TIM_PWM_Start+0x194>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af2:	d013      	beq.n	8004b1c <HAL_TIM_PWM_Start+0x194>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a20      	ldr	r2, [pc, #128]	; (8004b7c <HAL_TIM_PWM_Start+0x1f4>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d00e      	beq.n	8004b1c <HAL_TIM_PWM_Start+0x194>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a1f      	ldr	r2, [pc, #124]	; (8004b80 <HAL_TIM_PWM_Start+0x1f8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d009      	beq.n	8004b1c <HAL_TIM_PWM_Start+0x194>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a17      	ldr	r2, [pc, #92]	; (8004b6c <HAL_TIM_PWM_Start+0x1e4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d004      	beq.n	8004b1c <HAL_TIM_PWM_Start+0x194>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a16      	ldr	r2, [pc, #88]	; (8004b70 <HAL_TIM_PWM_Start+0x1e8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d115      	bne.n	8004b48 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689a      	ldr	r2, [r3, #8]
 8004b22:	4b18      	ldr	r3, [pc, #96]	; (8004b84 <HAL_TIM_PWM_Start+0x1fc>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b06      	cmp	r3, #6
 8004b2c:	d015      	beq.n	8004b5a <HAL_TIM_PWM_Start+0x1d2>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b34:	d011      	beq.n	8004b5a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0201 	orr.w	r2, r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b46:	e008      	b.n	8004b5a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	e000      	b.n	8004b5c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40012c00 	.word	0x40012c00
 8004b6c:	40013400 	.word	0x40013400
 8004b70:	40014000 	.word	0x40014000
 8004b74:	40014400 	.word	0x40014400
 8004b78:	40014800 	.word	0x40014800
 8004b7c:	40000400 	.word	0x40000400
 8004b80:	40000800 	.word	0x40000800
 8004b84:	00010007 	.word	0x00010007

08004b88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e0fd      	b.n	8004d9e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b14      	cmp	r3, #20
 8004bae:	f200 80f0 	bhi.w	8004d92 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004bb2:	a201      	add	r2, pc, #4	; (adr r2, 8004bb8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb8:	08004c0d 	.word	0x08004c0d
 8004bbc:	08004d93 	.word	0x08004d93
 8004bc0:	08004d93 	.word	0x08004d93
 8004bc4:	08004d93 	.word	0x08004d93
 8004bc8:	08004c4d 	.word	0x08004c4d
 8004bcc:	08004d93 	.word	0x08004d93
 8004bd0:	08004d93 	.word	0x08004d93
 8004bd4:	08004d93 	.word	0x08004d93
 8004bd8:	08004c8f 	.word	0x08004c8f
 8004bdc:	08004d93 	.word	0x08004d93
 8004be0:	08004d93 	.word	0x08004d93
 8004be4:	08004d93 	.word	0x08004d93
 8004be8:	08004ccf 	.word	0x08004ccf
 8004bec:	08004d93 	.word	0x08004d93
 8004bf0:	08004d93 	.word	0x08004d93
 8004bf4:	08004d93 	.word	0x08004d93
 8004bf8:	08004d11 	.word	0x08004d11
 8004bfc:	08004d93 	.word	0x08004d93
 8004c00:	08004d93 	.word	0x08004d93
 8004c04:	08004d93 	.word	0x08004d93
 8004c08:	08004d51 	.word	0x08004d51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68b9      	ldr	r1, [r7, #8]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fa2a 	bl	800506c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699a      	ldr	r2, [r3, #24]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0208 	orr.w	r2, r2, #8
 8004c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0204 	bic.w	r2, r2, #4
 8004c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6999      	ldr	r1, [r3, #24]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	691a      	ldr	r2, [r3, #16]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	619a      	str	r2, [r3, #24]
      break;
 8004c4a:	e0a3      	b.n	8004d94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68b9      	ldr	r1, [r7, #8]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fa9a 	bl	800518c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699a      	ldr	r2, [r3, #24]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6999      	ldr	r1, [r3, #24]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	021a      	lsls	r2, r3, #8
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	619a      	str	r2, [r3, #24]
      break;
 8004c8c:	e082      	b.n	8004d94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68b9      	ldr	r1, [r7, #8]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 fb03 	bl	80052a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f042 0208 	orr.w	r2, r2, #8
 8004ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69da      	ldr	r2, [r3, #28]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0204 	bic.w	r2, r2, #4
 8004cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69d9      	ldr	r1, [r3, #28]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	61da      	str	r2, [r3, #28]
      break;
 8004ccc:	e062      	b.n	8004d94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68b9      	ldr	r1, [r7, #8]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fb6b 	bl	80053b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69da      	ldr	r2, [r3, #28]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69da      	ldr	r2, [r3, #28]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69d9      	ldr	r1, [r3, #28]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	021a      	lsls	r2, r3, #8
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	61da      	str	r2, [r3, #28]
      break;
 8004d0e:	e041      	b.n	8004d94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fbd4 	bl	80054c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0208 	orr.w	r2, r2, #8
 8004d2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0204 	bic.w	r2, r2, #4
 8004d3a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	691a      	ldr	r2, [r3, #16]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004d4e:	e021      	b.n	8004d94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fc18 	bl	800558c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d7a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	021a      	lsls	r2, r3, #8
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004d90:	e000      	b.n	8004d94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004d92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop

08004da8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_TIM_ConfigClockSource+0x18>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e0b9      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x18c>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004dde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004de2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b70      	cmp	r3, #112	; 0x70
 8004dfa:	d02e      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0xb2>
 8004dfc:	2b70      	cmp	r3, #112	; 0x70
 8004dfe:	d812      	bhi.n	8004e26 <HAL_TIM_ConfigClockSource+0x7e>
 8004e00:	2b30      	cmp	r3, #48	; 0x30
 8004e02:	f000 8084 	beq.w	8004f0e <HAL_TIM_ConfigClockSource+0x166>
 8004e06:	2b30      	cmp	r3, #48	; 0x30
 8004e08:	d806      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x70>
 8004e0a:	2b10      	cmp	r3, #16
 8004e0c:	d07f      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0x166>
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	d07d      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0x166>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d07b      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e16:	e084      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8004e18:	2b50      	cmp	r3, #80	; 0x50
 8004e1a:	d048      	beq.n	8004eae <HAL_TIM_ConfigClockSource+0x106>
 8004e1c:	2b60      	cmp	r3, #96	; 0x60
 8004e1e:	d056      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x126>
 8004e20:	2b40      	cmp	r3, #64	; 0x40
 8004e22:	d064      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0x146>
      break;
 8004e24:	e07d      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8004e26:	4a45      	ldr	r2, [pc, #276]	; (8004f3c <HAL_TIM_ConfigClockSource+0x194>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d070      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0x166>
 8004e2c:	4a43      	ldr	r2, [pc, #268]	; (8004f3c <HAL_TIM_ConfigClockSource+0x194>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d809      	bhi.n	8004e46 <HAL_TIM_ConfigClockSource+0x9e>
 8004e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e36:	d027      	beq.n	8004e88 <HAL_TIM_ConfigClockSource+0xe0>
 8004e38:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004e3c:	d067      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0x166>
 8004e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e42:	d06d      	beq.n	8004f20 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004e44:	e06d      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8004e46:	4a3e      	ldr	r2, [pc, #248]	; (8004f40 <HAL_TIM_ConfigClockSource+0x198>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d060      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0x166>
 8004e4c:	4a3d      	ldr	r2, [pc, #244]	; (8004f44 <HAL_TIM_ConfigClockSource+0x19c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d05d      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0x166>
 8004e52:	4a3d      	ldr	r2, [pc, #244]	; (8004f48 <HAL_TIM_ConfigClockSource+0x1a0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d05a      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0x166>
      break;
 8004e58:	e063      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	6899      	ldr	r1, [r3, #8]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f000 fc71 	bl	8005750 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	609a      	str	r2, [r3, #8]
      break;
 8004e86:	e04c      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6818      	ldr	r0, [r3, #0]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	6899      	ldr	r1, [r3, #8]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f000 fc5a 	bl	8005750 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eaa:	609a      	str	r2, [r3, #8]
      break;
 8004eac:	e039      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6859      	ldr	r1, [r3, #4]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f000 fbcc 	bl	8005658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2150      	movs	r1, #80	; 0x50
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fc25 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 8004ecc:	e029      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	6859      	ldr	r1, [r3, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	461a      	mov	r2, r3
 8004edc:	f000 fbeb 	bl	80056b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2160      	movs	r1, #96	; 0x60
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fc15 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 8004eec:	e019      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6818      	ldr	r0, [r3, #0]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	6859      	ldr	r1, [r3, #4]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	461a      	mov	r2, r3
 8004efc:	f000 fbac 	bl	8005658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2140      	movs	r1, #64	; 0x40
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fc05 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 8004f0c:	e009      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4619      	mov	r1, r3
 8004f18:	4610      	mov	r0, r2
 8004f1a:	f000 fbfc 	bl	8005716 <TIM_ITRx_SetConfig>
        break;
 8004f1e:	e000      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8004f20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	00100020 	.word	0x00100020
 8004f40:	00100040 	.word	0x00100040
 8004f44:	00100070 	.word	0x00100070
 8004f48:	00100030 	.word	0x00100030

08004f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a3c      	ldr	r2, [pc, #240]	; (8005050 <TIM_Base_SetConfig+0x104>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00f      	beq.n	8004f84 <TIM_Base_SetConfig+0x38>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6a:	d00b      	beq.n	8004f84 <TIM_Base_SetConfig+0x38>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a39      	ldr	r2, [pc, #228]	; (8005054 <TIM_Base_SetConfig+0x108>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d007      	beq.n	8004f84 <TIM_Base_SetConfig+0x38>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a38      	ldr	r2, [pc, #224]	; (8005058 <TIM_Base_SetConfig+0x10c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <TIM_Base_SetConfig+0x38>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a37      	ldr	r2, [pc, #220]	; (800505c <TIM_Base_SetConfig+0x110>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d108      	bne.n	8004f96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a2d      	ldr	r2, [pc, #180]	; (8005050 <TIM_Base_SetConfig+0x104>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01b      	beq.n	8004fd6 <TIM_Base_SetConfig+0x8a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa4:	d017      	beq.n	8004fd6 <TIM_Base_SetConfig+0x8a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a2a      	ldr	r2, [pc, #168]	; (8005054 <TIM_Base_SetConfig+0x108>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d013      	beq.n	8004fd6 <TIM_Base_SetConfig+0x8a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a29      	ldr	r2, [pc, #164]	; (8005058 <TIM_Base_SetConfig+0x10c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00f      	beq.n	8004fd6 <TIM_Base_SetConfig+0x8a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a28      	ldr	r2, [pc, #160]	; (800505c <TIM_Base_SetConfig+0x110>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00b      	beq.n	8004fd6 <TIM_Base_SetConfig+0x8a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a27      	ldr	r2, [pc, #156]	; (8005060 <TIM_Base_SetConfig+0x114>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d007      	beq.n	8004fd6 <TIM_Base_SetConfig+0x8a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a26      	ldr	r2, [pc, #152]	; (8005064 <TIM_Base_SetConfig+0x118>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d003      	beq.n	8004fd6 <TIM_Base_SetConfig+0x8a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a25      	ldr	r2, [pc, #148]	; (8005068 <TIM_Base_SetConfig+0x11c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d108      	bne.n	8004fe8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a10      	ldr	r2, [pc, #64]	; (8005050 <TIM_Base_SetConfig+0x104>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00f      	beq.n	8005034 <TIM_Base_SetConfig+0xe8>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a11      	ldr	r2, [pc, #68]	; (800505c <TIM_Base_SetConfig+0x110>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00b      	beq.n	8005034 <TIM_Base_SetConfig+0xe8>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a10      	ldr	r2, [pc, #64]	; (8005060 <TIM_Base_SetConfig+0x114>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d007      	beq.n	8005034 <TIM_Base_SetConfig+0xe8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a0f      	ldr	r2, [pc, #60]	; (8005064 <TIM_Base_SetConfig+0x118>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d003      	beq.n	8005034 <TIM_Base_SetConfig+0xe8>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a0e      	ldr	r2, [pc, #56]	; (8005068 <TIM_Base_SetConfig+0x11c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d103      	bne.n	800503c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	615a      	str	r2, [r3, #20]
}
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	40012c00 	.word	0x40012c00
 8005054:	40000400 	.word	0x40000400
 8005058:	40000800 	.word	0x40000800
 800505c:	40013400 	.word	0x40013400
 8005060:	40014000 	.word	0x40014000
 8005064:	40014400 	.word	0x40014400
 8005068:	40014800 	.word	0x40014800

0800506c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	f023 0201 	bic.w	r2, r3, #1
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800509a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0303 	bic.w	r3, r3, #3
 80050a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f023 0302 	bic.w	r3, r3, #2
 80050b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a2c      	ldr	r2, [pc, #176]	; (8005178 <TIM_OC1_SetConfig+0x10c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00f      	beq.n	80050ec <TIM_OC1_SetConfig+0x80>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a2b      	ldr	r2, [pc, #172]	; (800517c <TIM_OC1_SetConfig+0x110>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00b      	beq.n	80050ec <TIM_OC1_SetConfig+0x80>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a2a      	ldr	r2, [pc, #168]	; (8005180 <TIM_OC1_SetConfig+0x114>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d007      	beq.n	80050ec <TIM_OC1_SetConfig+0x80>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a29      	ldr	r2, [pc, #164]	; (8005184 <TIM_OC1_SetConfig+0x118>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_OC1_SetConfig+0x80>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a28      	ldr	r2, [pc, #160]	; (8005188 <TIM_OC1_SetConfig+0x11c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d10c      	bne.n	8005106 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f023 0308 	bic.w	r3, r3, #8
 80050f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f023 0304 	bic.w	r3, r3, #4
 8005104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a1b      	ldr	r2, [pc, #108]	; (8005178 <TIM_OC1_SetConfig+0x10c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00f      	beq.n	800512e <TIM_OC1_SetConfig+0xc2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a1a      	ldr	r2, [pc, #104]	; (800517c <TIM_OC1_SetConfig+0x110>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00b      	beq.n	800512e <TIM_OC1_SetConfig+0xc2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a19      	ldr	r2, [pc, #100]	; (8005180 <TIM_OC1_SetConfig+0x114>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d007      	beq.n	800512e <TIM_OC1_SetConfig+0xc2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a18      	ldr	r2, [pc, #96]	; (8005184 <TIM_OC1_SetConfig+0x118>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d003      	beq.n	800512e <TIM_OC1_SetConfig+0xc2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a17      	ldr	r2, [pc, #92]	; (8005188 <TIM_OC1_SetConfig+0x11c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d111      	bne.n	8005152 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800513c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	621a      	str	r2, [r3, #32]
}
 800516c:	bf00      	nop
 800516e:	371c      	adds	r7, #28
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	40012c00 	.word	0x40012c00
 800517c:	40013400 	.word	0x40013400
 8005180:	40014000 	.word	0x40014000
 8005184:	40014400 	.word	0x40014400
 8005188:	40014800 	.word	0x40014800

0800518c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f023 0210 	bic.w	r2, r3, #16
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f023 0320 	bic.w	r3, r3, #32
 80051da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a28      	ldr	r2, [pc, #160]	; (800528c <TIM_OC2_SetConfig+0x100>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d003      	beq.n	80051f8 <TIM_OC2_SetConfig+0x6c>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a27      	ldr	r2, [pc, #156]	; (8005290 <TIM_OC2_SetConfig+0x104>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d10d      	bne.n	8005214 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005212:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a1d      	ldr	r2, [pc, #116]	; (800528c <TIM_OC2_SetConfig+0x100>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00f      	beq.n	800523c <TIM_OC2_SetConfig+0xb0>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a1c      	ldr	r2, [pc, #112]	; (8005290 <TIM_OC2_SetConfig+0x104>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00b      	beq.n	800523c <TIM_OC2_SetConfig+0xb0>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a1b      	ldr	r2, [pc, #108]	; (8005294 <TIM_OC2_SetConfig+0x108>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d007      	beq.n	800523c <TIM_OC2_SetConfig+0xb0>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a1a      	ldr	r2, [pc, #104]	; (8005298 <TIM_OC2_SetConfig+0x10c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d003      	beq.n	800523c <TIM_OC2_SetConfig+0xb0>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a19      	ldr	r2, [pc, #100]	; (800529c <TIM_OC2_SetConfig+0x110>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d113      	bne.n	8005264 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005242:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800524a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	621a      	str	r2, [r3, #32]
}
 800527e:	bf00      	nop
 8005280:	371c      	adds	r7, #28
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40012c00 	.word	0x40012c00
 8005290:	40013400 	.word	0x40013400
 8005294:	40014000 	.word	0x40014000
 8005298:	40014400 	.word	0x40014400
 800529c:	40014800 	.word	0x40014800

080052a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0303 	bic.w	r3, r3, #3
 80052da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a27      	ldr	r2, [pc, #156]	; (800539c <TIM_OC3_SetConfig+0xfc>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d003      	beq.n	800530a <TIM_OC3_SetConfig+0x6a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a26      	ldr	r2, [pc, #152]	; (80053a0 <TIM_OC3_SetConfig+0x100>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d10d      	bne.n	8005326 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005310:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	021b      	lsls	r3, r3, #8
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	4313      	orrs	r3, r2
 800531c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a1c      	ldr	r2, [pc, #112]	; (800539c <TIM_OC3_SetConfig+0xfc>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00f      	beq.n	800534e <TIM_OC3_SetConfig+0xae>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a1b      	ldr	r2, [pc, #108]	; (80053a0 <TIM_OC3_SetConfig+0x100>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00b      	beq.n	800534e <TIM_OC3_SetConfig+0xae>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a1a      	ldr	r2, [pc, #104]	; (80053a4 <TIM_OC3_SetConfig+0x104>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d007      	beq.n	800534e <TIM_OC3_SetConfig+0xae>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a19      	ldr	r2, [pc, #100]	; (80053a8 <TIM_OC3_SetConfig+0x108>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d003      	beq.n	800534e <TIM_OC3_SetConfig+0xae>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a18      	ldr	r2, [pc, #96]	; (80053ac <TIM_OC3_SetConfig+0x10c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d113      	bne.n	8005376 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800535c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	621a      	str	r2, [r3, #32]
}
 8005390:	bf00      	nop
 8005392:	371c      	adds	r7, #28
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	40012c00 	.word	0x40012c00
 80053a0:	40013400 	.word	0x40013400
 80053a4:	40014000 	.word	0x40014000
 80053a8:	40014400 	.word	0x40014400
 80053ac:	40014800 	.word	0x40014800

080053b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	021b      	lsls	r3, r3, #8
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	031b      	lsls	r3, r3, #12
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	4313      	orrs	r3, r2
 800540a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a28      	ldr	r2, [pc, #160]	; (80054b0 <TIM_OC4_SetConfig+0x100>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d003      	beq.n	800541c <TIM_OC4_SetConfig+0x6c>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a27      	ldr	r2, [pc, #156]	; (80054b4 <TIM_OC4_SetConfig+0x104>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d10d      	bne.n	8005438 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	031b      	lsls	r3, r3, #12
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4313      	orrs	r3, r2
 800542e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005436:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a1d      	ldr	r2, [pc, #116]	; (80054b0 <TIM_OC4_SetConfig+0x100>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d00f      	beq.n	8005460 <TIM_OC4_SetConfig+0xb0>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a1c      	ldr	r2, [pc, #112]	; (80054b4 <TIM_OC4_SetConfig+0x104>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d00b      	beq.n	8005460 <TIM_OC4_SetConfig+0xb0>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a1b      	ldr	r2, [pc, #108]	; (80054b8 <TIM_OC4_SetConfig+0x108>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d007      	beq.n	8005460 <TIM_OC4_SetConfig+0xb0>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a1a      	ldr	r2, [pc, #104]	; (80054bc <TIM_OC4_SetConfig+0x10c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d003      	beq.n	8005460 <TIM_OC4_SetConfig+0xb0>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a19      	ldr	r2, [pc, #100]	; (80054c0 <TIM_OC4_SetConfig+0x110>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d113      	bne.n	8005488 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005466:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800546e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	019b      	lsls	r3, r3, #6
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	4313      	orrs	r3, r2
 800547a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	019b      	lsls	r3, r3, #6
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4313      	orrs	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	621a      	str	r2, [r3, #32]
}
 80054a2:	bf00      	nop
 80054a4:	371c      	adds	r7, #28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	40012c00 	.word	0x40012c00
 80054b4:	40013400 	.word	0x40013400
 80054b8:	40014000 	.word	0x40014000
 80054bc:	40014400 	.word	0x40014400
 80054c0:	40014800 	.word	0x40014800

080054c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005508:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	041b      	lsls	r3, r3, #16
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a17      	ldr	r2, [pc, #92]	; (8005578 <TIM_OC5_SetConfig+0xb4>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00f      	beq.n	800553e <TIM_OC5_SetConfig+0x7a>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a16      	ldr	r2, [pc, #88]	; (800557c <TIM_OC5_SetConfig+0xb8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00b      	beq.n	800553e <TIM_OC5_SetConfig+0x7a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a15      	ldr	r2, [pc, #84]	; (8005580 <TIM_OC5_SetConfig+0xbc>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d007      	beq.n	800553e <TIM_OC5_SetConfig+0x7a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a14      	ldr	r2, [pc, #80]	; (8005584 <TIM_OC5_SetConfig+0xc0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d003      	beq.n	800553e <TIM_OC5_SetConfig+0x7a>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a13      	ldr	r2, [pc, #76]	; (8005588 <TIM_OC5_SetConfig+0xc4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d109      	bne.n	8005552 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005544:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	021b      	lsls	r3, r3, #8
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	621a      	str	r2, [r3, #32]
}
 800556c:	bf00      	nop
 800556e:	371c      	adds	r7, #28
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	40012c00 	.word	0x40012c00
 800557c:	40013400 	.word	0x40013400
 8005580:	40014000 	.word	0x40014000
 8005584:	40014400 	.word	0x40014400
 8005588:	40014800 	.word	0x40014800

0800558c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	021b      	lsls	r3, r3, #8
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	051b      	lsls	r3, r3, #20
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	4313      	orrs	r3, r2
 80055de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a18      	ldr	r2, [pc, #96]	; (8005644 <TIM_OC6_SetConfig+0xb8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00f      	beq.n	8005608 <TIM_OC6_SetConfig+0x7c>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a17      	ldr	r2, [pc, #92]	; (8005648 <TIM_OC6_SetConfig+0xbc>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00b      	beq.n	8005608 <TIM_OC6_SetConfig+0x7c>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a16      	ldr	r2, [pc, #88]	; (800564c <TIM_OC6_SetConfig+0xc0>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d007      	beq.n	8005608 <TIM_OC6_SetConfig+0x7c>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a15      	ldr	r2, [pc, #84]	; (8005650 <TIM_OC6_SetConfig+0xc4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d003      	beq.n	8005608 <TIM_OC6_SetConfig+0x7c>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a14      	ldr	r2, [pc, #80]	; (8005654 <TIM_OC6_SetConfig+0xc8>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d109      	bne.n	800561c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800560e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	029b      	lsls	r3, r3, #10
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4313      	orrs	r3, r2
 800561a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40012c00 	.word	0x40012c00
 8005648:	40013400 	.word	0x40013400
 800564c:	40014000 	.word	0x40014000
 8005650:	40014400 	.word	0x40014400
 8005654:	40014800 	.word	0x40014800

08005658 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f023 0201 	bic.w	r2, r3, #1
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f023 030a 	bic.w	r3, r3, #10
 8005694:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4313      	orrs	r3, r2
 800569c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	621a      	str	r2, [r3, #32]
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b087      	sub	sp, #28
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f023 0210 	bic.w	r2, r3, #16
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	031b      	lsls	r3, r3, #12
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	621a      	str	r2, [r3, #32]
}
 800570a:	bf00      	nop
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005716:	b480      	push	{r7}
 8005718:	b085      	sub	sp, #20
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800572c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005730:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	f043 0307 	orr.w	r3, r3, #7
 800573c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	609a      	str	r2, [r3, #8]
}
 8005744:	bf00      	nop
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800576a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	021a      	lsls	r2, r3, #8
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	431a      	orrs	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4313      	orrs	r3, r2
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	609a      	str	r2, [r3, #8]
}
 8005784:	bf00      	nop
 8005786:	371c      	adds	r7, #28
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f003 031f 	and.w	r3, r3, #31
 80057a2:	2201      	movs	r2, #1
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6a1a      	ldr	r2, [r3, #32]
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	43db      	mvns	r3, r3
 80057b2:	401a      	ands	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6a1a      	ldr	r2, [r3, #32]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f003 031f 	and.w	r3, r3, #31
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	fa01 f303 	lsl.w	r3, r1, r3
 80057c8:	431a      	orrs	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	621a      	str	r2, [r3, #32]
}
 80057ce:	bf00      	nop
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
	...

080057dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e065      	b.n	80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a2c      	ldr	r2, [pc, #176]	; (80058cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d004      	beq.n	8005828 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a2b      	ldr	r2, [pc, #172]	; (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d108      	bne.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800582e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005844:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	4313      	orrs	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1b      	ldr	r2, [pc, #108]	; (80058cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d018      	beq.n	8005894 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586a:	d013      	beq.n	8005894 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a18      	ldr	r2, [pc, #96]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00e      	beq.n	8005894 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a17      	ldr	r2, [pc, #92]	; (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d009      	beq.n	8005894 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a12      	ldr	r2, [pc, #72]	; (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d004      	beq.n	8005894 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a13      	ldr	r2, [pc, #76]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d10c      	bne.n	80058ae <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800589a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	40012c00 	.word	0x40012c00
 80058d0:	40013400 	.word	0x40013400
 80058d4:	40000400 	.word	0x40000400
 80058d8:	40000800 	.word	0x40000800
 80058dc:	40014000 	.word	0x40014000

080058e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e087      	b.n	8005a0c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	4313      	orrs	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	4313      	orrs	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4313      	orrs	r3, r2
 800593a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	041b      	lsls	r3, r3, #16
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a27      	ldr	r2, [pc, #156]	; (8005a18 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d004      	beq.n	800598a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a25      	ldr	r2, [pc, #148]	; (8005a1c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d106      	bne.n	8005998 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1e      	ldr	r2, [pc, #120]	; (8005a18 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d004      	beq.n	80059ac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a1d      	ldr	r2, [pc, #116]	; (8005a1c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d126      	bne.n	80059fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b6:	051b      	lsls	r3, r3, #20
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	4313      	orrs	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a0e      	ldr	r2, [pc, #56]	; (8005a18 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d004      	beq.n	80059ec <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a0d      	ldr	r2, [pc, #52]	; (8005a1c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d106      	bne.n	80059fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	40012c00 	.word	0x40012c00
 8005a1c:	40013400 	.word	0x40013400

08005a20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a30:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005a34:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b085      	sub	sp, #20
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a56:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005a5a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a84:	b084      	sub	sp, #16
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	f107 0014 	add.w	r0, r7, #20
 8005a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	b004      	add	sp, #16
 8005ac4:	4770      	bx	lr
	...

08005ac8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b09b      	sub	sp, #108	; 0x6c
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	78db      	ldrb	r3, [r3, #3]
 8005af6:	2b03      	cmp	r3, #3
 8005af8:	d81f      	bhi.n	8005b3a <USB_ActivateEndpoint+0x72>
 8005afa:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <USB_ActivateEndpoint+0x38>)
 8005afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b00:	08005b11 	.word	0x08005b11
 8005b04:	08005b2d 	.word	0x08005b2d
 8005b08:	08005b43 	.word	0x08005b43
 8005b0c:	08005b1f 	.word	0x08005b1f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005b10:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b18:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b1c:	e012      	b.n	8005b44 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005b1e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b22:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005b26:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b2a:	e00b      	b.n	8005b44 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005b2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b34:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b38:	e004      	b.n	8005b44 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005b40:	e000      	b.n	8005b44 <USB_ActivateEndpoint+0x7c>
      break;
 8005b42:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	441a      	add	r2, r3
 8005b4e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	b21b      	sxth	r3, r3
 8005b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7e:	b21a      	sxth	r2, r3
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	b21b      	sxth	r3, r3
 8005b86:	4313      	orrs	r3, r2
 8005b88:	b21b      	sxth	r3, r3
 8005b8a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	441a      	add	r2, r3
 8005b98:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	7b1b      	ldrb	r3, [r3, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f040 8149 	bne.w	8005e4c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	785b      	ldrb	r3, [r3, #1]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 8084 	beq.w	8005ccc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	00da      	lsls	r2, r3, #3
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005be6:	613b      	str	r3, [r7, #16]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	88db      	ldrh	r3, [r3, #6]
 8005bec:	085b      	lsrs	r3, r3, #1
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	81fb      	strh	r3, [r7, #14]
 8005c06:	89fb      	ldrh	r3, [r7, #14]
 8005c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d01b      	beq.n	8005c48 <USB_ActivateEndpoint+0x180>
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c26:	81bb      	strh	r3, [r7, #12]
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	441a      	add	r2, r3
 8005c32:	89bb      	ldrh	r3, [r7, #12]
 8005c34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	78db      	ldrb	r3, [r3, #3]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d020      	beq.n	8005c92 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	881b      	ldrh	r3, [r3, #0]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c66:	813b      	strh	r3, [r7, #8]
 8005c68:	893b      	ldrh	r3, [r7, #8]
 8005c6a:	f083 0320 	eor.w	r3, r3, #32
 8005c6e:	813b      	strh	r3, [r7, #8]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	441a      	add	r2, r3
 8005c7a:	893b      	ldrh	r3, [r7, #8]
 8005c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	8013      	strh	r3, [r2, #0]
 8005c90:	e27f      	b.n	8006192 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ca8:	817b      	strh	r3, [r7, #10]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	441a      	add	r2, r3
 8005cb4:	897b      	ldrh	r3, [r7, #10]
 8005cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	8013      	strh	r3, [r2, #0]
 8005cca:	e262      	b.n	8006192 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	461a      	mov	r2, r3
 8005cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cdc:	4413      	add	r3, r2
 8005cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	00da      	lsls	r2, r3, #3
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	4413      	add	r3, r2
 8005cea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	88db      	ldrh	r3, [r3, #6]
 8005cf4:	085b      	lsrs	r3, r3, #1
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfe:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	627b      	str	r3, [r7, #36]	; 0x24
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	4413      	add	r3, r2
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	00da      	lsls	r2, r3, #3
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d22:	623b      	str	r3, [r7, #32]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d112      	bne.n	8005d52 <USB_ActivateEndpoint+0x28a>
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	801a      	strh	r2, [r3, #0]
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	801a      	strh	r2, [r3, #0]
 8005d50:	e02f      	b.n	8005db2 <USB_ActivateEndpoint+0x2ea>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	2b3e      	cmp	r3, #62	; 0x3e
 8005d58:	d813      	bhi.n	8005d82 <USB_ActivateEndpoint+0x2ba>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	085b      	lsrs	r3, r3, #1
 8005d60:	663b      	str	r3, [r7, #96]	; 0x60
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <USB_ActivateEndpoint+0x2ac>
 8005d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d70:	3301      	adds	r3, #1
 8005d72:	663b      	str	r3, [r7, #96]	; 0x60
 8005d74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	029b      	lsls	r3, r3, #10
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	801a      	strh	r2, [r3, #0]
 8005d80:	e017      	b.n	8005db2 <USB_ActivateEndpoint+0x2ea>
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	663b      	str	r3, [r7, #96]	; 0x60
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	f003 031f 	and.w	r3, r3, #31
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d102      	bne.n	8005d9c <USB_ActivateEndpoint+0x2d4>
 8005d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	663b      	str	r3, [r7, #96]	; 0x60
 8005d9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	029b      	lsls	r3, r3, #10
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	83fb      	strh	r3, [r7, #30]
 8005dc0:	8bfb      	ldrh	r3, [r7, #30]
 8005dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d01b      	beq.n	8005e02 <USB_ActivateEndpoint+0x33a>
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de0:	83bb      	strh	r3, [r7, #28]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	441a      	add	r2, r3
 8005dec:	8bbb      	ldrh	r3, [r7, #28]
 8005dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005df6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e18:	837b      	strh	r3, [r7, #26]
 8005e1a:	8b7b      	ldrh	r3, [r7, #26]
 8005e1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e20:	837b      	strh	r3, [r7, #26]
 8005e22:	8b7b      	ldrh	r3, [r7, #26]
 8005e24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e28:	837b      	strh	r3, [r7, #26]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	441a      	add	r2, r3
 8005e34:	8b7b      	ldrh	r3, [r7, #26]
 8005e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	8013      	strh	r3, [r2, #0]
 8005e4a:	e1a2      	b.n	8006192 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e62:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	441a      	add	r2, r3
 8005e70:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005e74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e7c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e98:	4413      	add	r3, r2
 8005e9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	00da      	lsls	r2, r3, #3
 8005ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eaa:	657b      	str	r3, [r7, #84]	; 0x54
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	891b      	ldrh	r3, [r3, #8]
 8005eb0:	085b      	lsrs	r3, r3, #1
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eba:	801a      	strh	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	653b      	str	r3, [r7, #80]	; 0x50
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	461a      	mov	r2, r3
 8005eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ecc:	4413      	add	r3, r2
 8005ece:	653b      	str	r3, [r7, #80]	; 0x50
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	00da      	lsls	r2, r3, #3
 8005ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ed8:	4413      	add	r3, r2
 8005eda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	895b      	ldrh	r3, [r3, #10]
 8005ee4:	085b      	lsrs	r3, r3, #1
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eee:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	785b      	ldrb	r3, [r3, #1]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f040 8091 	bne.w	800601c <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005f08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d01b      	beq.n	8005f4a <USB_ActivateEndpoint+0x482>
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f28:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	441a      	add	r2, r3
 8005f34:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	873b      	strh	r3, [r7, #56]	; 0x38
 8005f58:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d01b      	beq.n	8005f9a <USB_ActivateEndpoint+0x4d2>
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f78:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	441a      	add	r2, r3
 8005f84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005fb2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005fb4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fb8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005fba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005fbc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fc0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	441a      	add	r2, r3
 8005fcc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff8:	867b      	strh	r3, [r7, #50]	; 0x32
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	441a      	add	r2, r3
 8006004:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800600a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800600e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006016:	b29b      	uxth	r3, r3
 8006018:	8013      	strh	r3, [r2, #0]
 800601a:	e0ba      	b.n	8006192 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800602c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d01d      	beq.n	8006074 <USB_ActivateEndpoint+0x5ac>
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	b29b      	uxth	r3, r3
 8006046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800604a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	441a      	add	r2, r3
 800605c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006068:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800606c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006070:	b29b      	uxth	r3, r3
 8006072:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	881b      	ldrh	r3, [r3, #0]
 8006080:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006084:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608c:	2b00      	cmp	r3, #0
 800608e:	d01d      	beq.n	80060cc <USB_ActivateEndpoint+0x604>
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	441a      	add	r2, r3
 80060b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80060b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	78db      	ldrb	r3, [r3, #3]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d024      	beq.n	800611e <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80060ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060f2:	f083 0320 	eor.w	r3, r3, #32
 80060f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	441a      	add	r2, r3
 8006104:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800610c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006118:	b29b      	uxth	r3, r3
 800611a:	8013      	strh	r3, [r2, #0]
 800611c:	e01d      	b.n	800615a <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	b29b      	uxth	r3, r3
 800612c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006134:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	441a      	add	r2, r3
 8006142:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800614a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800614e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006156:	b29b      	uxth	r3, r3
 8006158:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	b29b      	uxth	r3, r3
 8006168:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800616c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006170:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	441a      	add	r2, r3
 800617c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800617e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800618a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800618e:	b29b      	uxth	r3, r3
 8006190:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006192:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006196:	4618      	mov	r0, r3
 8006198:	376c      	adds	r7, #108	; 0x6c
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop

080061a4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b08d      	sub	sp, #52	; 0x34
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	7b1b      	ldrb	r3, [r3, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f040 808e 	bne.w	80062d4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	785b      	ldrb	r3, [r3, #1]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d044      	beq.n	800624a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	81bb      	strh	r3, [r7, #12]
 80061ce:	89bb      	ldrh	r3, [r7, #12]
 80061d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d01b      	beq.n	8006210 <USB_DeactivateEndpoint+0x6c>
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	881b      	ldrh	r3, [r3, #0]
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ee:	817b      	strh	r3, [r7, #10]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	441a      	add	r2, r3
 80061fa:	897b      	ldrh	r3, [r7, #10]
 80061fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006208:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800620c:	b29b      	uxth	r3, r3
 800620e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	b29b      	uxth	r3, r3
 800621e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006226:	813b      	strh	r3, [r7, #8]
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	441a      	add	r2, r3
 8006232:	893b      	ldrh	r3, [r7, #8]
 8006234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800623c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006244:	b29b      	uxth	r3, r3
 8006246:	8013      	strh	r3, [r2, #0]
 8006248:	e192      	b.n	8006570 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	827b      	strh	r3, [r7, #18]
 8006258:	8a7b      	ldrh	r3, [r7, #18]
 800625a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d01b      	beq.n	800629a <USB_DeactivateEndpoint+0xf6>
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	881b      	ldrh	r3, [r3, #0]
 800626e:	b29b      	uxth	r3, r3
 8006270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006278:	823b      	strh	r3, [r7, #16]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	441a      	add	r2, r3
 8006284:	8a3b      	ldrh	r3, [r7, #16]
 8006286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800628a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800628e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006296:	b29b      	uxth	r3, r3
 8006298:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b0:	81fb      	strh	r3, [r7, #14]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	441a      	add	r2, r3
 80062bc:	89fb      	ldrh	r3, [r7, #14]
 80062be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	8013      	strh	r3, [r2, #0]
 80062d2:	e14d      	b.n	8006570 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	785b      	ldrb	r3, [r3, #1]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f040 80a5 	bne.w	8006428 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	843b      	strh	r3, [r7, #32]
 80062ec:	8c3b      	ldrh	r3, [r7, #32]
 80062ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d01b      	beq.n	800632e <USB_DeactivateEndpoint+0x18a>
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	b29b      	uxth	r3, r3
 8006304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630c:	83fb      	strh	r3, [r7, #30]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	441a      	add	r2, r3
 8006318:	8bfb      	ldrh	r3, [r7, #30]
 800631a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800631e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006322:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800632a:	b29b      	uxth	r3, r3
 800632c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	83bb      	strh	r3, [r7, #28]
 800633c:	8bbb      	ldrh	r3, [r7, #28]
 800633e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	d01b      	beq.n	800637e <USB_DeactivateEndpoint+0x1da>
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	881b      	ldrh	r3, [r3, #0]
 8006352:	b29b      	uxth	r3, r3
 8006354:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635c:	837b      	strh	r3, [r7, #26]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	441a      	add	r2, r3
 8006368:	8b7b      	ldrh	r3, [r7, #26]
 800636a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800636e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006376:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800637a:	b29b      	uxth	r3, r3
 800637c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	b29b      	uxth	r3, r3
 800638c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006394:	833b      	strh	r3, [r7, #24]
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	441a      	add	r2, r3
 80063a0:	8b3b      	ldrh	r3, [r7, #24]
 80063a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063cc:	82fb      	strh	r3, [r7, #22]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	441a      	add	r2, r3
 80063d8:	8afb      	ldrh	r3, [r7, #22]
 80063da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006404:	82bb      	strh	r3, [r7, #20]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	441a      	add	r2, r3
 8006410:	8abb      	ldrh	r3, [r7, #20]
 8006412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800641a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800641e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006422:	b29b      	uxth	r3, r3
 8006424:	8013      	strh	r3, [r2, #0]
 8006426:	e0a3      	b.n	8006570 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006436:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d01b      	beq.n	8006478 <USB_DeactivateEndpoint+0x2d4>
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	b29b      	uxth	r3, r3
 800644e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006456:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	441a      	add	r2, r3
 8006462:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800646c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006474:	b29b      	uxth	r3, r3
 8006476:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006486:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01b      	beq.n	80064c8 <USB_DeactivateEndpoint+0x324>
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	881b      	ldrh	r3, [r3, #0]
 800649c:	b29b      	uxth	r3, r3
 800649e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a6:	853b      	strh	r3, [r7, #40]	; 0x28
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	441a      	add	r2, r3
 80064b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	441a      	add	r2, r3
 80064ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	b29b      	uxth	r3, r3
 800650e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006516:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	441a      	add	r2, r3
 8006522:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800652c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006534:	b29b      	uxth	r3, r3
 8006536:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	b29b      	uxth	r3, r3
 8006546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800654a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	441a      	add	r2, r3
 800655a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800655c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656c:	b29b      	uxth	r3, r3
 800656e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3734      	adds	r7, #52	; 0x34
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b0c4      	sub	sp, #272	; 0x110
 8006582:	af00      	add	r7, sp, #0
 8006584:	1d3b      	adds	r3, r7, #4
 8006586:	6018      	str	r0, [r3, #0]
 8006588:	463b      	mov	r3, r7
 800658a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800658c:	463b      	mov	r3, r7
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	785b      	ldrb	r3, [r3, #1]
 8006592:	2b01      	cmp	r3, #1
 8006594:	f040 8566 	bne.w	8007064 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006598:	463b      	mov	r3, r7
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	699a      	ldr	r2, [r3, #24]
 800659e:	463b      	mov	r3, r7
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d905      	bls.n	80065b4 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80065a8:	463b      	mov	r3, r7
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80065b2:	e004      	b.n	80065be <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80065b4:	463b      	mov	r3, r7
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80065be:	463b      	mov	r3, r7
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	7b1b      	ldrb	r3, [r3, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d12c      	bne.n	8006622 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80065c8:	463b      	mov	r3, r7
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6959      	ldr	r1, [r3, #20]
 80065ce:	463b      	mov	r3, r7
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	88da      	ldrh	r2, [r3, #6]
 80065d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065d8:	b29b      	uxth	r3, r3
 80065da:	1d38      	adds	r0, r7, #4
 80065dc:	6800      	ldr	r0, [r0, #0]
 80065de:	f001 fa43 	bl	8007a68 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80065e2:	1d3b      	adds	r3, r7, #4
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	1d3b      	adds	r3, r7, #4
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	461a      	mov	r2, r3
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	4413      	add	r3, r2
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	463b      	mov	r3, r7
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	00da      	lsls	r2, r3, #3
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	4413      	add	r3, r2
 8006606:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800660a:	f107 0310 	add.w	r3, r7, #16
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006614:	b29a      	uxth	r2, r3
 8006616:	f107 0310 	add.w	r3, r7, #16
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	801a      	strh	r2, [r3, #0]
 800661e:	f000 bcec 	b.w	8006ffa <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006622:	463b      	mov	r3, r7
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	78db      	ldrb	r3, [r3, #3]
 8006628:	2b02      	cmp	r3, #2
 800662a:	f040 8356 	bne.w	8006cda <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800662e:	463b      	mov	r3, r7
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6a1a      	ldr	r2, [r3, #32]
 8006634:	463b      	mov	r3, r7
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	429a      	cmp	r2, r3
 800663c:	f240 82fa 	bls.w	8006c34 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006640:	1d3b      	adds	r3, r7, #4
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	463b      	mov	r3, r7
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	b29b      	uxth	r3, r3
 8006652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800665e:	1d3b      	adds	r3, r7, #4
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	463b      	mov	r3, r7
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	441a      	add	r2, r3
 800666c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006670:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006674:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006678:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800667c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006680:	b29b      	uxth	r3, r3
 8006682:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8006684:	463b      	mov	r3, r7
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800668e:	463b      	mov	r3, r7
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6a1a      	ldr	r2, [r3, #32]
 8006694:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006698:	1ad2      	subs	r2, r2, r3
 800669a:	463b      	mov	r3, r7
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80066a0:	1d3b      	adds	r3, r7, #4
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	463b      	mov	r3, r7
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f000 815e 	beq.w	8006978 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80066bc:	1d3b      	adds	r3, r7, #4
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	637b      	str	r3, [r7, #52]	; 0x34
 80066c2:	463b      	mov	r3, r7
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	785b      	ldrb	r3, [r3, #1]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d164      	bne.n	8006796 <USB_EPStartXfer+0x218>
 80066cc:	1d3b      	adds	r3, r7, #4
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d2:	1d3b      	adds	r3, r7, #4
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066da:	b29b      	uxth	r3, r3
 80066dc:	461a      	mov	r2, r3
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	4413      	add	r3, r2
 80066e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066e4:	463b      	mov	r3, r7
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	00da      	lsls	r2, r3, #3
 80066ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ee:	4413      	add	r3, r2
 80066f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80066f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d112      	bne.n	8006724 <USB_EPStartXfer+0x1a6>
 80066fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	b29b      	uxth	r3, r3
 8006704:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006708:	b29a      	uxth	r2, r3
 800670a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670c:	801a      	strh	r2, [r3, #0]
 800670e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006710:	881b      	ldrh	r3, [r3, #0]
 8006712:	b29b      	uxth	r3, r3
 8006714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800671c:	b29a      	uxth	r2, r3
 800671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006720:	801a      	strh	r2, [r3, #0]
 8006722:	e054      	b.n	80067ce <USB_EPStartXfer+0x250>
 8006724:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006728:	2b3e      	cmp	r3, #62	; 0x3e
 800672a:	d817      	bhi.n	800675c <USB_EPStartXfer+0x1de>
 800672c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006730:	085b      	lsrs	r3, r3, #1
 8006732:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006736:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d004      	beq.n	800674c <USB_EPStartXfer+0x1ce>
 8006742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006746:	3301      	adds	r3, #1
 8006748:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800674c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006750:	b29b      	uxth	r3, r3
 8006752:	029b      	lsls	r3, r3, #10
 8006754:	b29a      	uxth	r2, r3
 8006756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006758:	801a      	strh	r2, [r3, #0]
 800675a:	e038      	b.n	80067ce <USB_EPStartXfer+0x250>
 800675c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006760:	095b      	lsrs	r3, r3, #5
 8006762:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006766:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800676a:	f003 031f 	and.w	r3, r3, #31
 800676e:	2b00      	cmp	r3, #0
 8006770:	d104      	bne.n	800677c <USB_EPStartXfer+0x1fe>
 8006772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006776:	3b01      	subs	r3, #1
 8006778:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800677c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006780:	b29b      	uxth	r3, r3
 8006782:	029b      	lsls	r3, r3, #10
 8006784:	b29b      	uxth	r3, r3
 8006786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800678a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800678e:	b29a      	uxth	r2, r3
 8006790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006792:	801a      	strh	r2, [r3, #0]
 8006794:	e01b      	b.n	80067ce <USB_EPStartXfer+0x250>
 8006796:	463b      	mov	r3, r7
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	785b      	ldrb	r3, [r3, #1]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d116      	bne.n	80067ce <USB_EPStartXfer+0x250>
 80067a0:	1d3b      	adds	r3, r7, #4
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	461a      	mov	r2, r3
 80067ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ae:	4413      	add	r3, r2
 80067b0:	637b      	str	r3, [r7, #52]	; 0x34
 80067b2:	463b      	mov	r3, r7
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	00da      	lsls	r2, r3, #3
 80067ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067bc:	4413      	add	r3, r2
 80067be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067c2:	633b      	str	r3, [r7, #48]	; 0x30
 80067c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80067ce:	463b      	mov	r3, r7
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	895b      	ldrh	r3, [r3, #10]
 80067d4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067d8:	463b      	mov	r3, r7
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6959      	ldr	r1, [r3, #20]
 80067de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80067e8:	1d38      	adds	r0, r7, #4
 80067ea:	6800      	ldr	r0, [r0, #0]
 80067ec:	f001 f93c 	bl	8007a68 <USB_WritePMA>
            ep->xfer_buff += len;
 80067f0:	463b      	mov	r3, r7
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	695a      	ldr	r2, [r3, #20]
 80067f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067fa:	441a      	add	r2, r3
 80067fc:	463b      	mov	r3, r7
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006802:	463b      	mov	r3, r7
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6a1a      	ldr	r2, [r3, #32]
 8006808:	463b      	mov	r3, r7
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	429a      	cmp	r2, r3
 8006810:	d90e      	bls.n	8006830 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8006812:	463b      	mov	r3, r7
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800681c:	463b      	mov	r3, r7
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6a1a      	ldr	r2, [r3, #32]
 8006822:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006826:	1ad2      	subs	r2, r2, r3
 8006828:	463b      	mov	r3, r7
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	621a      	str	r2, [r3, #32]
 800682e:	e008      	b.n	8006842 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006830:	463b      	mov	r3, r7
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800683a:	463b      	mov	r3, r7
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2200      	movs	r2, #0
 8006840:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006842:	463b      	mov	r3, r7
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	785b      	ldrb	r3, [r3, #1]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d164      	bne.n	8006916 <USB_EPStartXfer+0x398>
 800684c:	1d3b      	adds	r3, r7, #4
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	61fb      	str	r3, [r7, #28]
 8006852:	1d3b      	adds	r3, r7, #4
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800685a:	b29b      	uxth	r3, r3
 800685c:	461a      	mov	r2, r3
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	4413      	add	r3, r2
 8006862:	61fb      	str	r3, [r7, #28]
 8006864:	463b      	mov	r3, r7
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	00da      	lsls	r2, r3, #3
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	4413      	add	r3, r2
 8006870:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006874:	61bb      	str	r3, [r7, #24]
 8006876:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800687a:	2b00      	cmp	r3, #0
 800687c:	d112      	bne.n	80068a4 <USB_EPStartXfer+0x326>
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	881b      	ldrh	r3, [r3, #0]
 8006882:	b29b      	uxth	r3, r3
 8006884:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006888:	b29a      	uxth	r2, r3
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	801a      	strh	r2, [r3, #0]
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	b29b      	uxth	r3, r3
 8006894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800689c:	b29a      	uxth	r2, r3
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	801a      	strh	r2, [r3, #0]
 80068a2:	e057      	b.n	8006954 <USB_EPStartXfer+0x3d6>
 80068a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068a8:	2b3e      	cmp	r3, #62	; 0x3e
 80068aa:	d817      	bhi.n	80068dc <USB_EPStartXfer+0x35e>
 80068ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068b0:	085b      	lsrs	r3, r3, #1
 80068b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80068b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d004      	beq.n	80068cc <USB_EPStartXfer+0x34e>
 80068c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80068c6:	3301      	adds	r3, #1
 80068c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80068cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	029b      	lsls	r3, r3, #10
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	801a      	strh	r2, [r3, #0]
 80068da:	e03b      	b.n	8006954 <USB_EPStartXfer+0x3d6>
 80068dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068e0:	095b      	lsrs	r3, r3, #5
 80068e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80068e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068ea:	f003 031f 	and.w	r3, r3, #31
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d104      	bne.n	80068fc <USB_EPStartXfer+0x37e>
 80068f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80068f6:	3b01      	subs	r3, #1
 80068f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80068fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006900:	b29b      	uxth	r3, r3
 8006902:	029b      	lsls	r3, r3, #10
 8006904:	b29b      	uxth	r3, r3
 8006906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800690a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800690e:	b29a      	uxth	r2, r3
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	801a      	strh	r2, [r3, #0]
 8006914:	e01e      	b.n	8006954 <USB_EPStartXfer+0x3d6>
 8006916:	463b      	mov	r3, r7
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	785b      	ldrb	r3, [r3, #1]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d119      	bne.n	8006954 <USB_EPStartXfer+0x3d6>
 8006920:	1d3b      	adds	r3, r7, #4
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	627b      	str	r3, [r7, #36]	; 0x24
 8006926:	1d3b      	adds	r3, r7, #4
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800692e:	b29b      	uxth	r3, r3
 8006930:	461a      	mov	r2, r3
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	4413      	add	r3, r2
 8006936:	627b      	str	r3, [r7, #36]	; 0x24
 8006938:	463b      	mov	r3, r7
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	00da      	lsls	r2, r3, #3
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	4413      	add	r3, r2
 8006944:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006948:	623b      	str	r3, [r7, #32]
 800694a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800694e:	b29a      	uxth	r2, r3
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006954:	463b      	mov	r3, r7
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	891b      	ldrh	r3, [r3, #8]
 800695a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800695e:	463b      	mov	r3, r7
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6959      	ldr	r1, [r3, #20]
 8006964:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006968:	b29b      	uxth	r3, r3
 800696a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800696e:	1d38      	adds	r0, r7, #4
 8006970:	6800      	ldr	r0, [r0, #0]
 8006972:	f001 f879 	bl	8007a68 <USB_WritePMA>
 8006976:	e340      	b.n	8006ffa <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006978:	463b      	mov	r3, r7
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	785b      	ldrb	r3, [r3, #1]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d164      	bne.n	8006a4c <USB_EPStartXfer+0x4ce>
 8006982:	1d3b      	adds	r3, r7, #4
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006988:	1d3b      	adds	r3, r7, #4
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006990:	b29b      	uxth	r3, r3
 8006992:	461a      	mov	r2, r3
 8006994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006996:	4413      	add	r3, r2
 8006998:	64fb      	str	r3, [r7, #76]	; 0x4c
 800699a:	463b      	mov	r3, r7
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	00da      	lsls	r2, r3, #3
 80069a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a4:	4413      	add	r3, r2
 80069a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80069ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d112      	bne.n	80069da <USB_EPStartXfer+0x45c>
 80069b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069be:	b29a      	uxth	r2, r3
 80069c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069c2:	801a      	strh	r2, [r3, #0]
 80069c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069c6:	881b      	ldrh	r3, [r3, #0]
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069d6:	801a      	strh	r2, [r3, #0]
 80069d8:	e057      	b.n	8006a8a <USB_EPStartXfer+0x50c>
 80069da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069de:	2b3e      	cmp	r3, #62	; 0x3e
 80069e0:	d817      	bhi.n	8006a12 <USB_EPStartXfer+0x494>
 80069e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069e6:	085b      	lsrs	r3, r3, #1
 80069e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069f0:	f003 0301 	and.w	r3, r3, #1
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d004      	beq.n	8006a02 <USB_EPStartXfer+0x484>
 80069f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069fc:	3301      	adds	r3, #1
 80069fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	029b      	lsls	r3, r3, #10
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a0e:	801a      	strh	r2, [r3, #0]
 8006a10:	e03b      	b.n	8006a8a <USB_EPStartXfer+0x50c>
 8006a12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a16:	095b      	lsrs	r3, r3, #5
 8006a18:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a20:	f003 031f 	and.w	r3, r3, #31
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d104      	bne.n	8006a32 <USB_EPStartXfer+0x4b4>
 8006a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	029b      	lsls	r3, r3, #10
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a48:	801a      	strh	r2, [r3, #0]
 8006a4a:	e01e      	b.n	8006a8a <USB_EPStartXfer+0x50c>
 8006a4c:	463b      	mov	r3, r7
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	785b      	ldrb	r3, [r3, #1]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d119      	bne.n	8006a8a <USB_EPStartXfer+0x50c>
 8006a56:	1d3b      	adds	r3, r7, #4
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	657b      	str	r3, [r7, #84]	; 0x54
 8006a5c:	1d3b      	adds	r3, r7, #4
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	461a      	mov	r2, r3
 8006a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a6a:	4413      	add	r3, r2
 8006a6c:	657b      	str	r3, [r7, #84]	; 0x54
 8006a6e:	463b      	mov	r3, r7
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	00da      	lsls	r2, r3, #3
 8006a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a78:	4413      	add	r3, r2
 8006a7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a7e:	653b      	str	r3, [r7, #80]	; 0x50
 8006a80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a8a:	463b      	mov	r3, r7
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	891b      	ldrh	r3, [r3, #8]
 8006a90:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a94:	463b      	mov	r3, r7
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6959      	ldr	r1, [r3, #20]
 8006a9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006aa4:	1d38      	adds	r0, r7, #4
 8006aa6:	6800      	ldr	r0, [r0, #0]
 8006aa8:	f000 ffde 	bl	8007a68 <USB_WritePMA>
            ep->xfer_buff += len;
 8006aac:	463b      	mov	r3, r7
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	695a      	ldr	r2, [r3, #20]
 8006ab2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ab6:	441a      	add	r2, r3
 8006ab8:	463b      	mov	r3, r7
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006abe:	463b      	mov	r3, r7
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6a1a      	ldr	r2, [r3, #32]
 8006ac4:	463b      	mov	r3, r7
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d90e      	bls.n	8006aec <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8006ace:	463b      	mov	r3, r7
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006ad8:	463b      	mov	r3, r7
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6a1a      	ldr	r2, [r3, #32]
 8006ade:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ae2:	1ad2      	subs	r2, r2, r3
 8006ae4:	463b      	mov	r3, r7
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	621a      	str	r2, [r3, #32]
 8006aea:	e008      	b.n	8006afe <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8006aec:	463b      	mov	r3, r7
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006af6:	463b      	mov	r3, r7
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2200      	movs	r2, #0
 8006afc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006afe:	1d3b      	adds	r3, r7, #4
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	647b      	str	r3, [r7, #68]	; 0x44
 8006b04:	463b      	mov	r3, r7
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	785b      	ldrb	r3, [r3, #1]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d164      	bne.n	8006bd8 <USB_EPStartXfer+0x65a>
 8006b0e:	1d3b      	adds	r3, r7, #4
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b14:	1d3b      	adds	r3, r7, #4
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	461a      	mov	r2, r3
 8006b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b22:	4413      	add	r3, r2
 8006b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b26:	463b      	mov	r3, r7
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	00da      	lsls	r2, r3, #3
 8006b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b30:	4413      	add	r3, r2
 8006b32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b36:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d112      	bne.n	8006b66 <USB_EPStartXfer+0x5e8>
 8006b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b42:	881b      	ldrh	r3, [r3, #0]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4e:	801a      	strh	r2, [r3, #0]
 8006b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b62:	801a      	strh	r2, [r3, #0]
 8006b64:	e054      	b.n	8006c10 <USB_EPStartXfer+0x692>
 8006b66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b6a:	2b3e      	cmp	r3, #62	; 0x3e
 8006b6c:	d817      	bhi.n	8006b9e <USB_EPStartXfer+0x620>
 8006b6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b72:	085b      	lsrs	r3, r3, #1
 8006b74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d004      	beq.n	8006b8e <USB_EPStartXfer+0x610>
 8006b84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b88:	3301      	adds	r3, #1
 8006b8a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	029b      	lsls	r3, r3, #10
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9a:	801a      	strh	r2, [r3, #0]
 8006b9c:	e038      	b.n	8006c10 <USB_EPStartXfer+0x692>
 8006b9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ba2:	095b      	lsrs	r3, r3, #5
 8006ba4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ba8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bac:	f003 031f 	and.w	r3, r3, #31
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d104      	bne.n	8006bbe <USB_EPStartXfer+0x640>
 8006bb4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006bbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	029b      	lsls	r3, r3, #10
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd4:	801a      	strh	r2, [r3, #0]
 8006bd6:	e01b      	b.n	8006c10 <USB_EPStartXfer+0x692>
 8006bd8:	463b      	mov	r3, r7
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	785b      	ldrb	r3, [r3, #1]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d116      	bne.n	8006c10 <USB_EPStartXfer+0x692>
 8006be2:	1d3b      	adds	r3, r7, #4
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	461a      	mov	r2, r3
 8006bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bf0:	4413      	add	r3, r2
 8006bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8006bf4:	463b      	mov	r3, r7
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	00da      	lsls	r2, r3, #3
 8006bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bfe:	4413      	add	r3, r2
 8006c00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c04:	643b      	str	r3, [r7, #64]	; 0x40
 8006c06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c0e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c10:	463b      	mov	r3, r7
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	895b      	ldrh	r3, [r3, #10]
 8006c16:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c1a:	463b      	mov	r3, r7
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6959      	ldr	r1, [r3, #20]
 8006c20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006c2a:	1d38      	adds	r0, r7, #4
 8006c2c:	6800      	ldr	r0, [r0, #0]
 8006c2e:	f000 ff1b 	bl	8007a68 <USB_WritePMA>
 8006c32:	e1e2      	b.n	8006ffa <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8006c34:	463b      	mov	r3, r7
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006c3e:	1d3b      	adds	r3, r7, #4
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	463b      	mov	r3, r7
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	881b      	ldrh	r3, [r3, #0]
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c58:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006c5c:	1d3b      	adds	r3, r7, #4
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	463b      	mov	r3, r7
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	441a      	add	r2, r3
 8006c6a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c82:	1d3b      	adds	r3, r7, #4
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	663b      	str	r3, [r7, #96]	; 0x60
 8006c88:	1d3b      	adds	r3, r7, #4
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	461a      	mov	r2, r3
 8006c94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c96:	4413      	add	r3, r2
 8006c98:	663b      	str	r3, [r7, #96]	; 0x60
 8006c9a:	463b      	mov	r3, r7
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	00da      	lsls	r2, r3, #3
 8006ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006caa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cb4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006cb6:	463b      	mov	r3, r7
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	891b      	ldrh	r3, [r3, #8]
 8006cbc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cc0:	463b      	mov	r3, r7
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6959      	ldr	r1, [r3, #20]
 8006cc6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006cd0:	1d38      	adds	r0, r7, #4
 8006cd2:	6800      	ldr	r0, [r0, #0]
 8006cd4:	f000 fec8 	bl	8007a68 <USB_WritePMA>
 8006cd8:	e18f      	b.n	8006ffa <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006cda:	1d3b      	adds	r3, r7, #4
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	463b      	mov	r3, r7
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 808f 	beq.w	8006e14 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006cf6:	1d3b      	adds	r3, r7, #4
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cfc:	463b      	mov	r3, r7
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	785b      	ldrb	r3, [r3, #1]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d164      	bne.n	8006dd0 <USB_EPStartXfer+0x852>
 8006d06:	1d3b      	adds	r3, r7, #4
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	673b      	str	r3, [r7, #112]	; 0x70
 8006d0c:	1d3b      	adds	r3, r7, #4
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	461a      	mov	r2, r3
 8006d18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d1a:	4413      	add	r3, r2
 8006d1c:	673b      	str	r3, [r7, #112]	; 0x70
 8006d1e:	463b      	mov	r3, r7
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	00da      	lsls	r2, r3, #3
 8006d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d28:	4413      	add	r3, r2
 8006d2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d112      	bne.n	8006d5e <USB_EPStartXfer+0x7e0>
 8006d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d46:	801a      	strh	r2, [r3, #0]
 8006d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d5a:	801a      	strh	r2, [r3, #0]
 8006d5c:	e054      	b.n	8006e08 <USB_EPStartXfer+0x88a>
 8006d5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d62:	2b3e      	cmp	r3, #62	; 0x3e
 8006d64:	d817      	bhi.n	8006d96 <USB_EPStartXfer+0x818>
 8006d66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d6a:	085b      	lsrs	r3, r3, #1
 8006d6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d004      	beq.n	8006d86 <USB_EPStartXfer+0x808>
 8006d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d80:	3301      	adds	r3, #1
 8006d82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	029b      	lsls	r3, r3, #10
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d92:	801a      	strh	r2, [r3, #0]
 8006d94:	e038      	b.n	8006e08 <USB_EPStartXfer+0x88a>
 8006d96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d9a:	095b      	lsrs	r3, r3, #5
 8006d9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006da0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006da4:	f003 031f 	and.w	r3, r3, #31
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d104      	bne.n	8006db6 <USB_EPStartXfer+0x838>
 8006dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db0:	3b01      	subs	r3, #1
 8006db2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	029b      	lsls	r3, r3, #10
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dcc:	801a      	strh	r2, [r3, #0]
 8006dce:	e01b      	b.n	8006e08 <USB_EPStartXfer+0x88a>
 8006dd0:	463b      	mov	r3, r7
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	785b      	ldrb	r3, [r3, #1]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d116      	bne.n	8006e08 <USB_EPStartXfer+0x88a>
 8006dda:	1d3b      	adds	r3, r7, #4
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	461a      	mov	r2, r3
 8006de6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006de8:	4413      	add	r3, r2
 8006dea:	67bb      	str	r3, [r7, #120]	; 0x78
 8006dec:	463b      	mov	r3, r7
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	00da      	lsls	r2, r3, #3
 8006df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006df6:	4413      	add	r3, r2
 8006df8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006dfc:	677b      	str	r3, [r7, #116]	; 0x74
 8006dfe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006e08:	463b      	mov	r3, r7
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	895b      	ldrh	r3, [r3, #10]
 8006e0e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006e12:	e097      	b.n	8006f44 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e14:	463b      	mov	r3, r7
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	785b      	ldrb	r3, [r3, #1]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d168      	bne.n	8006ef0 <USB_EPStartXfer+0x972>
 8006e1e:	1d3b      	adds	r3, r7, #4
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e26:	1d3b      	adds	r3, r7, #4
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	461a      	mov	r2, r3
 8006e32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e36:	4413      	add	r3, r2
 8006e38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e3c:	463b      	mov	r3, r7
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	00da      	lsls	r2, r3, #3
 8006e44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e48:	4413      	add	r3, r2
 8006e4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d112      	bne.n	8006e7e <USB_EPStartXfer+0x900>
 8006e58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e5a:	881b      	ldrh	r3, [r3, #0]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e66:	801a      	strh	r2, [r3, #0]
 8006e68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e6a:	881b      	ldrh	r3, [r3, #0]
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e7a:	801a      	strh	r2, [r3, #0]
 8006e7c:	e05d      	b.n	8006f3a <USB_EPStartXfer+0x9bc>
 8006e7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e82:	2b3e      	cmp	r3, #62	; 0x3e
 8006e84:	d817      	bhi.n	8006eb6 <USB_EPStartXfer+0x938>
 8006e86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e8a:	085b      	lsrs	r3, r3, #1
 8006e8c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d004      	beq.n	8006ea6 <USB_EPStartXfer+0x928>
 8006e9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ea6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	029b      	lsls	r3, r3, #10
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006eb2:	801a      	strh	r2, [r3, #0]
 8006eb4:	e041      	b.n	8006f3a <USB_EPStartXfer+0x9bc>
 8006eb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006eba:	095b      	lsrs	r3, r3, #5
 8006ebc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ec0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ec4:	f003 031f 	and.w	r3, r3, #31
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d104      	bne.n	8006ed6 <USB_EPStartXfer+0x958>
 8006ecc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ed6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	029b      	lsls	r3, r3, #10
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006eec:	801a      	strh	r2, [r3, #0]
 8006eee:	e024      	b.n	8006f3a <USB_EPStartXfer+0x9bc>
 8006ef0:	463b      	mov	r3, r7
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	785b      	ldrb	r3, [r3, #1]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d11f      	bne.n	8006f3a <USB_EPStartXfer+0x9bc>
 8006efa:	1d3b      	adds	r3, r7, #4
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f02:	1d3b      	adds	r3, r7, #4
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f12:	4413      	add	r3, r2
 8006f14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f18:	463b      	mov	r3, r7
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	00da      	lsls	r2, r3, #3
 8006f20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f24:	4413      	add	r3, r2
 8006f26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f38:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f3a:	463b      	mov	r3, r7
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	891b      	ldrh	r3, [r3, #8]
 8006f40:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f44:	463b      	mov	r3, r7
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6959      	ldr	r1, [r3, #20]
 8006f4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006f54:	1d38      	adds	r0, r7, #4
 8006f56:	6800      	ldr	r0, [r0, #0]
 8006f58:	f000 fd86 	bl	8007a68 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006f5c:	463b      	mov	r3, r7
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	785b      	ldrb	r3, [r3, #1]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d122      	bne.n	8006fac <USB_EPStartXfer+0xa2e>
 8006f66:	1d3b      	adds	r3, r7, #4
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f80:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006f84:	1d3b      	adds	r3, r7, #4
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	463b      	mov	r3, r7
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	441a      	add	r2, r3
 8006f92:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fa2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	8013      	strh	r3, [r2, #0]
 8006faa:	e026      	b.n	8006ffa <USB_EPStartXfer+0xa7c>
 8006fac:	463b      	mov	r3, r7
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	785b      	ldrb	r3, [r3, #1]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d121      	bne.n	8006ffa <USB_EPStartXfer+0xa7c>
 8006fb6:	1d3b      	adds	r3, r7, #4
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	463b      	mov	r3, r7
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006fd4:	1d3b      	adds	r3, r7, #4
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	463b      	mov	r3, r7
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	441a      	add	r2, r3
 8006fe2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006ffa:	1d3b      	adds	r3, r7, #4
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	463b      	mov	r3, r7
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	b29b      	uxth	r3, r3
 800700c:	f107 020e 	add.w	r2, r7, #14
 8007010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007018:	8013      	strh	r3, [r2, #0]
 800701a:	f107 030e 	add.w	r3, r7, #14
 800701e:	f107 020e 	add.w	r2, r7, #14
 8007022:	8812      	ldrh	r2, [r2, #0]
 8007024:	f082 0210 	eor.w	r2, r2, #16
 8007028:	801a      	strh	r2, [r3, #0]
 800702a:	f107 030e 	add.w	r3, r7, #14
 800702e:	f107 020e 	add.w	r2, r7, #14
 8007032:	8812      	ldrh	r2, [r2, #0]
 8007034:	f082 0220 	eor.w	r2, r2, #32
 8007038:	801a      	strh	r2, [r3, #0]
 800703a:	1d3b      	adds	r3, r7, #4
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	463b      	mov	r3, r7
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	441a      	add	r2, r3
 8007048:	f107 030e 	add.w	r3, r7, #14
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800705a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800705e:	b29b      	uxth	r3, r3
 8007060:	8013      	strh	r3, [r2, #0]
 8007062:	e3b5      	b.n	80077d0 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007064:	463b      	mov	r3, r7
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	7b1b      	ldrb	r3, [r3, #12]
 800706a:	2b00      	cmp	r3, #0
 800706c:	f040 8090 	bne.w	8007190 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8007070:	463b      	mov	r3, r7
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	699a      	ldr	r2, [r3, #24]
 8007076:	463b      	mov	r3, r7
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	429a      	cmp	r2, r3
 800707e:	d90e      	bls.n	800709e <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8007080:	463b      	mov	r3, r7
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800708a:	463b      	mov	r3, r7
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	699a      	ldr	r2, [r3, #24]
 8007090:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007094:	1ad2      	subs	r2, r2, r3
 8007096:	463b      	mov	r3, r7
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	619a      	str	r2, [r3, #24]
 800709c:	e008      	b.n	80070b0 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 800709e:	463b      	mov	r3, r7
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 80070a8:	463b      	mov	r3, r7
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2200      	movs	r2, #0
 80070ae:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80070b0:	1d3b      	adds	r3, r7, #4
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070b8:	1d3b      	adds	r3, r7, #4
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	461a      	mov	r2, r3
 80070c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070c8:	4413      	add	r3, r2
 80070ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070ce:	463b      	mov	r3, r7
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	00da      	lsls	r2, r3, #3
 80070d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070da:	4413      	add	r3, r2
 80070dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d116      	bne.n	800711a <USB_EPStartXfer+0xb9c>
 80070ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070fe:	801a      	strh	r2, [r3, #0]
 8007100:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	b29b      	uxth	r3, r3
 8007108:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800710c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007110:	b29a      	uxth	r2, r3
 8007112:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007116:	801a      	strh	r2, [r3, #0]
 8007118:	e32c      	b.n	8007774 <USB_EPStartXfer+0x11f6>
 800711a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800711e:	2b3e      	cmp	r3, #62	; 0x3e
 8007120:	d818      	bhi.n	8007154 <USB_EPStartXfer+0xbd6>
 8007122:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007126:	085b      	lsrs	r3, r3, #1
 8007128:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800712c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	d004      	beq.n	8007142 <USB_EPStartXfer+0xbc4>
 8007138:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800713c:	3301      	adds	r3, #1
 800713e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007142:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007146:	b29b      	uxth	r3, r3
 8007148:	029b      	lsls	r3, r3, #10
 800714a:	b29a      	uxth	r2, r3
 800714c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007150:	801a      	strh	r2, [r3, #0]
 8007152:	e30f      	b.n	8007774 <USB_EPStartXfer+0x11f6>
 8007154:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007158:	095b      	lsrs	r3, r3, #5
 800715a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800715e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007162:	f003 031f 	and.w	r3, r3, #31
 8007166:	2b00      	cmp	r3, #0
 8007168:	d104      	bne.n	8007174 <USB_EPStartXfer+0xbf6>
 800716a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800716e:	3b01      	subs	r3, #1
 8007170:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007174:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007178:	b29b      	uxth	r3, r3
 800717a:	029b      	lsls	r3, r3, #10
 800717c:	b29b      	uxth	r3, r3
 800717e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007182:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007186:	b29a      	uxth	r2, r3
 8007188:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800718c:	801a      	strh	r2, [r3, #0]
 800718e:	e2f1      	b.n	8007774 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8007190:	463b      	mov	r3, r7
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	78db      	ldrb	r3, [r3, #3]
 8007196:	2b02      	cmp	r3, #2
 8007198:	f040 818f 	bne.w	80074ba <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800719c:	463b      	mov	r3, r7
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	785b      	ldrb	r3, [r3, #1]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d175      	bne.n	8007292 <USB_EPStartXfer+0xd14>
 80071a6:	1d3b      	adds	r3, r7, #4
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071ae:	1d3b      	adds	r3, r7, #4
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	461a      	mov	r2, r3
 80071ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071be:	4413      	add	r3, r2
 80071c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071c4:	463b      	mov	r3, r7
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	00da      	lsls	r2, r3, #3
 80071cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071d0:	4413      	add	r3, r2
 80071d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071da:	463b      	mov	r3, r7
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d116      	bne.n	8007212 <USB_EPStartXfer+0xc94>
 80071e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071f6:	801a      	strh	r2, [r3, #0]
 80071f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071fc:	881b      	ldrh	r3, [r3, #0]
 80071fe:	b29b      	uxth	r3, r3
 8007200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007208:	b29a      	uxth	r2, r3
 800720a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800720e:	801a      	strh	r2, [r3, #0]
 8007210:	e065      	b.n	80072de <USB_EPStartXfer+0xd60>
 8007212:	463b      	mov	r3, r7
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	2b3e      	cmp	r3, #62	; 0x3e
 800721a:	d81a      	bhi.n	8007252 <USB_EPStartXfer+0xcd4>
 800721c:	463b      	mov	r3, r7
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	085b      	lsrs	r3, r3, #1
 8007224:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007228:	463b      	mov	r3, r7
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d004      	beq.n	8007240 <USB_EPStartXfer+0xcc2>
 8007236:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800723a:	3301      	adds	r3, #1
 800723c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007240:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007244:	b29b      	uxth	r3, r3
 8007246:	029b      	lsls	r3, r3, #10
 8007248:	b29a      	uxth	r2, r3
 800724a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800724e:	801a      	strh	r2, [r3, #0]
 8007250:	e045      	b.n	80072de <USB_EPStartXfer+0xd60>
 8007252:	463b      	mov	r3, r7
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	095b      	lsrs	r3, r3, #5
 800725a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800725e:	463b      	mov	r3, r7
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	f003 031f 	and.w	r3, r3, #31
 8007268:	2b00      	cmp	r3, #0
 800726a:	d104      	bne.n	8007276 <USB_EPStartXfer+0xcf8>
 800726c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007270:	3b01      	subs	r3, #1
 8007272:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007276:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800727a:	b29b      	uxth	r3, r3
 800727c:	029b      	lsls	r3, r3, #10
 800727e:	b29b      	uxth	r3, r3
 8007280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007288:	b29a      	uxth	r2, r3
 800728a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800728e:	801a      	strh	r2, [r3, #0]
 8007290:	e025      	b.n	80072de <USB_EPStartXfer+0xd60>
 8007292:	463b      	mov	r3, r7
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	785b      	ldrb	r3, [r3, #1]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d120      	bne.n	80072de <USB_EPStartXfer+0xd60>
 800729c:	1d3b      	adds	r3, r7, #4
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072a4:	1d3b      	adds	r3, r7, #4
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	461a      	mov	r2, r3
 80072b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072b4:	4413      	add	r3, r2
 80072b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072ba:	463b      	mov	r3, r7
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	00da      	lsls	r2, r3, #3
 80072c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072c6:	4413      	add	r3, r2
 80072c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072d0:	463b      	mov	r3, r7
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80072dc:	801a      	strh	r2, [r3, #0]
 80072de:	1d3b      	adds	r3, r7, #4
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80072e6:	463b      	mov	r3, r7
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	785b      	ldrb	r3, [r3, #1]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d175      	bne.n	80073dc <USB_EPStartXfer+0xe5e>
 80072f0:	1d3b      	adds	r3, r7, #4
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80072f8:	1d3b      	adds	r3, r7, #4
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007300:	b29b      	uxth	r3, r3
 8007302:	461a      	mov	r2, r3
 8007304:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007308:	4413      	add	r3, r2
 800730a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800730e:	463b      	mov	r3, r7
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	00da      	lsls	r2, r3, #3
 8007316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800731a:	4413      	add	r3, r2
 800731c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007320:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007324:	463b      	mov	r3, r7
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d116      	bne.n	800735c <USB_EPStartXfer+0xdde>
 800732e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007332:	881b      	ldrh	r3, [r3, #0]
 8007334:	b29b      	uxth	r3, r3
 8007336:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800733a:	b29a      	uxth	r2, r3
 800733c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007340:	801a      	strh	r2, [r3, #0]
 8007342:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	b29b      	uxth	r3, r3
 800734a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800734e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007352:	b29a      	uxth	r2, r3
 8007354:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007358:	801a      	strh	r2, [r3, #0]
 800735a:	e061      	b.n	8007420 <USB_EPStartXfer+0xea2>
 800735c:	463b      	mov	r3, r7
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	2b3e      	cmp	r3, #62	; 0x3e
 8007364:	d81a      	bhi.n	800739c <USB_EPStartXfer+0xe1e>
 8007366:	463b      	mov	r3, r7
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	085b      	lsrs	r3, r3, #1
 800736e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007372:	463b      	mov	r3, r7
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b00      	cmp	r3, #0
 800737e:	d004      	beq.n	800738a <USB_EPStartXfer+0xe0c>
 8007380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007384:	3301      	adds	r3, #1
 8007386:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800738a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800738e:	b29b      	uxth	r3, r3
 8007390:	029b      	lsls	r3, r3, #10
 8007392:	b29a      	uxth	r2, r3
 8007394:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007398:	801a      	strh	r2, [r3, #0]
 800739a:	e041      	b.n	8007420 <USB_EPStartXfer+0xea2>
 800739c:	463b      	mov	r3, r7
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	095b      	lsrs	r3, r3, #5
 80073a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073a8:	463b      	mov	r3, r7
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	f003 031f 	and.w	r3, r3, #31
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d104      	bne.n	80073c0 <USB_EPStartXfer+0xe42>
 80073b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ba:	3b01      	subs	r3, #1
 80073bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	029b      	lsls	r3, r3, #10
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073d8:	801a      	strh	r2, [r3, #0]
 80073da:	e021      	b.n	8007420 <USB_EPStartXfer+0xea2>
 80073dc:	463b      	mov	r3, r7
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	785b      	ldrb	r3, [r3, #1]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d11c      	bne.n	8007420 <USB_EPStartXfer+0xea2>
 80073e6:	1d3b      	adds	r3, r7, #4
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	461a      	mov	r2, r3
 80073f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80073f6:	4413      	add	r3, r2
 80073f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073fc:	463b      	mov	r3, r7
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	00da      	lsls	r2, r3, #3
 8007404:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007408:	4413      	add	r3, r2
 800740a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800740e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007412:	463b      	mov	r3, r7
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	b29a      	uxth	r2, r3
 800741a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800741e:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8007420:	463b      	mov	r3, r7
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	2b00      	cmp	r3, #0
 8007428:	f000 81a4 	beq.w	8007774 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800742c:	1d3b      	adds	r3, r7, #4
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	463b      	mov	r3, r7
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007440:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d005      	beq.n	8007458 <USB_EPStartXfer+0xeda>
 800744c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10d      	bne.n	8007474 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007458:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800745c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007460:	2b00      	cmp	r3, #0
 8007462:	f040 8187 	bne.w	8007774 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007466:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800746a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746e:	2b00      	cmp	r3, #0
 8007470:	f040 8180 	bne.w	8007774 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007474:	1d3b      	adds	r3, r7, #4
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	463b      	mov	r3, r7
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	b29b      	uxth	r3, r3
 8007486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800748a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007492:	1d3b      	adds	r3, r7, #4
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	463b      	mov	r3, r7
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	441a      	add	r2, r3
 80074a0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80074a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	8013      	strh	r3, [r2, #0]
 80074b8:	e15c      	b.n	8007774 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80074ba:	463b      	mov	r3, r7
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	78db      	ldrb	r3, [r3, #3]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	f040 8155 	bne.w	8007770 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 80074c6:	463b      	mov	r3, r7
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	699a      	ldr	r2, [r3, #24]
 80074cc:	463b      	mov	r3, r7
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d90e      	bls.n	80074f4 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 80074d6:	463b      	mov	r3, r7
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 80074e0:	463b      	mov	r3, r7
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	699a      	ldr	r2, [r3, #24]
 80074e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074ea:	1ad2      	subs	r2, r2, r3
 80074ec:	463b      	mov	r3, r7
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	619a      	str	r2, [r3, #24]
 80074f2:	e008      	b.n	8007506 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 80074f4:	463b      	mov	r3, r7
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 80074fe:	463b      	mov	r3, r7
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2200      	movs	r2, #0
 8007504:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007506:	463b      	mov	r3, r7
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	785b      	ldrb	r3, [r3, #1]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d16f      	bne.n	80075f0 <USB_EPStartXfer+0x1072>
 8007510:	1d3b      	adds	r3, r7, #4
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007518:	1d3b      	adds	r3, r7, #4
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007520:	b29b      	uxth	r3, r3
 8007522:	461a      	mov	r2, r3
 8007524:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007528:	4413      	add	r3, r2
 800752a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800752e:	463b      	mov	r3, r7
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	00da      	lsls	r2, r3, #3
 8007536:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800753a:	4413      	add	r3, r2
 800753c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007540:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007544:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007548:	2b00      	cmp	r3, #0
 800754a:	d116      	bne.n	800757a <USB_EPStartXfer+0xffc>
 800754c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	b29b      	uxth	r3, r3
 8007554:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007558:	b29a      	uxth	r2, r3
 800755a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800755e:	801a      	strh	r2, [r3, #0]
 8007560:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007564:	881b      	ldrh	r3, [r3, #0]
 8007566:	b29b      	uxth	r3, r3
 8007568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800756c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007570:	b29a      	uxth	r2, r3
 8007572:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007576:	801a      	strh	r2, [r3, #0]
 8007578:	e05f      	b.n	800763a <USB_EPStartXfer+0x10bc>
 800757a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800757e:	2b3e      	cmp	r3, #62	; 0x3e
 8007580:	d818      	bhi.n	80075b4 <USB_EPStartXfer+0x1036>
 8007582:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007586:	085b      	lsrs	r3, r3, #1
 8007588:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800758c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	2b00      	cmp	r3, #0
 8007596:	d004      	beq.n	80075a2 <USB_EPStartXfer+0x1024>
 8007598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800759c:	3301      	adds	r3, #1
 800759e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	029b      	lsls	r3, r3, #10
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80075b0:	801a      	strh	r2, [r3, #0]
 80075b2:	e042      	b.n	800763a <USB_EPStartXfer+0x10bc>
 80075b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075b8:	095b      	lsrs	r3, r3, #5
 80075ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075c2:	f003 031f 	and.w	r3, r3, #31
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d104      	bne.n	80075d4 <USB_EPStartXfer+0x1056>
 80075ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ce:	3b01      	subs	r3, #1
 80075d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075d8:	b29b      	uxth	r3, r3
 80075da:	029b      	lsls	r3, r3, #10
 80075dc:	b29b      	uxth	r3, r3
 80075de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80075ec:	801a      	strh	r2, [r3, #0]
 80075ee:	e024      	b.n	800763a <USB_EPStartXfer+0x10bc>
 80075f0:	463b      	mov	r3, r7
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	785b      	ldrb	r3, [r3, #1]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d11f      	bne.n	800763a <USB_EPStartXfer+0x10bc>
 80075fa:	1d3b      	adds	r3, r7, #4
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007602:	1d3b      	adds	r3, r7, #4
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800760a:	b29b      	uxth	r3, r3
 800760c:	461a      	mov	r2, r3
 800760e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007612:	4413      	add	r3, r2
 8007614:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007618:	463b      	mov	r3, r7
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	00da      	lsls	r2, r3, #3
 8007620:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007624:	4413      	add	r3, r2
 8007626:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800762a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800762e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007632:	b29a      	uxth	r2, r3
 8007634:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007638:	801a      	strh	r2, [r3, #0]
 800763a:	1d3b      	adds	r3, r7, #4
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007642:	463b      	mov	r3, r7
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	785b      	ldrb	r3, [r3, #1]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d16f      	bne.n	800772c <USB_EPStartXfer+0x11ae>
 800764c:	1d3b      	adds	r3, r7, #4
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007654:	1d3b      	adds	r3, r7, #4
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800765c:	b29b      	uxth	r3, r3
 800765e:	461a      	mov	r2, r3
 8007660:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007664:	4413      	add	r3, r2
 8007666:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800766a:	463b      	mov	r3, r7
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	00da      	lsls	r2, r3, #3
 8007672:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007676:	4413      	add	r3, r2
 8007678:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800767c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007680:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007684:	2b00      	cmp	r3, #0
 8007686:	d116      	bne.n	80076b6 <USB_EPStartXfer+0x1138>
 8007688:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	b29b      	uxth	r3, r3
 8007690:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007694:	b29a      	uxth	r2, r3
 8007696:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800769a:	801a      	strh	r2, [r3, #0]
 800769c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076b2:	801a      	strh	r2, [r3, #0]
 80076b4:	e05e      	b.n	8007774 <USB_EPStartXfer+0x11f6>
 80076b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076ba:	2b3e      	cmp	r3, #62	; 0x3e
 80076bc:	d818      	bhi.n	80076f0 <USB_EPStartXfer+0x1172>
 80076be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076c2:	085b      	lsrs	r3, r3, #1
 80076c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80076c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d004      	beq.n	80076de <USB_EPStartXfer+0x1160>
 80076d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076d8:	3301      	adds	r3, #1
 80076da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80076de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	029b      	lsls	r3, r3, #10
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076ec:	801a      	strh	r2, [r3, #0]
 80076ee:	e041      	b.n	8007774 <USB_EPStartXfer+0x11f6>
 80076f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076f4:	095b      	lsrs	r3, r3, #5
 80076f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80076fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076fe:	f003 031f 	and.w	r3, r3, #31
 8007702:	2b00      	cmp	r3, #0
 8007704:	d104      	bne.n	8007710 <USB_EPStartXfer+0x1192>
 8007706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800770a:	3b01      	subs	r3, #1
 800770c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007714:	b29b      	uxth	r3, r3
 8007716:	029b      	lsls	r3, r3, #10
 8007718:	b29b      	uxth	r3, r3
 800771a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800771e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007722:	b29a      	uxth	r2, r3
 8007724:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007728:	801a      	strh	r2, [r3, #0]
 800772a:	e023      	b.n	8007774 <USB_EPStartXfer+0x11f6>
 800772c:	463b      	mov	r3, r7
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	785b      	ldrb	r3, [r3, #1]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d11e      	bne.n	8007774 <USB_EPStartXfer+0x11f6>
 8007736:	1d3b      	adds	r3, r7, #4
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800773e:	b29b      	uxth	r3, r3
 8007740:	461a      	mov	r2, r3
 8007742:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007746:	4413      	add	r3, r2
 8007748:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800774c:	463b      	mov	r3, r7
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	00da      	lsls	r2, r3, #3
 8007754:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007758:	4413      	add	r3, r2
 800775a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800775e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007762:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007766:	b29a      	uxth	r2, r3
 8007768:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800776c:	801a      	strh	r2, [r3, #0]
 800776e:	e001      	b.n	8007774 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e02e      	b.n	80077d2 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007774:	1d3b      	adds	r3, r7, #4
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	463b      	mov	r3, r7
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	881b      	ldrh	r3, [r3, #0]
 8007784:	b29b      	uxth	r3, r3
 8007786:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800778a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800778e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007792:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007796:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800779a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800779e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80077a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80077a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80077aa:	1d3b      	adds	r3, r7, #4
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	463b      	mov	r3, r7
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	441a      	add	r2, r3
 80077b8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80077bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	785b      	ldrb	r3, [r3, #1]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d020      	beq.n	8007830 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	881b      	ldrh	r3, [r3, #0]
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007804:	81bb      	strh	r3, [r7, #12]
 8007806:	89bb      	ldrh	r3, [r7, #12]
 8007808:	f083 0310 	eor.w	r3, r3, #16
 800780c:	81bb      	strh	r3, [r7, #12]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	441a      	add	r2, r3
 8007818:	89bb      	ldrh	r3, [r7, #12]
 800781a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800781e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800782a:	b29b      	uxth	r3, r3
 800782c:	8013      	strh	r3, [r2, #0]
 800782e:	e01f      	b.n	8007870 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	881b      	ldrh	r3, [r3, #0]
 800783c:	b29b      	uxth	r3, r3
 800783e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007846:	81fb      	strh	r3, [r7, #14]
 8007848:	89fb      	ldrh	r3, [r7, #14]
 800784a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800784e:	81fb      	strh	r3, [r7, #14]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	441a      	add	r2, r3
 800785a:	89fb      	ldrh	r3, [r7, #14]
 800785c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800786c:	b29b      	uxth	r3, r3
 800786e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800787e:	b480      	push	{r7}
 8007880:	b087      	sub	sp, #28
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	7b1b      	ldrb	r3, [r3, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	f040 809d 	bne.w	80079cc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	785b      	ldrb	r3, [r3, #1]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d04c      	beq.n	8007934 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	881b      	ldrh	r3, [r3, #0]
 80078a6:	823b      	strh	r3, [r7, #16]
 80078a8:	8a3b      	ldrh	r3, [r7, #16]
 80078aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d01b      	beq.n	80078ea <USB_EPClearStall+0x6c>
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	b29b      	uxth	r3, r3
 80078c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c8:	81fb      	strh	r3, [r7, #14]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	441a      	add	r2, r3
 80078d4:	89fb      	ldrh	r3, [r7, #14]
 80078d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	78db      	ldrb	r3, [r3, #3]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d06c      	beq.n	80079cc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	b29b      	uxth	r3, r3
 8007900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007908:	81bb      	strh	r3, [r7, #12]
 800790a:	89bb      	ldrh	r3, [r7, #12]
 800790c:	f083 0320 	eor.w	r3, r3, #32
 8007910:	81bb      	strh	r3, [r7, #12]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	441a      	add	r2, r3
 800791c:	89bb      	ldrh	r3, [r7, #12]
 800791e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800792a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800792e:	b29b      	uxth	r3, r3
 8007930:	8013      	strh	r3, [r2, #0]
 8007932:	e04b      	b.n	80079cc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4413      	add	r3, r2
 800793e:	881b      	ldrh	r3, [r3, #0]
 8007940:	82fb      	strh	r3, [r7, #22]
 8007942:	8afb      	ldrh	r3, [r7, #22]
 8007944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d01b      	beq.n	8007984 <USB_EPClearStall+0x106>
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	b29b      	uxth	r3, r3
 800795a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800795e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007962:	82bb      	strh	r3, [r7, #20]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	441a      	add	r2, r3
 800796e:	8abb      	ldrh	r3, [r7, #20]
 8007970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007978:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800797c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007980:	b29b      	uxth	r3, r3
 8007982:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	881b      	ldrh	r3, [r3, #0]
 8007990:	b29b      	uxth	r3, r3
 8007992:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800799a:	827b      	strh	r3, [r7, #18]
 800799c:	8a7b      	ldrh	r3, [r7, #18]
 800799e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80079a2:	827b      	strh	r3, [r7, #18]
 80079a4:	8a7b      	ldrh	r3, [r7, #18]
 80079a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80079aa:	827b      	strh	r3, [r7, #18]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	441a      	add	r2, r3
 80079b6:	8a7b      	ldrh	r3, [r7, #18]
 80079b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	371c      	adds	r7, #28
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	460b      	mov	r3, r1
 80079e4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80079e6:	78fb      	ldrb	r3, [r7, #3]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d103      	bne.n	80079f4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2280      	movs	r2, #128	; 0x80
 80079f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007a42:	68fb      	ldr	r3, [r7, #12]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3714      	adds	r7, #20
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b08d      	sub	sp, #52	; 0x34
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	4611      	mov	r1, r2
 8007a74:	461a      	mov	r2, r3
 8007a76:	460b      	mov	r3, r1
 8007a78:	80fb      	strh	r3, [r7, #6]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007a7e:	88bb      	ldrh	r3, [r7, #4]
 8007a80:	3301      	adds	r3, #1
 8007a82:	085b      	lsrs	r3, r3, #1
 8007a84:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a8e:	88fa      	ldrh	r2, [r7, #6]
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a98:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a9e:	e01b      	b.n	8007ad8 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	021b      	lsls	r3, r3, #8
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac8:	3302      	adds	r3, #2
 8007aca:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	3301      	adds	r3, #1
 8007ad0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1e0      	bne.n	8007aa0 <USB_WritePMA+0x38>
  }
}
 8007ade:	bf00      	nop
 8007ae0:	3734      	adds	r7, #52	; 0x34
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b08b      	sub	sp, #44	; 0x2c
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	60f8      	str	r0, [r7, #12]
 8007af2:	60b9      	str	r1, [r7, #8]
 8007af4:	4611      	mov	r1, r2
 8007af6:	461a      	mov	r2, r3
 8007af8:	460b      	mov	r3, r1
 8007afa:	80fb      	strh	r3, [r7, #6]
 8007afc:	4613      	mov	r3, r2
 8007afe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007b00:	88bb      	ldrh	r3, [r7, #4]
 8007b02:	085b      	lsrs	r3, r3, #1
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b10:	88fa      	ldrh	r2, [r7, #6]
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b1a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b20:	e018      	b.n	8007b54 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007b2a:	6a3b      	ldr	r3, [r7, #32]
 8007b2c:	3302      	adds	r3, #2
 8007b2e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	0a1b      	lsrs	r3, r3, #8
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b50:	3b01      	subs	r3, #1
 8007b52:	627b      	str	r3, [r7, #36]	; 0x24
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1e3      	bne.n	8007b22 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007b5a:	88bb      	ldrh	r3, [r7, #4]
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d007      	beq.n	8007b76 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	701a      	strb	r2, [r3, #0]
  }
}
 8007b76:	bf00      	nop
 8007b78:	372c      	adds	r7, #44	; 0x2c
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b8e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007b92:	f002 f847 	bl	8009c24 <USBD_static_malloc>
 8007b96:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d105      	bne.n	8007baa <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	e066      	b.n	8007c78 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	7c1b      	ldrb	r3, [r3, #16]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d119      	bne.n	8007bee <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007bba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	2181      	movs	r1, #129	; 0x81
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f001 fed3 	bl	800996e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007bce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f001 fec9 	bl	800996e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2210      	movs	r2, #16
 8007be8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007bec:	e016      	b.n	8007c1c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007bee:	2340      	movs	r3, #64	; 0x40
 8007bf0:	2202      	movs	r2, #2
 8007bf2:	2181      	movs	r1, #129	; 0x81
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f001 feba 	bl	800996e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c00:	2340      	movs	r3, #64	; 0x40
 8007c02:	2202      	movs	r2, #2
 8007c04:	2101      	movs	r1, #1
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f001 feb1 	bl	800996e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2210      	movs	r2, #16
 8007c18:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c1c:	2308      	movs	r3, #8
 8007c1e:	2203      	movs	r2, #3
 8007c20:	2182      	movs	r1, #130	; 0x82
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f001 fea3 	bl	800996e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	7c1b      	ldrb	r3, [r3, #16]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d109      	bne.n	8007c66 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f001 ff75 	bl	8009b4e <USBD_LL_PrepareReceive>
 8007c64:	e007      	b.n	8007c76 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c6c:	2340      	movs	r3, #64	; 0x40
 8007c6e:	2101      	movs	r1, #1
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f001 ff6c 	bl	8009b4e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007c8c:	2181      	movs	r1, #129	; 0x81
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f001 fe93 	bl	80099ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007c9a:	2101      	movs	r1, #1
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f001 fe8c 	bl	80099ba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007caa:	2182      	movs	r1, #130	; 0x82
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f001 fe84 	bl	80099ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00e      	beq.n	8007cea <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f001 ffaf 	bl	8009c40 <USBD_static_free>
    pdev->pClassData = NULL;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d04:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d03a      	beq.n	8007d94 <USBD_CDC_Setup+0xa0>
 8007d1e:	2b20      	cmp	r3, #32
 8007d20:	f040 8097 	bne.w	8007e52 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	88db      	ldrh	r3, [r3, #6]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d029      	beq.n	8007d80 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	b25b      	sxtb	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	da11      	bge.n	8007d5a <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007d42:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	88d2      	ldrh	r2, [r2, #6]
 8007d48:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007d4a:	6939      	ldr	r1, [r7, #16]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	88db      	ldrh	r3, [r3, #6]
 8007d50:	461a      	mov	r2, r3
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f001 fa5d 	bl	8009212 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007d58:	e082      	b.n	8007e60 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	785a      	ldrb	r2, [r3, #1]
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	88db      	ldrh	r3, [r3, #6]
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007d70:	6939      	ldr	r1, [r7, #16]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	88db      	ldrh	r3, [r3, #6]
 8007d76:	461a      	mov	r2, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f001 fa76 	bl	800926a <USBD_CtlPrepareRx>
      break;
 8007d7e:	e06f      	b.n	8007e60 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	7850      	ldrb	r0, [r2, #1]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	4798      	blx	r3
      break;
 8007d92:	e065      	b.n	8007e60 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	785b      	ldrb	r3, [r3, #1]
 8007d98:	2b0b      	cmp	r3, #11
 8007d9a:	d84f      	bhi.n	8007e3c <USBD_CDC_Setup+0x148>
 8007d9c:	a201      	add	r2, pc, #4	; (adr r2, 8007da4 <USBD_CDC_Setup+0xb0>)
 8007d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da2:	bf00      	nop
 8007da4:	08007dd5 	.word	0x08007dd5
 8007da8:	08007e4b 	.word	0x08007e4b
 8007dac:	08007e3d 	.word	0x08007e3d
 8007db0:	08007e3d 	.word	0x08007e3d
 8007db4:	08007e3d 	.word	0x08007e3d
 8007db8:	08007e3d 	.word	0x08007e3d
 8007dbc:	08007e3d 	.word	0x08007e3d
 8007dc0:	08007e3d 	.word	0x08007e3d
 8007dc4:	08007e3d 	.word	0x08007e3d
 8007dc8:	08007e3d 	.word	0x08007e3d
 8007dcc:	08007dfd 	.word	0x08007dfd
 8007dd0:	08007e25 	.word	0x08007e25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	d107      	bne.n	8007dee <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007dde:	f107 030c 	add.w	r3, r7, #12
 8007de2:	2202      	movs	r2, #2
 8007de4:	4619      	mov	r1, r3
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f001 fa13 	bl	8009212 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007dec:	e030      	b.n	8007e50 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f001 f99d 	bl	8009130 <USBD_CtlError>
            ret = USBD_FAIL;
 8007df6:	2303      	movs	r3, #3
 8007df8:	75fb      	strb	r3, [r7, #23]
          break;
 8007dfa:	e029      	b.n	8007e50 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	d107      	bne.n	8007e16 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e06:	f107 030f 	add.w	r3, r7, #15
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f001 f9ff 	bl	8009212 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e14:	e01c      	b.n	8007e50 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f001 f989 	bl	8009130 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	75fb      	strb	r3, [r7, #23]
          break;
 8007e22:	e015      	b.n	8007e50 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d00f      	beq.n	8007e4e <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f001 f97d 	bl	8009130 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e36:	2303      	movs	r3, #3
 8007e38:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007e3a:	e008      	b.n	8007e4e <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f001 f976 	bl	8009130 <USBD_CtlError>
          ret = USBD_FAIL;
 8007e44:	2303      	movs	r3, #3
 8007e46:	75fb      	strb	r3, [r7, #23]
          break;
 8007e48:	e002      	b.n	8007e50 <USBD_CDC_Setup+0x15c>
          break;
 8007e4a:	bf00      	nop
 8007e4c:	e008      	b.n	8007e60 <USBD_CDC_Setup+0x16c>
          break;
 8007e4e:	bf00      	nop
      }
      break;
 8007e50:	e006      	b.n	8007e60 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007e52:	6839      	ldr	r1, [r7, #0]
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f001 f96b 	bl	8009130 <USBD_CtlError>
      ret = USBD_FAIL;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e5e:	bf00      	nop
  }

  return (uint8_t)ret;
 8007e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3718      	adds	r7, #24
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop

08007e6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e04f      	b.n	8007f2e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e94:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007e96:	78fa      	ldrb	r2, [r7, #3]
 8007e98:	6879      	ldr	r1, [r7, #4]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4413      	add	r3, r2
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	440b      	add	r3, r1
 8007ea4:	3318      	adds	r3, #24
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d029      	beq.n	8007f00 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007eac:	78fa      	ldrb	r2, [r7, #3]
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	440b      	add	r3, r1
 8007eba:	3318      	adds	r3, #24
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	78f9      	ldrb	r1, [r7, #3]
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	440b      	add	r3, r1
 8007ec8:	00db      	lsls	r3, r3, #3
 8007eca:	4403      	add	r3, r0
 8007ecc:	3338      	adds	r3, #56	; 0x38
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ed4:	fb03 f301 	mul.w	r3, r3, r1
 8007ed8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d110      	bne.n	8007f00 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007ede:	78fa      	ldrb	r2, [r7, #3]
 8007ee0:	6879      	ldr	r1, [r7, #4]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4413      	add	r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	440b      	add	r3, r1
 8007eec:	3318      	adds	r3, #24
 8007eee:	2200      	movs	r2, #0
 8007ef0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007ef2:	78f9      	ldrb	r1, [r7, #3]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f001 fe07 	bl	8009b0c <USBD_LL_Transmit>
 8007efe:	e015      	b.n	8007f2c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00b      	beq.n	8007f2c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007f28:	78fa      	ldrb	r2, [r7, #3]
 8007f2a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b084      	sub	sp, #16
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	460b      	mov	r3, r1
 8007f40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f48:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d101      	bne.n	8007f58 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f54:	2303      	movs	r3, #3
 8007f56:	e015      	b.n	8007f84 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f58:	78fb      	ldrb	r3, [r7, #3]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f001 fe17 	bl	8009b90 <USBD_LL_GetRxDataSize>
 8007f62:	4602      	mov	r2, r0
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007f7e:	4611      	mov	r1, r2
 8007f80:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f9a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d015      	beq.n	8007fd2 <USBD_CDC_EP0_RxReady+0x46>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007fac:	2bff      	cmp	r3, #255	; 0xff
 8007fae:	d010      	beq.n	8007fd2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007fbe:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007fc6:	b292      	uxth	r2, r2
 8007fc8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	22ff      	movs	r2, #255	; 0xff
 8007fce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2243      	movs	r2, #67	; 0x43
 8007fe8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007fea:	4b03      	ldr	r3, [pc, #12]	; (8007ff8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	2000009c 	.word	0x2000009c

08007ffc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2243      	movs	r2, #67	; 0x43
 8008008:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800800a:	4b03      	ldr	r3, [pc, #12]	; (8008018 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800800c:	4618      	mov	r0, r3
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	20000058 	.word	0x20000058

0800801c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2243      	movs	r2, #67	; 0x43
 8008028:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800802a:	4b03      	ldr	r3, [pc, #12]	; (8008038 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800802c:	4618      	mov	r0, r3
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	200000e0 	.word	0x200000e0

0800803c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	220a      	movs	r2, #10
 8008048:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800804a:	4b03      	ldr	r3, [pc, #12]	; (8008058 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800804c:	4618      	mov	r0, r3
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	20000014 	.word	0x20000014

0800805c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800806c:	2303      	movs	r3, #3
 800806e:	e004      	b.n	800807a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008086:	b480      	push	{r7}
 8008088:	b087      	sub	sp, #28
 800808a:	af00      	add	r7, sp, #0
 800808c:	60f8      	str	r0, [r7, #12]
 800808e:	60b9      	str	r1, [r7, #8]
 8008090:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008098:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	371c      	adds	r7, #28
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080c8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	683a      	ldr	r2, [r7, #0]
 80080ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e016      	b.n	800812c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	7c1b      	ldrb	r3, [r3, #16]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d109      	bne.n	800811a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800810c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008110:	2101      	movs	r1, #1
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f001 fd1b 	bl	8009b4e <USBD_LL_PrepareReceive>
 8008118:	e007      	b.n	800812a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008120:	2340      	movs	r3, #64	; 0x40
 8008122:	2101      	movs	r1, #1
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f001 fd12 	bl	8009b4e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	4613      	mov	r3, r2
 8008140:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008148:	2303      	movs	r3, #3
 800814a:	e01f      	b.n	800818c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	79fa      	ldrb	r2, [r7, #7]
 800817e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f001 fb79 	bl	8009878 <USBD_LL_Init>
 8008186:	4603      	mov	r3, r0
 8008188:	75fb      	strb	r3, [r7, #23]

  return ret;
 800818a:	7dfb      	ldrb	r3, [r7, #23]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3718      	adds	r7, #24
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800819e:	2300      	movs	r3, #0
 80081a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e016      	b.n	80081da <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00b      	beq.n	80081d8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c8:	f107 020e 	add.w	r2, r7, #14
 80081cc:	4610      	mov	r0, r2
 80081ce:	4798      	blx	r3
 80081d0:	4602      	mov	r2, r0
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b082      	sub	sp, #8
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f001 fba4 	bl	8009938 <USBD_LL_Start>
 80081f0:	4603      	mov	r3, r0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b083      	sub	sp, #12
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800821c:	2303      	movs	r3, #3
 800821e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008226:	2b00      	cmp	r3, #0
 8008228:	d009      	beq.n	800823e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	78fa      	ldrb	r2, [r7, #3]
 8008234:	4611      	mov	r1, r2
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	4798      	blx	r3
 800823a:	4603      	mov	r3, r0
 800823c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800823e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800825a:	2b00      	cmp	r3, #0
 800825c:	d007      	beq.n	800826e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	78fa      	ldrb	r2, [r7, #3]
 8008268:	4611      	mov	r1, r2
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	4798      	blx	r3
  }

  return USBD_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	4618      	mov	r0, r3
 800828c:	f000 ff16 	bl	80090bc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800829e:	461a      	mov	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082ac:	f003 031f 	and.w	r3, r3, #31
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d00e      	beq.n	80082d2 <USBD_LL_SetupStage+0x5a>
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d302      	bcc.n	80082be <USBD_LL_SetupStage+0x46>
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d014      	beq.n	80082e6 <USBD_LL_SetupStage+0x6e>
 80082bc:	e01d      	b.n	80082fa <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082c4:	4619      	mov	r1, r3
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f9d6 	bl	8008678 <USBD_StdDevReq>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73fb      	strb	r3, [r7, #15]
      break;
 80082d0:	e020      	b.n	8008314 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082d8:	4619      	mov	r1, r3
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fa3a 	bl	8008754 <USBD_StdItfReq>
 80082e0:	4603      	mov	r3, r0
 80082e2:	73fb      	strb	r3, [r7, #15]
      break;
 80082e4:	e016      	b.n	8008314 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082ec:	4619      	mov	r1, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fa76 	bl	80087e0 <USBD_StdEPReq>
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]
      break;
 80082f8:	e00c      	b.n	8008314 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008300:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008304:	b2db      	uxtb	r3, r3
 8008306:	4619      	mov	r1, r3
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f001 fb75 	bl	80099f8 <USBD_LL_StallEP>
 800830e:	4603      	mov	r3, r0
 8008310:	73fb      	strb	r3, [r7, #15]
      break;
 8008312:	bf00      	nop
  }

  return ret;
 8008314:	7bfb      	ldrb	r3, [r7, #15]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b086      	sub	sp, #24
 8008322:	af00      	add	r7, sp, #0
 8008324:	60f8      	str	r0, [r7, #12]
 8008326:	460b      	mov	r3, r1
 8008328:	607a      	str	r2, [r7, #4]
 800832a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800832c:	7afb      	ldrb	r3, [r7, #11]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d137      	bne.n	80083a2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008338:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008340:	2b03      	cmp	r3, #3
 8008342:	d14a      	bne.n	80083da <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	689a      	ldr	r2, [r3, #8]
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	429a      	cmp	r2, r3
 800834e:	d913      	bls.n	8008378 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	689a      	ldr	r2, [r3, #8]
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	1ad2      	subs	r2, r2, r3
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	68da      	ldr	r2, [r3, #12]
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	4293      	cmp	r3, r2
 8008368:	bf28      	it	cs
 800836a:	4613      	movcs	r3, r2
 800836c:	461a      	mov	r2, r3
 800836e:	6879      	ldr	r1, [r7, #4]
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f000 ff97 	bl	80092a4 <USBD_CtlContinueRx>
 8008376:	e030      	b.n	80083da <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00a      	beq.n	800839a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800838a:	2b03      	cmp	r3, #3
 800838c:	d105      	bne.n	800839a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f000 ff93 	bl	80092c6 <USBD_CtlSendStatus>
 80083a0:	e01b      	b.n	80083da <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d013      	beq.n	80083d6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	d10e      	bne.n	80083d6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	7afa      	ldrb	r2, [r7, #11]
 80083c2:	4611      	mov	r1, r2
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	4798      	blx	r3
 80083c8:	4603      	mov	r3, r0
 80083ca:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80083cc:	7dfb      	ldrb	r3, [r7, #23]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d003      	beq.n	80083da <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80083d2:	7dfb      	ldrb	r3, [r7, #23]
 80083d4:	e002      	b.n	80083dc <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e000      	b.n	80083dc <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3718      	adds	r7, #24
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	460b      	mov	r3, r1
 80083ee:	607a      	str	r2, [r7, #4]
 80083f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80083f2:	7afb      	ldrb	r3, [r7, #11]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d16a      	bne.n	80084ce <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	3314      	adds	r3, #20
 80083fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008404:	2b02      	cmp	r3, #2
 8008406:	d155      	bne.n	80084b4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	689a      	ldr	r2, [r3, #8]
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	429a      	cmp	r2, r3
 8008412:	d914      	bls.n	800843e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	689a      	ldr	r2, [r3, #8]
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	1ad2      	subs	r2, r2, r3
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	461a      	mov	r2, r3
 8008428:	6879      	ldr	r1, [r7, #4]
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f000 ff0c 	bl	8009248 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008430:	2300      	movs	r3, #0
 8008432:	2200      	movs	r2, #0
 8008434:	2100      	movs	r1, #0
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f001 fb89 	bl	8009b4e <USBD_LL_PrepareReceive>
 800843c:	e03a      	b.n	80084b4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	68da      	ldr	r2, [r3, #12]
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	429a      	cmp	r2, r3
 8008448:	d11c      	bne.n	8008484 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	685a      	ldr	r2, [r3, #4]
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008452:	429a      	cmp	r2, r3
 8008454:	d316      	bcc.n	8008484 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008460:	429a      	cmp	r2, r3
 8008462:	d20f      	bcs.n	8008484 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008464:	2200      	movs	r2, #0
 8008466:	2100      	movs	r1, #0
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f000 feed 	bl	8009248 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008476:	2300      	movs	r3, #0
 8008478:	2200      	movs	r2, #0
 800847a:	2100      	movs	r1, #0
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f001 fb66 	bl	8009b4e <USBD_LL_PrepareReceive>
 8008482:	e017      	b.n	80084b4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00a      	beq.n	80084a6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008496:	2b03      	cmp	r3, #3
 8008498:	d105      	bne.n	80084a6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80084a6:	2180      	movs	r1, #128	; 0x80
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f001 faa5 	bl	80099f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f000 ff1c 	bl	80092ec <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d123      	bne.n	8008506 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f7ff fe9b 	bl	80081fa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80084cc:	e01b      	b.n	8008506 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d013      	beq.n	8008502 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	d10e      	bne.n	8008502 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ea:	695b      	ldr	r3, [r3, #20]
 80084ec:	7afa      	ldrb	r2, [r7, #11]
 80084ee:	4611      	mov	r1, r2
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	4798      	blx	r3
 80084f4:	4603      	mov	r3, r0
 80084f6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80084f8:	7dfb      	ldrb	r3, [r7, #23]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80084fe:	7dfb      	ldrb	r3, [r7, #23]
 8008500:	e002      	b.n	8008508 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008502:	2303      	movs	r3, #3
 8008504:	e000      	b.n	8008508 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3718      	adds	r7, #24
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800853c:	2b00      	cmp	r3, #0
 800853e:	d009      	beq.n	8008554 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	6852      	ldr	r2, [r2, #4]
 800854c:	b2d2      	uxtb	r2, r2
 800854e:	4611      	mov	r1, r2
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008554:	2340      	movs	r3, #64	; 0x40
 8008556:	2200      	movs	r2, #0
 8008558:	2100      	movs	r1, #0
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f001 fa07 	bl	800996e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2240      	movs	r2, #64	; 0x40
 800856c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008570:	2340      	movs	r3, #64	; 0x40
 8008572:	2200      	movs	r2, #0
 8008574:	2180      	movs	r1, #128	; 0x80
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f001 f9f9 	bl	800996e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2240      	movs	r2, #64	; 0x40
 8008586:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008592:	b480      	push	{r7}
 8008594:	b083      	sub	sp, #12
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	460b      	mov	r3, r1
 800859c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	78fa      	ldrb	r2, [r7, #3]
 80085a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	370c      	adds	r7, #12
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b083      	sub	sp, #12
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2204      	movs	r2, #4
 80085ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ea:	2b04      	cmp	r3, #4
 80085ec:	d105      	bne.n	80085fa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008616:	2b03      	cmp	r3, #3
 8008618:	d10b      	bne.n	8008632 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d005      	beq.n	8008632 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800863c:	b480      	push	{r7}
 800863e:	b087      	sub	sp, #28
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	3301      	adds	r3, #1
 8008652:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800865a:	8a3b      	ldrh	r3, [r7, #16]
 800865c:	021b      	lsls	r3, r3, #8
 800865e:	b21a      	sxth	r2, r3
 8008660:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008664:	4313      	orrs	r3, r2
 8008666:	b21b      	sxth	r3, r3
 8008668:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800866a:	89fb      	ldrh	r3, [r7, #14]
}
 800866c:	4618      	mov	r0, r3
 800866e:	371c      	adds	r7, #28
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800868e:	2b20      	cmp	r3, #32
 8008690:	d004      	beq.n	800869c <USBD_StdDevReq+0x24>
 8008692:	2b40      	cmp	r3, #64	; 0x40
 8008694:	d002      	beq.n	800869c <USBD_StdDevReq+0x24>
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00a      	beq.n	80086b0 <USBD_StdDevReq+0x38>
 800869a:	e050      	b.n	800873e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	4798      	blx	r3
 80086aa:	4603      	mov	r3, r0
 80086ac:	73fb      	strb	r3, [r7, #15]
    break;
 80086ae:	e04b      	b.n	8008748 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	785b      	ldrb	r3, [r3, #1]
 80086b4:	2b09      	cmp	r3, #9
 80086b6:	d83c      	bhi.n	8008732 <USBD_StdDevReq+0xba>
 80086b8:	a201      	add	r2, pc, #4	; (adr r2, 80086c0 <USBD_StdDevReq+0x48>)
 80086ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086be:	bf00      	nop
 80086c0:	08008715 	.word	0x08008715
 80086c4:	08008729 	.word	0x08008729
 80086c8:	08008733 	.word	0x08008733
 80086cc:	0800871f 	.word	0x0800871f
 80086d0:	08008733 	.word	0x08008733
 80086d4:	080086f3 	.word	0x080086f3
 80086d8:	080086e9 	.word	0x080086e9
 80086dc:	08008733 	.word	0x08008733
 80086e0:	0800870b 	.word	0x0800870b
 80086e4:	080086fd 	.word	0x080086fd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80086e8:	6839      	ldr	r1, [r7, #0]
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f9d0 	bl	8008a90 <USBD_GetDescriptor>
      break;
 80086f0:	e024      	b.n	800873c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fb5f 	bl	8008db8 <USBD_SetAddress>
      break;
 80086fa:	e01f      	b.n	800873c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80086fc:	6839      	ldr	r1, [r7, #0]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fb9c 	bl	8008e3c <USBD_SetConfig>
 8008704:	4603      	mov	r3, r0
 8008706:	73fb      	strb	r3, [r7, #15]
      break;
 8008708:	e018      	b.n	800873c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800870a:	6839      	ldr	r1, [r7, #0]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fc39 	bl	8008f84 <USBD_GetConfig>
      break;
 8008712:	e013      	b.n	800873c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008714:	6839      	ldr	r1, [r7, #0]
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fc68 	bl	8008fec <USBD_GetStatus>
      break;
 800871c:	e00e      	b.n	800873c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fc96 	bl	8009052 <USBD_SetFeature>
      break;
 8008726:	e009      	b.n	800873c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fca5 	bl	800907a <USBD_ClrFeature>
      break;
 8008730:	e004      	b.n	800873c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fcfb 	bl	8009130 <USBD_CtlError>
      break;
 800873a:	bf00      	nop
    }
    break;
 800873c:	e004      	b.n	8008748 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 fcf5 	bl	8009130 <USBD_CtlError>
    break;
 8008746:	bf00      	nop
  }

  return ret;
 8008748:	7bfb      	ldrb	r3, [r7, #15]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop

08008754 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800875e:	2300      	movs	r3, #0
 8008760:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800876a:	2b20      	cmp	r3, #32
 800876c:	d003      	beq.n	8008776 <USBD_StdItfReq+0x22>
 800876e:	2b40      	cmp	r3, #64	; 0x40
 8008770:	d001      	beq.n	8008776 <USBD_StdItfReq+0x22>
 8008772:	2b00      	cmp	r3, #0
 8008774:	d12a      	bne.n	80087cc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800877c:	3b01      	subs	r3, #1
 800877e:	2b02      	cmp	r3, #2
 8008780:	d81d      	bhi.n	80087be <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	889b      	ldrh	r3, [r3, #4]
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b01      	cmp	r3, #1
 800878a:	d813      	bhi.n	80087b4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	4798      	blx	r3
 800879a:	4603      	mov	r3, r0
 800879c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	88db      	ldrh	r3, [r3, #6]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d110      	bne.n	80087c8 <USBD_StdItfReq+0x74>
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10d      	bne.n	80087c8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fd8a 	bl	80092c6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80087b2:	e009      	b.n	80087c8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fcba 	bl	8009130 <USBD_CtlError>
      break;
 80087bc:	e004      	b.n	80087c8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fcb5 	bl	8009130 <USBD_CtlError>
      break;
 80087c6:	e000      	b.n	80087ca <USBD_StdItfReq+0x76>
      break;
 80087c8:	bf00      	nop
    }
    break;
 80087ca:	e004      	b.n	80087d6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fcae 	bl	8009130 <USBD_CtlError>
    break;
 80087d4:	bf00      	nop
  }

  return ret;
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	889b      	ldrh	r3, [r3, #4]
 80087f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087fc:	2b20      	cmp	r3, #32
 80087fe:	d004      	beq.n	800880a <USBD_StdEPReq+0x2a>
 8008800:	2b40      	cmp	r3, #64	; 0x40
 8008802:	d002      	beq.n	800880a <USBD_StdEPReq+0x2a>
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00a      	beq.n	800881e <USBD_StdEPReq+0x3e>
 8008808:	e137      	b.n	8008a7a <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	4798      	blx	r3
 8008818:	4603      	mov	r3, r0
 800881a:	73fb      	strb	r3, [r7, #15]
    break;
 800881c:	e132      	b.n	8008a84 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	785b      	ldrb	r3, [r3, #1]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d03e      	beq.n	80088a4 <USBD_StdEPReq+0xc4>
 8008826:	2b03      	cmp	r3, #3
 8008828:	d002      	beq.n	8008830 <USBD_StdEPReq+0x50>
 800882a:	2b00      	cmp	r3, #0
 800882c:	d079      	beq.n	8008922 <USBD_StdEPReq+0x142>
 800882e:	e11e      	b.n	8008a6e <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008836:	2b02      	cmp	r3, #2
 8008838:	d002      	beq.n	8008840 <USBD_StdEPReq+0x60>
 800883a:	2b03      	cmp	r3, #3
 800883c:	d015      	beq.n	800886a <USBD_StdEPReq+0x8a>
 800883e:	e02b      	b.n	8008898 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008840:	7bbb      	ldrb	r3, [r7, #14]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00c      	beq.n	8008860 <USBD_StdEPReq+0x80>
 8008846:	7bbb      	ldrb	r3, [r7, #14]
 8008848:	2b80      	cmp	r3, #128	; 0x80
 800884a:	d009      	beq.n	8008860 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800884c:	7bbb      	ldrb	r3, [r7, #14]
 800884e:	4619      	mov	r1, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f001 f8d1 	bl	80099f8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008856:	2180      	movs	r1, #128	; 0x80
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f001 f8cd 	bl	80099f8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800885e:	e020      	b.n	80088a2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fc64 	bl	8009130 <USBD_CtlError>
        break;
 8008868:	e01b      	b.n	80088a2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	885b      	ldrh	r3, [r3, #2]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10e      	bne.n	8008890 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008872:	7bbb      	ldrb	r3, [r7, #14]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00b      	beq.n	8008890 <USBD_StdEPReq+0xb0>
 8008878:	7bbb      	ldrb	r3, [r7, #14]
 800887a:	2b80      	cmp	r3, #128	; 0x80
 800887c:	d008      	beq.n	8008890 <USBD_StdEPReq+0xb0>
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	88db      	ldrh	r3, [r3, #6]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d104      	bne.n	8008890 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008886:	7bbb      	ldrb	r3, [r7, #14]
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f001 f8b4 	bl	80099f8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fd18 	bl	80092c6 <USBD_CtlSendStatus>

        break;
 8008896:	e004      	b.n	80088a2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fc48 	bl	8009130 <USBD_CtlError>
        break;
 80088a0:	bf00      	nop
      }
      break;
 80088a2:	e0e9      	b.n	8008a78 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d002      	beq.n	80088b4 <USBD_StdEPReq+0xd4>
 80088ae:	2b03      	cmp	r3, #3
 80088b0:	d015      	beq.n	80088de <USBD_StdEPReq+0xfe>
 80088b2:	e02f      	b.n	8008914 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088b4:	7bbb      	ldrb	r3, [r7, #14]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00c      	beq.n	80088d4 <USBD_StdEPReq+0xf4>
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	2b80      	cmp	r3, #128	; 0x80
 80088be:	d009      	beq.n	80088d4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80088c0:	7bbb      	ldrb	r3, [r7, #14]
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f001 f897 	bl	80099f8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088ca:	2180      	movs	r1, #128	; 0x80
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f001 f893 	bl	80099f8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80088d2:	e025      	b.n	8008920 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fc2a 	bl	8009130 <USBD_CtlError>
        break;
 80088dc:	e020      	b.n	8008920 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	885b      	ldrh	r3, [r3, #2]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d11b      	bne.n	800891e <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80088e6:	7bbb      	ldrb	r3, [r7, #14]
 80088e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d004      	beq.n	80088fa <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80088f0:	7bbb      	ldrb	r3, [r7, #14]
 80088f2:	4619      	mov	r1, r3
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f001 f89e 	bl	8009a36 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fce3 	bl	80092c6 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	4798      	blx	r3
 800890e:	4603      	mov	r3, r0
 8008910:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008912:	e004      	b.n	800891e <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fc0a 	bl	8009130 <USBD_CtlError>
        break;
 800891c:	e000      	b.n	8008920 <USBD_StdEPReq+0x140>
        break;
 800891e:	bf00      	nop
      }
      break;
 8008920:	e0aa      	b.n	8008a78 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008928:	2b02      	cmp	r3, #2
 800892a:	d002      	beq.n	8008932 <USBD_StdEPReq+0x152>
 800892c:	2b03      	cmp	r3, #3
 800892e:	d032      	beq.n	8008996 <USBD_StdEPReq+0x1b6>
 8008930:	e097      	b.n	8008a62 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d007      	beq.n	8008948 <USBD_StdEPReq+0x168>
 8008938:	7bbb      	ldrb	r3, [r7, #14]
 800893a:	2b80      	cmp	r3, #128	; 0x80
 800893c:	d004      	beq.n	8008948 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fbf5 	bl	8009130 <USBD_CtlError>
          break;
 8008946:	e091      	b.n	8008a6c <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008948:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800894c:	2b00      	cmp	r3, #0
 800894e:	da0b      	bge.n	8008968 <USBD_StdEPReq+0x188>
 8008950:	7bbb      	ldrb	r3, [r7, #14]
 8008952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008956:	4613      	mov	r3, r2
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	4413      	add	r3, r2
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	3310      	adds	r3, #16
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	4413      	add	r3, r2
 8008964:	3304      	adds	r3, #4
 8008966:	e00b      	b.n	8008980 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008968:	7bbb      	ldrb	r3, [r7, #14]
 800896a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800896e:	4613      	mov	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	4413      	add	r3, r2
 800897e:	3304      	adds	r3, #4
 8008980:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	2200      	movs	r2, #0
 8008986:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	2202      	movs	r2, #2
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fc3f 	bl	8009212 <USBD_CtlSendData>
        break;
 8008994:	e06a      	b.n	8008a6c <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008996:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800899a:	2b00      	cmp	r3, #0
 800899c:	da11      	bge.n	80089c2 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800899e:	7bbb      	ldrb	r3, [r7, #14]
 80089a0:	f003 020f 	and.w	r2, r3, #15
 80089a4:	6879      	ldr	r1, [r7, #4]
 80089a6:	4613      	mov	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	440b      	add	r3, r1
 80089b0:	3324      	adds	r3, #36	; 0x24
 80089b2:	881b      	ldrh	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d117      	bne.n	80089e8 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fbb8 	bl	8009130 <USBD_CtlError>
            break;
 80089c0:	e054      	b.n	8008a6c <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80089c2:	7bbb      	ldrb	r3, [r7, #14]
 80089c4:	f003 020f 	and.w	r2, r3, #15
 80089c8:	6879      	ldr	r1, [r7, #4]
 80089ca:	4613      	mov	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	440b      	add	r3, r1
 80089d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80089d8:	881b      	ldrh	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d104      	bne.n	80089e8 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fba5 	bl	8009130 <USBD_CtlError>
            break;
 80089e6:	e041      	b.n	8008a6c <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	da0b      	bge.n	8008a08 <USBD_StdEPReq+0x228>
 80089f0:	7bbb      	ldrb	r3, [r7, #14]
 80089f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089f6:	4613      	mov	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4413      	add	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	3310      	adds	r3, #16
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	4413      	add	r3, r2
 8008a04:	3304      	adds	r3, #4
 8008a06:	e00b      	b.n	8008a20 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008a08:	7bbb      	ldrb	r3, [r7, #14]
 8008a0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a0e:	4613      	mov	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	3304      	adds	r3, #4
 8008a20:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a22:	7bbb      	ldrb	r3, [r7, #14]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d002      	beq.n	8008a2e <USBD_StdEPReq+0x24e>
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
 8008a2a:	2b80      	cmp	r3, #128	; 0x80
 8008a2c:	d103      	bne.n	8008a36 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	2200      	movs	r2, #0
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	e00e      	b.n	8008a54 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008a36:	7bbb      	ldrb	r3, [r7, #14]
 8008a38:	4619      	mov	r1, r3
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f001 f81a 	bl	8009a74 <USBD_LL_IsStallEP>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d003      	beq.n	8008a4e <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	601a      	str	r2, [r3, #0]
 8008a4c:	e002      	b.n	8008a54 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	2200      	movs	r2, #0
 8008a52:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	2202      	movs	r2, #2
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fbd9 	bl	8009212 <USBD_CtlSendData>
          break;
 8008a60:	e004      	b.n	8008a6c <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fb63 	bl	8009130 <USBD_CtlError>
        break;
 8008a6a:	bf00      	nop
      }
      break;
 8008a6c:	e004      	b.n	8008a78 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fb5d 	bl	8009130 <USBD_CtlError>
      break;
 8008a76:	bf00      	nop
    }
    break;
 8008a78:	e004      	b.n	8008a84 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 fb57 	bl	8009130 <USBD_CtlError>
    break;
 8008a82:	bf00      	nop
  }

  return ret;
 8008a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
	...

08008a90 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	885b      	ldrh	r3, [r3, #2]
 8008aaa:	0a1b      	lsrs	r3, r3, #8
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	2b0e      	cmp	r3, #14
 8008ab2:	f200 8152 	bhi.w	8008d5a <USBD_GetDescriptor+0x2ca>
 8008ab6:	a201      	add	r2, pc, #4	; (adr r2, 8008abc <USBD_GetDescriptor+0x2c>)
 8008ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008abc:	08008b2d 	.word	0x08008b2d
 8008ac0:	08008b45 	.word	0x08008b45
 8008ac4:	08008b85 	.word	0x08008b85
 8008ac8:	08008d5b 	.word	0x08008d5b
 8008acc:	08008d5b 	.word	0x08008d5b
 8008ad0:	08008cfb 	.word	0x08008cfb
 8008ad4:	08008d27 	.word	0x08008d27
 8008ad8:	08008d5b 	.word	0x08008d5b
 8008adc:	08008d5b 	.word	0x08008d5b
 8008ae0:	08008d5b 	.word	0x08008d5b
 8008ae4:	08008d5b 	.word	0x08008d5b
 8008ae8:	08008d5b 	.word	0x08008d5b
 8008aec:	08008d5b 	.word	0x08008d5b
 8008af0:	08008d5b 	.word	0x08008d5b
 8008af4:	08008af9 	.word	0x08008af9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008afe:	69db      	ldr	r3, [r3, #28]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00b      	beq.n	8008b1c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b0a:	69db      	ldr	r3, [r3, #28]
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	7c12      	ldrb	r2, [r2, #16]
 8008b10:	f107 0108 	add.w	r1, r7, #8
 8008b14:	4610      	mov	r0, r2
 8008b16:	4798      	blx	r3
 8008b18:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008b1a:	e126      	b.n	8008d6a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008b1c:	6839      	ldr	r1, [r7, #0]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fb06 	bl	8009130 <USBD_CtlError>
      err++;
 8008b24:	7afb      	ldrb	r3, [r7, #11]
 8008b26:	3301      	adds	r3, #1
 8008b28:	72fb      	strb	r3, [r7, #11]
    break;
 8008b2a:	e11e      	b.n	8008d6a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	7c12      	ldrb	r2, [r2, #16]
 8008b38:	f107 0108 	add.w	r1, r7, #8
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	4798      	blx	r3
 8008b40:	60f8      	str	r0, [r7, #12]
    break;
 8008b42:	e112      	b.n	8008d6a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	7c1b      	ldrb	r3, [r3, #16]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10d      	bne.n	8008b68 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b54:	f107 0208 	add.w	r2, r7, #8
 8008b58:	4610      	mov	r0, r2
 8008b5a:	4798      	blx	r3
 8008b5c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	3301      	adds	r3, #1
 8008b62:	2202      	movs	r2, #2
 8008b64:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008b66:	e100      	b.n	8008d6a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b70:	f107 0208 	add.w	r2, r7, #8
 8008b74:	4610      	mov	r0, r2
 8008b76:	4798      	blx	r3
 8008b78:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	2202      	movs	r2, #2
 8008b80:	701a      	strb	r2, [r3, #0]
    break;
 8008b82:	e0f2      	b.n	8008d6a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	885b      	ldrh	r3, [r3, #2]
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	2b05      	cmp	r3, #5
 8008b8c:	f200 80ac 	bhi.w	8008ce8 <USBD_GetDescriptor+0x258>
 8008b90:	a201      	add	r2, pc, #4	; (adr r2, 8008b98 <USBD_GetDescriptor+0x108>)
 8008b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b96:	bf00      	nop
 8008b98:	08008bb1 	.word	0x08008bb1
 8008b9c:	08008be5 	.word	0x08008be5
 8008ba0:	08008c19 	.word	0x08008c19
 8008ba4:	08008c4d 	.word	0x08008c4d
 8008ba8:	08008c81 	.word	0x08008c81
 8008bac:	08008cb5 	.word	0x08008cb5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00b      	beq.n	8008bd4 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	7c12      	ldrb	r2, [r2, #16]
 8008bc8:	f107 0108 	add.w	r1, r7, #8
 8008bcc:	4610      	mov	r0, r2
 8008bce:	4798      	blx	r3
 8008bd0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bd2:	e091      	b.n	8008cf8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008bd4:	6839      	ldr	r1, [r7, #0]
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 faaa 	bl	8009130 <USBD_CtlError>
        err++;
 8008bdc:	7afb      	ldrb	r3, [r7, #11]
 8008bde:	3301      	adds	r3, #1
 8008be0:	72fb      	strb	r3, [r7, #11]
      break;
 8008be2:	e089      	b.n	8008cf8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00b      	beq.n	8008c08 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	7c12      	ldrb	r2, [r2, #16]
 8008bfc:	f107 0108 	add.w	r1, r7, #8
 8008c00:	4610      	mov	r0, r2
 8008c02:	4798      	blx	r3
 8008c04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c06:	e077      	b.n	8008cf8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fa90 	bl	8009130 <USBD_CtlError>
        err++;
 8008c10:	7afb      	ldrb	r3, [r7, #11]
 8008c12:	3301      	adds	r3, #1
 8008c14:	72fb      	strb	r3, [r7, #11]
      break;
 8008c16:	e06f      	b.n	8008cf8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00b      	beq.n	8008c3c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	7c12      	ldrb	r2, [r2, #16]
 8008c30:	f107 0108 	add.w	r1, r7, #8
 8008c34:	4610      	mov	r0, r2
 8008c36:	4798      	blx	r3
 8008c38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c3a:	e05d      	b.n	8008cf8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008c3c:	6839      	ldr	r1, [r7, #0]
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 fa76 	bl	8009130 <USBD_CtlError>
        err++;
 8008c44:	7afb      	ldrb	r3, [r7, #11]
 8008c46:	3301      	adds	r3, #1
 8008c48:	72fb      	strb	r3, [r7, #11]
      break;
 8008c4a:	e055      	b.n	8008cf8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00b      	beq.n	8008c70 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	7c12      	ldrb	r2, [r2, #16]
 8008c64:	f107 0108 	add.w	r1, r7, #8
 8008c68:	4610      	mov	r0, r2
 8008c6a:	4798      	blx	r3
 8008c6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c6e:	e043      	b.n	8008cf8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008c70:	6839      	ldr	r1, [r7, #0]
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 fa5c 	bl	8009130 <USBD_CtlError>
        err++;
 8008c78:	7afb      	ldrb	r3, [r7, #11]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	72fb      	strb	r3, [r7, #11]
      break;
 8008c7e:	e03b      	b.n	8008cf8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d00b      	beq.n	8008ca4 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c92:	695b      	ldr	r3, [r3, #20]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	7c12      	ldrb	r2, [r2, #16]
 8008c98:	f107 0108 	add.w	r1, r7, #8
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	4798      	blx	r3
 8008ca0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ca2:	e029      	b.n	8008cf8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008ca4:	6839      	ldr	r1, [r7, #0]
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fa42 	bl	8009130 <USBD_CtlError>
        err++;
 8008cac:	7afb      	ldrb	r3, [r7, #11]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	72fb      	strb	r3, [r7, #11]
      break;
 8008cb2:	e021      	b.n	8008cf8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00b      	beq.n	8008cd8 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	7c12      	ldrb	r2, [r2, #16]
 8008ccc:	f107 0108 	add.w	r1, r7, #8
 8008cd0:	4610      	mov	r0, r2
 8008cd2:	4798      	blx	r3
 8008cd4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cd6:	e00f      	b.n	8008cf8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fa28 	bl	8009130 <USBD_CtlError>
        err++;
 8008ce0:	7afb      	ldrb	r3, [r7, #11]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	72fb      	strb	r3, [r7, #11]
      break;
 8008ce6:	e007      	b.n	8008cf8 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008ce8:	6839      	ldr	r1, [r7, #0]
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fa20 	bl	8009130 <USBD_CtlError>
      err++;
 8008cf0:	7afb      	ldrb	r3, [r7, #11]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008cf6:	bf00      	nop
    }
    break;
 8008cf8:	e037      	b.n	8008d6a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	7c1b      	ldrb	r3, [r3, #16]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d109      	bne.n	8008d16 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d0a:	f107 0208 	add.w	r2, r7, #8
 8008d0e:	4610      	mov	r0, r2
 8008d10:	4798      	blx	r3
 8008d12:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008d14:	e029      	b.n	8008d6a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008d16:	6839      	ldr	r1, [r7, #0]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fa09 	bl	8009130 <USBD_CtlError>
      err++;
 8008d1e:	7afb      	ldrb	r3, [r7, #11]
 8008d20:	3301      	adds	r3, #1
 8008d22:	72fb      	strb	r3, [r7, #11]
    break;
 8008d24:	e021      	b.n	8008d6a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	7c1b      	ldrb	r3, [r3, #16]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10d      	bne.n	8008d4a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d36:	f107 0208 	add.w	r2, r7, #8
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	4798      	blx	r3
 8008d3e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	3301      	adds	r3, #1
 8008d44:	2207      	movs	r2, #7
 8008d46:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008d48:	e00f      	b.n	8008d6a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f9ef 	bl	8009130 <USBD_CtlError>
      err++;
 8008d52:	7afb      	ldrb	r3, [r7, #11]
 8008d54:	3301      	adds	r3, #1
 8008d56:	72fb      	strb	r3, [r7, #11]
    break;
 8008d58:	e007      	b.n	8008d6a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008d5a:	6839      	ldr	r1, [r7, #0]
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f9e7 	bl	8009130 <USBD_CtlError>
    err++;
 8008d62:	7afb      	ldrb	r3, [r7, #11]
 8008d64:	3301      	adds	r3, #1
 8008d66:	72fb      	strb	r3, [r7, #11]
    break;
 8008d68:	bf00      	nop
  }

  if (err != 0U)
 8008d6a:	7afb      	ldrb	r3, [r7, #11]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d11e      	bne.n	8008dae <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	88db      	ldrh	r3, [r3, #6]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d016      	beq.n	8008da6 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008d78:	893b      	ldrh	r3, [r7, #8]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00e      	beq.n	8008d9c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	88da      	ldrh	r2, [r3, #6]
 8008d82:	893b      	ldrh	r3, [r7, #8]
 8008d84:	4293      	cmp	r3, r2
 8008d86:	bf28      	it	cs
 8008d88:	4613      	movcs	r3, r2
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d8e:	893b      	ldrh	r3, [r7, #8]
 8008d90:	461a      	mov	r2, r3
 8008d92:	68f9      	ldr	r1, [r7, #12]
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fa3c 	bl	8009212 <USBD_CtlSendData>
 8008d9a:	e009      	b.n	8008db0 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f9c6 	bl	8009130 <USBD_CtlError>
 8008da4:	e004      	b.n	8008db0 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fa8d 	bl	80092c6 <USBD_CtlSendStatus>
 8008dac:	e000      	b.n	8008db0 <USBD_GetDescriptor+0x320>
    return;
 8008dae:	bf00      	nop
    }
  }
}
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop

08008db8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	889b      	ldrh	r3, [r3, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d130      	bne.n	8008e2c <USBD_SetAddress+0x74>
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	88db      	ldrh	r3, [r3, #6]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d12c      	bne.n	8008e2c <USBD_SetAddress+0x74>
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	885b      	ldrh	r3, [r3, #2]
 8008dd6:	2b7f      	cmp	r3, #127	; 0x7f
 8008dd8:	d828      	bhi.n	8008e2c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	885b      	ldrh	r3, [r3, #2]
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008de4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d104      	bne.n	8008dfa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f99c 	bl	8009130 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008df8:	e01c      	b.n	8008e34 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	7bfa      	ldrb	r2, [r7, #15]
 8008dfe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fe61 	bl	8009ace <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fa5a 	bl	80092c6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d004      	beq.n	8008e22 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e20:	e008      	b.n	8008e34 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2201      	movs	r2, #1
 8008e26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e2a:	e003      	b.n	8008e34 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f97e 	bl	8009130 <USBD_CtlError>
  }
}
 8008e34:	bf00      	nop
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e46:	2300      	movs	r3, #0
 8008e48:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	885b      	ldrh	r3, [r3, #2]
 8008e4e:	b2da      	uxtb	r2, r3
 8008e50:	4b4b      	ldr	r3, [pc, #300]	; (8008f80 <USBD_SetConfig+0x144>)
 8008e52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e54:	4b4a      	ldr	r3, [pc, #296]	; (8008f80 <USBD_SetConfig+0x144>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d905      	bls.n	8008e68 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 f966 	bl	8009130 <USBD_CtlError>
    return USBD_FAIL;
 8008e64:	2303      	movs	r3, #3
 8008e66:	e087      	b.n	8008f78 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d002      	beq.n	8008e78 <USBD_SetConfig+0x3c>
 8008e72:	2b03      	cmp	r3, #3
 8008e74:	d025      	beq.n	8008ec2 <USBD_SetConfig+0x86>
 8008e76:	e071      	b.n	8008f5c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008e78:	4b41      	ldr	r3, [pc, #260]	; (8008f80 <USBD_SetConfig+0x144>)
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d01c      	beq.n	8008eba <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008e80:	4b3f      	ldr	r3, [pc, #252]	; (8008f80 <USBD_SetConfig+0x144>)
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	461a      	mov	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e8a:	4b3d      	ldr	r3, [pc, #244]	; (8008f80 <USBD_SetConfig+0x144>)
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	4619      	mov	r1, r3
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f7ff f9bd 	bl	8008210 <USBD_SetClassConfig>
 8008e96:	4603      	mov	r3, r0
 8008e98:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d004      	beq.n	8008eaa <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008ea0:	6839      	ldr	r1, [r7, #0]
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f944 	bl	8009130 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008ea8:	e065      	b.n	8008f76 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fa0b 	bl	80092c6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2203      	movs	r2, #3
 8008eb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008eb8:	e05d      	b.n	8008f76 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fa03 	bl	80092c6 <USBD_CtlSendStatus>
    break;
 8008ec0:	e059      	b.n	8008f76 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008ec2:	4b2f      	ldr	r3, [pc, #188]	; (8008f80 <USBD_SetConfig+0x144>)
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d112      	bne.n	8008ef0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2202      	movs	r2, #2
 8008ece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008ed2:	4b2b      	ldr	r3, [pc, #172]	; (8008f80 <USBD_SetConfig+0x144>)
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008edc:	4b28      	ldr	r3, [pc, #160]	; (8008f80 <USBD_SetConfig+0x144>)
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7ff f9b0 	bl	8008248 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 f9ec 	bl	80092c6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008eee:	e042      	b.n	8008f76 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008ef0:	4b23      	ldr	r3, [pc, #140]	; (8008f80 <USBD_SetConfig+0x144>)
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d02a      	beq.n	8008f54 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	4619      	mov	r1, r3
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7ff f99e 	bl	8008248 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008f0c:	4b1c      	ldr	r3, [pc, #112]	; (8008f80 <USBD_SetConfig+0x144>)
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	461a      	mov	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f16:	4b1a      	ldr	r3, [pc, #104]	; (8008f80 <USBD_SetConfig+0x144>)
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7ff f977 	bl	8008210 <USBD_SetClassConfig>
 8008f22:	4603      	mov	r3, r0
 8008f24:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00f      	beq.n	8008f4c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008f2c:	6839      	ldr	r1, [r7, #0]
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f8fe 	bl	8009130 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f7ff f983 	bl	8008248 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2202      	movs	r2, #2
 8008f46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008f4a:	e014      	b.n	8008f76 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f9ba 	bl	80092c6 <USBD_CtlSendStatus>
    break;
 8008f52:	e010      	b.n	8008f76 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f9b6 	bl	80092c6 <USBD_CtlSendStatus>
    break;
 8008f5a:	e00c      	b.n	8008f76 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f8e6 	bl	8009130 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f64:	4b06      	ldr	r3, [pc, #24]	; (8008f80 <USBD_SetConfig+0x144>)
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7ff f96c 	bl	8008248 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008f70:	2303      	movs	r3, #3
 8008f72:	73fb      	strb	r3, [r7, #15]
    break;
 8008f74:	bf00      	nop
  }

  return ret;
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	200001b0 	.word	0x200001b0

08008f84 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	88db      	ldrh	r3, [r3, #6]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d004      	beq.n	8008fa0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f8c9 	bl	8009130 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008f9e:	e021      	b.n	8008fe4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	db17      	blt.n	8008fda <USBD_GetConfig+0x56>
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	dd02      	ble.n	8008fb4 <USBD_GetConfig+0x30>
 8008fae:	2b03      	cmp	r3, #3
 8008fb0:	d00b      	beq.n	8008fca <USBD_GetConfig+0x46>
 8008fb2:	e012      	b.n	8008fda <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	3308      	adds	r3, #8
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 f925 	bl	8009212 <USBD_CtlSendData>
      break;
 8008fc8:	e00c      	b.n	8008fe4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	3304      	adds	r3, #4
 8008fce:	2201      	movs	r2, #1
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f91d 	bl	8009212 <USBD_CtlSendData>
      break;
 8008fd8:	e004      	b.n	8008fe4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008fda:	6839      	ldr	r1, [r7, #0]
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f8a7 	bl	8009130 <USBD_CtlError>
      break;
 8008fe2:	bf00      	nop
}
 8008fe4:	bf00      	nop
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d81e      	bhi.n	8009040 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	88db      	ldrh	r3, [r3, #6]
 8009006:	2b02      	cmp	r3, #2
 8009008:	d004      	beq.n	8009014 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800900a:	6839      	ldr	r1, [r7, #0]
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 f88f 	bl	8009130 <USBD_CtlError>
      break;
 8009012:	e01a      	b.n	800904a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009020:	2b00      	cmp	r3, #0
 8009022:	d005      	beq.n	8009030 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	f043 0202 	orr.w	r2, r3, #2
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	330c      	adds	r3, #12
 8009034:	2202      	movs	r2, #2
 8009036:	4619      	mov	r1, r3
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 f8ea 	bl	8009212 <USBD_CtlSendData>
    break;
 800903e:	e004      	b.n	800904a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009040:	6839      	ldr	r1, [r7, #0]
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 f874 	bl	8009130 <USBD_CtlError>
    break;
 8009048:	bf00      	nop
  }
}
 800904a:	bf00      	nop
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b082      	sub	sp, #8
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	885b      	ldrh	r3, [r3, #2]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d106      	bne.n	8009072 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f92a 	bl	80092c6 <USBD_CtlSendStatus>
  }
}
 8009072:	bf00      	nop
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b082      	sub	sp, #8
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800908a:	3b01      	subs	r3, #1
 800908c:	2b02      	cmp	r3, #2
 800908e:	d80b      	bhi.n	80090a8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	885b      	ldrh	r3, [r3, #2]
 8009094:	2b01      	cmp	r3, #1
 8009096:	d10c      	bne.n	80090b2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f910 	bl	80092c6 <USBD_CtlSendStatus>
      }
      break;
 80090a6:	e004      	b.n	80090b2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f840 	bl	8009130 <USBD_CtlError>
      break;
 80090b0:	e000      	b.n	80090b4 <USBD_ClrFeature+0x3a>
      break;
 80090b2:	bf00      	nop
  }
}
 80090b4:	bf00      	nop
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	781a      	ldrb	r2, [r3, #0]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	3301      	adds	r3, #1
 80090d6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	781a      	ldrb	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	3301      	adds	r3, #1
 80090e4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f7ff faa8 	bl	800863c <SWAPBYTE>
 80090ec:	4603      	mov	r3, r0
 80090ee:	461a      	mov	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	3301      	adds	r3, #1
 80090f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	3301      	adds	r3, #1
 80090fe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	f7ff fa9b 	bl	800863c <SWAPBYTE>
 8009106:	4603      	mov	r3, r0
 8009108:	461a      	mov	r2, r3
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	3301      	adds	r3, #1
 8009112:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	3301      	adds	r3, #1
 8009118:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f7ff fa8e 	bl	800863c <SWAPBYTE>
 8009120:	4603      	mov	r3, r0
 8009122:	461a      	mov	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	80da      	strh	r2, [r3, #6]
}
 8009128:	bf00      	nop
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800913a:	2180      	movs	r1, #128	; 0x80
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 fc5b 	bl	80099f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009142:	2100      	movs	r1, #0
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fc57 	bl	80099f8 <USBD_LL_StallEP>
}
 800914a:	bf00      	nop
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b086      	sub	sp, #24
 8009156:	af00      	add	r7, sp, #0
 8009158:	60f8      	str	r0, [r7, #12]
 800915a:	60b9      	str	r1, [r7, #8]
 800915c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800915e:	2300      	movs	r3, #0
 8009160:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d036      	beq.n	80091d6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800916c:	6938      	ldr	r0, [r7, #16]
 800916e:	f000 f836 	bl	80091de <USBD_GetLen>
 8009172:	4603      	mov	r3, r0
 8009174:	3301      	adds	r3, #1
 8009176:	b29b      	uxth	r3, r3
 8009178:	005b      	lsls	r3, r3, #1
 800917a:	b29a      	uxth	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009180:	7dfb      	ldrb	r3, [r7, #23]
 8009182:	68ba      	ldr	r2, [r7, #8]
 8009184:	4413      	add	r3, r2
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	7812      	ldrb	r2, [r2, #0]
 800918a:	701a      	strb	r2, [r3, #0]
  idx++;
 800918c:	7dfb      	ldrb	r3, [r7, #23]
 800918e:	3301      	adds	r3, #1
 8009190:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009192:	7dfb      	ldrb	r3, [r7, #23]
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	4413      	add	r3, r2
 8009198:	2203      	movs	r2, #3
 800919a:	701a      	strb	r2, [r3, #0]
  idx++;
 800919c:	7dfb      	ldrb	r3, [r7, #23]
 800919e:	3301      	adds	r3, #1
 80091a0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80091a2:	e013      	b.n	80091cc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80091a4:	7dfb      	ldrb	r3, [r7, #23]
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	4413      	add	r3, r2
 80091aa:	693a      	ldr	r2, [r7, #16]
 80091ac:	7812      	ldrb	r2, [r2, #0]
 80091ae:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	3301      	adds	r3, #1
 80091b4:	613b      	str	r3, [r7, #16]
    idx++;
 80091b6:	7dfb      	ldrb	r3, [r7, #23]
 80091b8:	3301      	adds	r3, #1
 80091ba:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80091bc:	7dfb      	ldrb	r3, [r7, #23]
 80091be:	68ba      	ldr	r2, [r7, #8]
 80091c0:	4413      	add	r3, r2
 80091c2:	2200      	movs	r2, #0
 80091c4:	701a      	strb	r2, [r3, #0]
    idx++;
 80091c6:	7dfb      	ldrb	r3, [r7, #23]
 80091c8:	3301      	adds	r3, #1
 80091ca:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1e7      	bne.n	80091a4 <USBD_GetString+0x52>
 80091d4:	e000      	b.n	80091d8 <USBD_GetString+0x86>
    return;
 80091d6:	bf00      	nop
  }
}
 80091d8:	3718      	adds	r7, #24
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80091de:	b480      	push	{r7}
 80091e0:	b085      	sub	sp, #20
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80091e6:	2300      	movs	r3, #0
 80091e8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80091ee:	e005      	b.n	80091fc <USBD_GetLen+0x1e>
  {
    len++;
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
 80091f2:	3301      	adds	r3, #1
 80091f4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	3301      	adds	r3, #1
 80091fa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1f5      	bne.n	80091f0 <USBD_GetLen+0x12>
  }

  return len;
 8009204:	7bfb      	ldrb	r3, [r7, #15]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b084      	sub	sp, #16
 8009216:	af00      	add	r7, sp, #0
 8009218:	60f8      	str	r0, [r7, #12]
 800921a:	60b9      	str	r1, [r7, #8]
 800921c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2202      	movs	r2, #2
 8009222:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	68ba      	ldr	r2, [r7, #8]
 8009236:	2100      	movs	r1, #0
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f000 fc67 	bl	8009b0c <USBD_LL_Transmit>

  return USBD_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	2100      	movs	r1, #0
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f000 fc56 	bl	8009b0c <USBD_LL_Transmit>

  return USBD_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b084      	sub	sp, #16
 800926e:	af00      	add	r7, sp, #0
 8009270:	60f8      	str	r0, [r7, #12]
 8009272:	60b9      	str	r1, [r7, #8]
 8009274:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2203      	movs	r2, #3
 800927a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	2100      	movs	r1, #0
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f000 fc5a 	bl	8009b4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	2100      	movs	r1, #0
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f000 fc49 	bl	8009b4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b082      	sub	sp, #8
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2204      	movs	r2, #4
 80092d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80092d6:	2300      	movs	r3, #0
 80092d8:	2200      	movs	r2, #0
 80092da:	2100      	movs	r1, #0
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 fc15 	bl	8009b0c <USBD_LL_Transmit>

  return USBD_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2205      	movs	r2, #5
 80092f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092fc:	2300      	movs	r3, #0
 80092fe:	2200      	movs	r2, #0
 8009300:	2100      	movs	r1, #0
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fc23 	bl	8009b4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
	...

08009314 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009318:	2200      	movs	r2, #0
 800931a:	4912      	ldr	r1, [pc, #72]	; (8009364 <MX_USB_Device_Init+0x50>)
 800931c:	4812      	ldr	r0, [pc, #72]	; (8009368 <MX_USB_Device_Init+0x54>)
 800931e:	f7fe ff09 	bl	8008134 <USBD_Init>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009328:	f7f8 fa74 	bl	8001814 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800932c:	490f      	ldr	r1, [pc, #60]	; (800936c <MX_USB_Device_Init+0x58>)
 800932e:	480e      	ldr	r0, [pc, #56]	; (8009368 <MX_USB_Device_Init+0x54>)
 8009330:	f7fe ff30 	bl	8008194 <USBD_RegisterClass>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d001      	beq.n	800933e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800933a:	f7f8 fa6b 	bl	8001814 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800933e:	490c      	ldr	r1, [pc, #48]	; (8009370 <MX_USB_Device_Init+0x5c>)
 8009340:	4809      	ldr	r0, [pc, #36]	; (8009368 <MX_USB_Device_Init+0x54>)
 8009342:	f7fe fe8b 	bl	800805c <USBD_CDC_RegisterInterface>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800934c:	f7f8 fa62 	bl	8001814 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009350:	4805      	ldr	r0, [pc, #20]	; (8009368 <MX_USB_Device_Init+0x54>)
 8009352:	f7fe ff46 	bl	80081e2 <USBD_Start>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d001      	beq.n	8009360 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800935c:	f7f8 fa5a 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009360:	bf00      	nop
 8009362:	bd80      	pop	{r7, pc}
 8009364:	20000138 	.word	0x20000138
 8009368:	2000066c 	.word	0x2000066c
 800936c:	20000020 	.word	0x20000020
 8009370:	20000124 	.word	0x20000124

08009374 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009378:	2200      	movs	r2, #0
 800937a:	4905      	ldr	r1, [pc, #20]	; (8009390 <CDC_Init_FS+0x1c>)
 800937c:	4805      	ldr	r0, [pc, #20]	; (8009394 <CDC_Init_FS+0x20>)
 800937e:	f7fe fe82 	bl	8008086 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009382:	4905      	ldr	r1, [pc, #20]	; (8009398 <CDC_Init_FS+0x24>)
 8009384:	4803      	ldr	r0, [pc, #12]	; (8009394 <CDC_Init_FS+0x20>)
 8009386:	f7fe fe97 	bl	80080b8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800938a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800938c:	4618      	mov	r0, r3
 800938e:	bd80      	pop	{r7, pc}
 8009390:	20000d24 	.word	0x20000d24
 8009394:	2000066c 	.word	0x2000066c
 8009398:	2000093c 	.word	0x2000093c

0800939c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800939c:	b480      	push	{r7}
 800939e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80093a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	4603      	mov	r3, r0
 80093b4:	6039      	str	r1, [r7, #0]
 80093b6:	71fb      	strb	r3, [r7, #7]
 80093b8:	4613      	mov	r3, r2
 80093ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80093bc:	79fb      	ldrb	r3, [r7, #7]
 80093be:	2b23      	cmp	r3, #35	; 0x23
 80093c0:	d84a      	bhi.n	8009458 <CDC_Control_FS+0xac>
 80093c2:	a201      	add	r2, pc, #4	; (adr r2, 80093c8 <CDC_Control_FS+0x1c>)
 80093c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c8:	08009459 	.word	0x08009459
 80093cc:	08009459 	.word	0x08009459
 80093d0:	08009459 	.word	0x08009459
 80093d4:	08009459 	.word	0x08009459
 80093d8:	08009459 	.word	0x08009459
 80093dc:	08009459 	.word	0x08009459
 80093e0:	08009459 	.word	0x08009459
 80093e4:	08009459 	.word	0x08009459
 80093e8:	08009459 	.word	0x08009459
 80093ec:	08009459 	.word	0x08009459
 80093f0:	08009459 	.word	0x08009459
 80093f4:	08009459 	.word	0x08009459
 80093f8:	08009459 	.word	0x08009459
 80093fc:	08009459 	.word	0x08009459
 8009400:	08009459 	.word	0x08009459
 8009404:	08009459 	.word	0x08009459
 8009408:	08009459 	.word	0x08009459
 800940c:	08009459 	.word	0x08009459
 8009410:	08009459 	.word	0x08009459
 8009414:	08009459 	.word	0x08009459
 8009418:	08009459 	.word	0x08009459
 800941c:	08009459 	.word	0x08009459
 8009420:	08009459 	.word	0x08009459
 8009424:	08009459 	.word	0x08009459
 8009428:	08009459 	.word	0x08009459
 800942c:	08009459 	.word	0x08009459
 8009430:	08009459 	.word	0x08009459
 8009434:	08009459 	.word	0x08009459
 8009438:	08009459 	.word	0x08009459
 800943c:	08009459 	.word	0x08009459
 8009440:	08009459 	.word	0x08009459
 8009444:	08009459 	.word	0x08009459
 8009448:	08009459 	.word	0x08009459
 800944c:	08009459 	.word	0x08009459
 8009450:	08009459 	.word	0x08009459
 8009454:	08009459 	.word	0x08009459
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009458:	bf00      	nop
  }

  return (USBD_OK);
 800945a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800945c:	4618      	mov	r0, r3
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7f7 fb25 	bl	8000ac4 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800947a:	6879      	ldr	r1, [r7, #4]
 800947c:	4805      	ldr	r0, [pc, #20]	; (8009494 <CDC_Receive_FS+0x2c>)
 800947e:	f7fe fe1b 	bl	80080b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009482:	4804      	ldr	r0, [pc, #16]	; (8009494 <CDC_Receive_FS+0x2c>)
 8009484:	f7fe fe2c 	bl	80080e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009488:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800948a:	4618      	mov	r0, r3
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	2000066c 	.word	0x2000066c

08009498 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009498:	b480      	push	{r7}
 800949a:	b087      	sub	sp, #28
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	4613      	mov	r3, r2
 80094a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80094aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	371c      	adds	r7, #28
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
	...

080094bc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	4603      	mov	r3, r0
 80094c4:	6039      	str	r1, [r7, #0]
 80094c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	2212      	movs	r2, #18
 80094cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80094ce:	4b03      	ldr	r3, [pc, #12]	; (80094dc <USBD_CDC_DeviceDescriptor+0x20>)
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	20000158 	.word	0x20000158

080094e0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	4603      	mov	r3, r0
 80094e8:	6039      	str	r1, [r7, #0]
 80094ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	2204      	movs	r2, #4
 80094f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80094f2:	4b03      	ldr	r3, [pc, #12]	; (8009500 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	2000016c 	.word	0x2000016c

08009504 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	4603      	mov	r3, r0
 800950c:	6039      	str	r1, [r7, #0]
 800950e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009510:	79fb      	ldrb	r3, [r7, #7]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d105      	bne.n	8009522 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	4907      	ldr	r1, [pc, #28]	; (8009538 <USBD_CDC_ProductStrDescriptor+0x34>)
 800951a:	4808      	ldr	r0, [pc, #32]	; (800953c <USBD_CDC_ProductStrDescriptor+0x38>)
 800951c:	f7ff fe19 	bl	8009152 <USBD_GetString>
 8009520:	e004      	b.n	800952c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	4904      	ldr	r1, [pc, #16]	; (8009538 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009526:	4805      	ldr	r0, [pc, #20]	; (800953c <USBD_CDC_ProductStrDescriptor+0x38>)
 8009528:	f7ff fe13 	bl	8009152 <USBD_GetString>
  }
  return USBD_StrDesc;
 800952c:	4b02      	ldr	r3, [pc, #8]	; (8009538 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800952e:	4618      	mov	r0, r3
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	2000110c 	.word	0x2000110c
 800953c:	08009d28 	.word	0x08009d28

08009540 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	4603      	mov	r3, r0
 8009548:	6039      	str	r1, [r7, #0]
 800954a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800954c:	683a      	ldr	r2, [r7, #0]
 800954e:	4904      	ldr	r1, [pc, #16]	; (8009560 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009550:	4804      	ldr	r0, [pc, #16]	; (8009564 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009552:	f7ff fdfe 	bl	8009152 <USBD_GetString>
  return USBD_StrDesc;
 8009556:	4b02      	ldr	r3, [pc, #8]	; (8009560 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009558:	4618      	mov	r0, r3
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	2000110c 	.word	0x2000110c
 8009564:	08009d40 	.word	0x08009d40

08009568 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	4603      	mov	r3, r0
 8009570:	6039      	str	r1, [r7, #0]
 8009572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	221a      	movs	r2, #26
 8009578:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800957a:	f000 f843 	bl	8009604 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800957e:	4b02      	ldr	r3, [pc, #8]	; (8009588 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009580:	4618      	mov	r0, r3
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	20000170 	.word	0x20000170

0800958c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	4603      	mov	r3, r0
 8009594:	6039      	str	r1, [r7, #0]
 8009596:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009598:	79fb      	ldrb	r3, [r7, #7]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d105      	bne.n	80095aa <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800959e:	683a      	ldr	r2, [r7, #0]
 80095a0:	4907      	ldr	r1, [pc, #28]	; (80095c0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80095a2:	4808      	ldr	r0, [pc, #32]	; (80095c4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80095a4:	f7ff fdd5 	bl	8009152 <USBD_GetString>
 80095a8:	e004      	b.n	80095b4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	4904      	ldr	r1, [pc, #16]	; (80095c0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80095ae:	4805      	ldr	r0, [pc, #20]	; (80095c4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80095b0:	f7ff fdcf 	bl	8009152 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095b4:	4b02      	ldr	r3, [pc, #8]	; (80095c0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	2000110c 	.word	0x2000110c
 80095c4:	08009d54 	.word	0x08009d54

080095c8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	4603      	mov	r3, r0
 80095d0:	6039      	str	r1, [r7, #0]
 80095d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095d4:	79fb      	ldrb	r3, [r7, #7]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d105      	bne.n	80095e6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	4907      	ldr	r1, [pc, #28]	; (80095fc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80095de:	4808      	ldr	r0, [pc, #32]	; (8009600 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80095e0:	f7ff fdb7 	bl	8009152 <USBD_GetString>
 80095e4:	e004      	b.n	80095f0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	4904      	ldr	r1, [pc, #16]	; (80095fc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80095ea:	4805      	ldr	r0, [pc, #20]	; (8009600 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80095ec:	f7ff fdb1 	bl	8009152 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095f0:	4b02      	ldr	r3, [pc, #8]	; (80095fc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	2000110c 	.word	0x2000110c
 8009600:	08009d60 	.word	0x08009d60

08009604 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800960a:	4b0f      	ldr	r3, [pc, #60]	; (8009648 <Get_SerialNum+0x44>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009610:	4b0e      	ldr	r3, [pc, #56]	; (800964c <Get_SerialNum+0x48>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009616:	4b0e      	ldr	r3, [pc, #56]	; (8009650 <Get_SerialNum+0x4c>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4413      	add	r3, r2
 8009622:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d009      	beq.n	800963e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800962a:	2208      	movs	r2, #8
 800962c:	4909      	ldr	r1, [pc, #36]	; (8009654 <Get_SerialNum+0x50>)
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f000 f814 	bl	800965c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009634:	2204      	movs	r2, #4
 8009636:	4908      	ldr	r1, [pc, #32]	; (8009658 <Get_SerialNum+0x54>)
 8009638:	68b8      	ldr	r0, [r7, #8]
 800963a:	f000 f80f 	bl	800965c <IntToUnicode>
  }
}
 800963e:	bf00      	nop
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	1fff7590 	.word	0x1fff7590
 800964c:	1fff7594 	.word	0x1fff7594
 8009650:	1fff7598 	.word	0x1fff7598
 8009654:	20000172 	.word	0x20000172
 8009658:	20000182 	.word	0x20000182

0800965c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800965c:	b480      	push	{r7}
 800965e:	b087      	sub	sp, #28
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	4613      	mov	r3, r2
 8009668:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800966a:	2300      	movs	r3, #0
 800966c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800966e:	2300      	movs	r3, #0
 8009670:	75fb      	strb	r3, [r7, #23]
 8009672:	e027      	b.n	80096c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	0f1b      	lsrs	r3, r3, #28
 8009678:	2b09      	cmp	r3, #9
 800967a:	d80b      	bhi.n	8009694 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	0f1b      	lsrs	r3, r3, #28
 8009680:	b2da      	uxtb	r2, r3
 8009682:	7dfb      	ldrb	r3, [r7, #23]
 8009684:	005b      	lsls	r3, r3, #1
 8009686:	4619      	mov	r1, r3
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	440b      	add	r3, r1
 800968c:	3230      	adds	r2, #48	; 0x30
 800968e:	b2d2      	uxtb	r2, r2
 8009690:	701a      	strb	r2, [r3, #0]
 8009692:	e00a      	b.n	80096aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	0f1b      	lsrs	r3, r3, #28
 8009698:	b2da      	uxtb	r2, r3
 800969a:	7dfb      	ldrb	r3, [r7, #23]
 800969c:	005b      	lsls	r3, r3, #1
 800969e:	4619      	mov	r1, r3
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	440b      	add	r3, r1
 80096a4:	3237      	adds	r2, #55	; 0x37
 80096a6:	b2d2      	uxtb	r2, r2
 80096a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	011b      	lsls	r3, r3, #4
 80096ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80096b0:	7dfb      	ldrb	r3, [r7, #23]
 80096b2:	005b      	lsls	r3, r3, #1
 80096b4:	3301      	adds	r3, #1
 80096b6:	68ba      	ldr	r2, [r7, #8]
 80096b8:	4413      	add	r3, r2
 80096ba:	2200      	movs	r2, #0
 80096bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80096be:	7dfb      	ldrb	r3, [r7, #23]
 80096c0:	3301      	adds	r3, #1
 80096c2:	75fb      	strb	r3, [r7, #23]
 80096c4:	7dfa      	ldrb	r2, [r7, #23]
 80096c6:	79fb      	ldrb	r3, [r7, #7]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d3d3      	bcc.n	8009674 <IntToUnicode+0x18>
  }
}
 80096cc:	bf00      	nop
 80096ce:	371c      	adds	r7, #28
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a0d      	ldr	r2, [pc, #52]	; (800971c <HAL_PCD_MspInit+0x44>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d113      	bne.n	8009712 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80096ea:	4b0d      	ldr	r3, [pc, #52]	; (8009720 <HAL_PCD_MspInit+0x48>)
 80096ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ee:	4a0c      	ldr	r2, [pc, #48]	; (8009720 <HAL_PCD_MspInit+0x48>)
 80096f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80096f4:	6593      	str	r3, [r2, #88]	; 0x58
 80096f6:	4b0a      	ldr	r3, [pc, #40]	; (8009720 <HAL_PCD_MspInit+0x48>)
 80096f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096fe:	60fb      	str	r3, [r7, #12]
 8009700:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009702:	2200      	movs	r2, #0
 8009704:	2100      	movs	r1, #0
 8009706:	2014      	movs	r0, #20
 8009708:	f7f8 fb73 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800970c:	2014      	movs	r0, #20
 800970e:	f7f8 fb8a 	bl	8001e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009712:	bf00      	nop
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	40005c00 	.word	0x40005c00
 8009720:	40021000 	.word	0x40021000

08009724 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009738:	4619      	mov	r1, r3
 800973a:	4610      	mov	r0, r2
 800973c:	f7fe fd9c 	bl	8008278 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009740:	bf00      	nop
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	460b      	mov	r3, r1
 8009752:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800975a:	78fa      	ldrb	r2, [r7, #3]
 800975c:	6879      	ldr	r1, [r7, #4]
 800975e:	4613      	mov	r3, r2
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	4413      	add	r3, r2
 8009764:	00db      	lsls	r3, r3, #3
 8009766:	440b      	add	r3, r1
 8009768:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	78fb      	ldrb	r3, [r7, #3]
 8009770:	4619      	mov	r1, r3
 8009772:	f7fe fdd4 	bl	800831e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009776:	bf00      	nop
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b082      	sub	sp, #8
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
 8009786:	460b      	mov	r3, r1
 8009788:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009790:	78fa      	ldrb	r2, [r7, #3]
 8009792:	6879      	ldr	r1, [r7, #4]
 8009794:	4613      	mov	r3, r2
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4413      	add	r3, r2
 800979a:	00db      	lsls	r3, r3, #3
 800979c:	440b      	add	r3, r1
 800979e:	333c      	adds	r3, #60	; 0x3c
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	78fb      	ldrb	r3, [r7, #3]
 80097a4:	4619      	mov	r1, r3
 80097a6:	f7fe fe1d 	bl	80083e4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80097aa:	bf00      	nop
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b082      	sub	sp, #8
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fe ff21 	bl	8008608 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80097c6:	bf00      	nop
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b084      	sub	sp, #16
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80097d6:	2301      	movs	r3, #1
 80097d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d001      	beq.n	80097e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80097e2:	f7f8 f817 	bl	8001814 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80097ec:	7bfa      	ldrb	r2, [r7, #15]
 80097ee:	4611      	mov	r1, r2
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fe fece 	bl	8008592 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7fe fe87 	bl	8008510 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009802:	bf00      	nop
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
	...

0800980c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800981a:	4618      	mov	r0, r3
 800981c:	f7fe fec9 	bl	80085b2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d005      	beq.n	8009834 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009828:	4b04      	ldr	r3, [pc, #16]	; (800983c <HAL_PCD_SuspendCallback+0x30>)
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	4a03      	ldr	r2, [pc, #12]	; (800983c <HAL_PCD_SuspendCallback+0x30>)
 800982e:	f043 0306 	orr.w	r3, r3, #6
 8009832:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009834:	bf00      	nop
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	e000ed00 	.word	0xe000ed00

08009840 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	699b      	ldr	r3, [r3, #24]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d007      	beq.n	8009860 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009850:	4b08      	ldr	r3, [pc, #32]	; (8009874 <HAL_PCD_ResumeCallback+0x34>)
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	4a07      	ldr	r2, [pc, #28]	; (8009874 <HAL_PCD_ResumeCallback+0x34>)
 8009856:	f023 0306 	bic.w	r3, r3, #6
 800985a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800985c:	f000 f9fa 	bl	8009c54 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009866:	4618      	mov	r0, r3
 8009868:	f7fe feb8 	bl	80085dc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800986c:	bf00      	nop
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	e000ed00 	.word	0xe000ed00

08009878 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009880:	4a2b      	ldr	r2, [pc, #172]	; (8009930 <USBD_LL_Init+0xb8>)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a29      	ldr	r2, [pc, #164]	; (8009930 <USBD_LL_Init+0xb8>)
 800988c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009890:	4b27      	ldr	r3, [pc, #156]	; (8009930 <USBD_LL_Init+0xb8>)
 8009892:	4a28      	ldr	r2, [pc, #160]	; (8009934 <USBD_LL_Init+0xbc>)
 8009894:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009896:	4b26      	ldr	r3, [pc, #152]	; (8009930 <USBD_LL_Init+0xb8>)
 8009898:	2208      	movs	r2, #8
 800989a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800989c:	4b24      	ldr	r3, [pc, #144]	; (8009930 <USBD_LL_Init+0xb8>)
 800989e:	2202      	movs	r2, #2
 80098a0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80098a2:	4b23      	ldr	r3, [pc, #140]	; (8009930 <USBD_LL_Init+0xb8>)
 80098a4:	2202      	movs	r2, #2
 80098a6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80098a8:	4b21      	ldr	r3, [pc, #132]	; (8009930 <USBD_LL_Init+0xb8>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80098ae:	4b20      	ldr	r3, [pc, #128]	; (8009930 <USBD_LL_Init+0xb8>)
 80098b0:	2200      	movs	r2, #0
 80098b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80098b4:	4b1e      	ldr	r3, [pc, #120]	; (8009930 <USBD_LL_Init+0xb8>)
 80098b6:	2200      	movs	r2, #0
 80098b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80098ba:	4b1d      	ldr	r3, [pc, #116]	; (8009930 <USBD_LL_Init+0xb8>)
 80098bc:	2200      	movs	r2, #0
 80098be:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80098c0:	481b      	ldr	r0, [pc, #108]	; (8009930 <USBD_LL_Init+0xb8>)
 80098c2:	f7f8 fca0 	bl	8002206 <HAL_PCD_Init>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d001      	beq.n	80098d0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80098cc:	f7f7 ffa2 	bl	8001814 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80098d6:	2318      	movs	r3, #24
 80098d8:	2200      	movs	r2, #0
 80098da:	2100      	movs	r1, #0
 80098dc:	f7f9 ff8e 	bl	80037fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80098e6:	2358      	movs	r3, #88	; 0x58
 80098e8:	2200      	movs	r2, #0
 80098ea:	2180      	movs	r1, #128	; 0x80
 80098ec:	f7f9 ff86 	bl	80037fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80098f6:	23c0      	movs	r3, #192	; 0xc0
 80098f8:	2200      	movs	r2, #0
 80098fa:	2181      	movs	r1, #129	; 0x81
 80098fc:	f7f9 ff7e 	bl	80037fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009906:	f44f 7388 	mov.w	r3, #272	; 0x110
 800990a:	2200      	movs	r2, #0
 800990c:	2101      	movs	r1, #1
 800990e:	f7f9 ff75 	bl	80037fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800991c:	2200      	movs	r2, #0
 800991e:	2182      	movs	r1, #130	; 0x82
 8009920:	f7f9 ff6c 	bl	80037fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3708      	adds	r7, #8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	2000130c 	.word	0x2000130c
 8009934:	40005c00 	.word	0x40005c00

08009938 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009940:	2300      	movs	r3, #0
 8009942:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009944:	2300      	movs	r3, #0
 8009946:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800994e:	4618      	mov	r0, r3
 8009950:	f7f8 fd3e 	bl	80023d0 <HAL_PCD_Start>
 8009954:	4603      	mov	r3, r0
 8009956:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009958:	7bfb      	ldrb	r3, [r7, #15]
 800995a:	4618      	mov	r0, r3
 800995c:	f000 f980 	bl	8009c60 <USBD_Get_USB_Status>
 8009960:	4603      	mov	r3, r0
 8009962:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009964:	7bbb      	ldrb	r3, [r7, #14]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b084      	sub	sp, #16
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	4608      	mov	r0, r1
 8009978:	4611      	mov	r1, r2
 800997a:	461a      	mov	r2, r3
 800997c:	4603      	mov	r3, r0
 800997e:	70fb      	strb	r3, [r7, #3]
 8009980:	460b      	mov	r3, r1
 8009982:	70bb      	strb	r3, [r7, #2]
 8009984:	4613      	mov	r3, r2
 8009986:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009988:	2300      	movs	r3, #0
 800998a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800998c:	2300      	movs	r3, #0
 800998e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009996:	78bb      	ldrb	r3, [r7, #2]
 8009998:	883a      	ldrh	r2, [r7, #0]
 800999a:	78f9      	ldrb	r1, [r7, #3]
 800999c:	f7f8 fead 	bl	80026fa <HAL_PCD_EP_Open>
 80099a0:	4603      	mov	r3, r0
 80099a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 f95a 	bl	8009c60 <USBD_Get_USB_Status>
 80099ac:	4603      	mov	r3, r0
 80099ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b084      	sub	sp, #16
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	460b      	mov	r3, r1
 80099c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099c6:	2300      	movs	r3, #0
 80099c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099d4:	78fa      	ldrb	r2, [r7, #3]
 80099d6:	4611      	mov	r1, r2
 80099d8:	4618      	mov	r0, r3
 80099da:	f7f8 fef4 	bl	80027c6 <HAL_PCD_EP_Close>
 80099de:	4603      	mov	r3, r0
 80099e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099e2:	7bfb      	ldrb	r3, [r7, #15]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f000 f93b 	bl	8009c60 <USBD_Get_USB_Status>
 80099ea:	4603      	mov	r3, r0
 80099ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a04:	2300      	movs	r3, #0
 8009a06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a12:	78fa      	ldrb	r2, [r7, #3]
 8009a14:	4611      	mov	r1, r2
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7f8 ffb5 	bl	8002986 <HAL_PCD_EP_SetStall>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 f91c 	bl	8009c60 <USBD_Get_USB_Status>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b084      	sub	sp, #16
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	460b      	mov	r3, r1
 8009a40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a50:	78fa      	ldrb	r2, [r7, #3]
 8009a52:	4611      	mov	r1, r2
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7f8 fff6 	bl	8002a46 <HAL_PCD_EP_ClrStall>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
 8009a60:	4618      	mov	r0, r3
 8009a62:	f000 f8fd 	bl	8009c60 <USBD_Get_USB_Status>
 8009a66:	4603      	mov	r3, r0
 8009a68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	da0c      	bge.n	8009aaa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a90:	78fb      	ldrb	r3, [r7, #3]
 8009a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a96:	68f9      	ldr	r1, [r7, #12]
 8009a98:	1c5a      	adds	r2, r3, #1
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4413      	add	r3, r2
 8009aa0:	00db      	lsls	r3, r3, #3
 8009aa2:	440b      	add	r3, r1
 8009aa4:	3302      	adds	r3, #2
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	e00b      	b.n	8009ac2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009aaa:	78fb      	ldrb	r3, [r7, #3]
 8009aac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ab0:	68f9      	ldr	r1, [r7, #12]
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	4413      	add	r3, r2
 8009ab8:	00db      	lsls	r3, r3, #3
 8009aba:	440b      	add	r3, r1
 8009abc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009ac0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3714      	adds	r7, #20
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr

08009ace <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b084      	sub	sp, #16
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ada:	2300      	movs	r3, #0
 8009adc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ae8:	78fa      	ldrb	r2, [r7, #3]
 8009aea:	4611      	mov	r1, r2
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7f8 fddf 	bl	80026b0 <HAL_PCD_SetAddress>
 8009af2:	4603      	mov	r3, r0
 8009af4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 f8b1 	bl	8009c60 <USBD_Get_USB_Status>
 8009afe:	4603      	mov	r3, r0
 8009b00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b02:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b086      	sub	sp, #24
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	607a      	str	r2, [r7, #4]
 8009b16:	603b      	str	r3, [r7, #0]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009b2a:	7af9      	ldrb	r1, [r7, #11]
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	f7f8 fee6 	bl	8002900 <HAL_PCD_EP_Transmit>
 8009b34:	4603      	mov	r3, r0
 8009b36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b38:	7dfb      	ldrb	r3, [r7, #23]
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f000 f890 	bl	8009c60 <USBD_Get_USB_Status>
 8009b40:	4603      	mov	r3, r0
 8009b42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b44:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3718      	adds	r7, #24
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b086      	sub	sp, #24
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	60f8      	str	r0, [r7, #12]
 8009b56:	607a      	str	r2, [r7, #4]
 8009b58:	603b      	str	r3, [r7, #0]
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b62:	2300      	movs	r3, #0
 8009b64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009b6c:	7af9      	ldrb	r1, [r7, #11]
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	f7f8 fe70 	bl	8002856 <HAL_PCD_EP_Receive>
 8009b76:	4603      	mov	r3, r0
 8009b78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b7a:	7dfb      	ldrb	r3, [r7, #23]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f000 f86f 	bl	8009c60 <USBD_Get_USB_Status>
 8009b82:	4603      	mov	r3, r0
 8009b84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b86:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3718      	adds	r7, #24
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	460b      	mov	r3, r1
 8009b9a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ba2:	78fa      	ldrb	r2, [r7, #3]
 8009ba4:	4611      	mov	r1, r2
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7f8 fe92 	bl	80028d0 <HAL_PCD_EP_GetRxCount>
 8009bac:	4603      	mov	r3, r0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
	...

08009bb8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009bc4:	78fb      	ldrb	r3, [r7, #3]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d002      	beq.n	8009bd0 <HAL_PCDEx_LPM_Callback+0x18>
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d013      	beq.n	8009bf6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009bce:	e023      	b.n	8009c18 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	699b      	ldr	r3, [r3, #24]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d007      	beq.n	8009be8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009bd8:	f000 f83c 	bl	8009c54 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009bdc:	4b10      	ldr	r3, [pc, #64]	; (8009c20 <HAL_PCDEx_LPM_Callback+0x68>)
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	4a0f      	ldr	r2, [pc, #60]	; (8009c20 <HAL_PCDEx_LPM_Callback+0x68>)
 8009be2:	f023 0306 	bic.w	r3, r3, #6
 8009be6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fe fcf4 	bl	80085dc <USBD_LL_Resume>
    break;
 8009bf4:	e010      	b.n	8009c18 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7fe fcd8 	bl	80085b2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d005      	beq.n	8009c16 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c0a:	4b05      	ldr	r3, [pc, #20]	; (8009c20 <HAL_PCDEx_LPM_Callback+0x68>)
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	4a04      	ldr	r2, [pc, #16]	; (8009c20 <HAL_PCDEx_LPM_Callback+0x68>)
 8009c10:	f043 0306 	orr.w	r3, r3, #6
 8009c14:	6113      	str	r3, [r2, #16]
    break;
 8009c16:	bf00      	nop
}
 8009c18:	bf00      	nop
 8009c1a:	3708      	adds	r7, #8
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	e000ed00 	.word	0xe000ed00

08009c24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c2c:	4b03      	ldr	r3, [pc, #12]	; (8009c3c <USBD_static_malloc+0x18>)
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	370c      	adds	r7, #12
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	200001b4 	.word	0x200001b4

08009c40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]

}
 8009c48:	bf00      	nop
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009c58:	f7f7 fa98 	bl	800118c <SystemClock_Config>
}
 8009c5c:	bf00      	nop
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	4603      	mov	r3, r0
 8009c68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c6e:	79fb      	ldrb	r3, [r7, #7]
 8009c70:	2b03      	cmp	r3, #3
 8009c72:	d817      	bhi.n	8009ca4 <USBD_Get_USB_Status+0x44>
 8009c74:	a201      	add	r2, pc, #4	; (adr r2, 8009c7c <USBD_Get_USB_Status+0x1c>)
 8009c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7a:	bf00      	nop
 8009c7c:	08009c8d 	.word	0x08009c8d
 8009c80:	08009c93 	.word	0x08009c93
 8009c84:	08009c99 	.word	0x08009c99
 8009c88:	08009c9f 	.word	0x08009c9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c90:	e00b      	b.n	8009caa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c92:	2303      	movs	r3, #3
 8009c94:	73fb      	strb	r3, [r7, #15]
    break;
 8009c96:	e008      	b.n	8009caa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c9c:	e005      	b.n	8009caa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca2:	e002      	b.n	8009caa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca8:	bf00      	nop
  }
  return usb_status;
 8009caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3714      	adds	r7, #20
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <__libc_init_array>:
 8009cb8:	b570      	push	{r4, r5, r6, lr}
 8009cba:	4e0d      	ldr	r6, [pc, #52]	; (8009cf0 <__libc_init_array+0x38>)
 8009cbc:	4c0d      	ldr	r4, [pc, #52]	; (8009cf4 <__libc_init_array+0x3c>)
 8009cbe:	1ba4      	subs	r4, r4, r6
 8009cc0:	10a4      	asrs	r4, r4, #2
 8009cc2:	2500      	movs	r5, #0
 8009cc4:	42a5      	cmp	r5, r4
 8009cc6:	d109      	bne.n	8009cdc <__libc_init_array+0x24>
 8009cc8:	4e0b      	ldr	r6, [pc, #44]	; (8009cf8 <__libc_init_array+0x40>)
 8009cca:	4c0c      	ldr	r4, [pc, #48]	; (8009cfc <__libc_init_array+0x44>)
 8009ccc:	f000 f820 	bl	8009d10 <_init>
 8009cd0:	1ba4      	subs	r4, r4, r6
 8009cd2:	10a4      	asrs	r4, r4, #2
 8009cd4:	2500      	movs	r5, #0
 8009cd6:	42a5      	cmp	r5, r4
 8009cd8:	d105      	bne.n	8009ce6 <__libc_init_array+0x2e>
 8009cda:	bd70      	pop	{r4, r5, r6, pc}
 8009cdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ce0:	4798      	blx	r3
 8009ce2:	3501      	adds	r5, #1
 8009ce4:	e7ee      	b.n	8009cc4 <__libc_init_array+0xc>
 8009ce6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009cea:	4798      	blx	r3
 8009cec:	3501      	adds	r5, #1
 8009cee:	e7f2      	b.n	8009cd6 <__libc_init_array+0x1e>
 8009cf0:	08009d80 	.word	0x08009d80
 8009cf4:	08009d80 	.word	0x08009d80
 8009cf8:	08009d80 	.word	0x08009d80
 8009cfc:	08009d84 	.word	0x08009d84

08009d00 <memset>:
 8009d00:	4402      	add	r2, r0
 8009d02:	4603      	mov	r3, r0
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d100      	bne.n	8009d0a <memset+0xa>
 8009d08:	4770      	bx	lr
 8009d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d0e:	e7f9      	b.n	8009d04 <memset+0x4>

08009d10 <_init>:
 8009d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d12:	bf00      	nop
 8009d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d16:	bc08      	pop	{r3}
 8009d18:	469e      	mov	lr, r3
 8009d1a:	4770      	bx	lr

08009d1c <_fini>:
 8009d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1e:	bf00      	nop
 8009d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d22:	bc08      	pop	{r3}
 8009d24:	469e      	mov	lr, r3
 8009d26:	4770      	bx	lr
